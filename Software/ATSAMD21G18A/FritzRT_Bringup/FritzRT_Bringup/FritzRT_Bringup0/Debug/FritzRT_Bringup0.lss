
FritzRT_Bringup0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f00  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011f00  2**0
                  CONTENTS
  2 .bss          000002a8  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  200002a8  200002a8  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011f00  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00011f28  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027fab  00000000  00000000  00011f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ba4  00000000  00000000  00039f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000ac0  00000000  00000000  0003cad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000011c8  00000000  00000000  0003d590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00007278  00000000  00000000  0003e758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e0fd  00000000  00000000  000459d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007c0dd  00000000  00000000  00053acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001ca0  00000000  00000000  000cfbac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f836  00000000  00000000  000d184c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 22 00 20 29 01 00 00 25 01 00 00 25 01 00 00     .". )...%...%...
	...
      2c:	25 01 00 00 00 00 00 00 00 00 00 00 25 01 00 00     %...........%...
      3c:	25 01 00 00 25 01 00 00 25 01 00 00 25 01 00 00     %...%...%...%...
      4c:	25 01 00 00 25 01 00 00 25 01 00 00 25 01 00 00     %...%...%...%...
      5c:	61 1b 00 00 25 01 00 00 25 01 00 00 25 01 00 00     a...%...%...%...
      6c:	25 01 00 00 25 01 00 00 25 01 00 00 25 01 00 00     %...%...%...%...
      7c:	25 01 00 00 25 01 00 00 25 01 00 00 25 01 00 00     %...%...%...%...
      8c:	25 01 00 00 25 01 00 00 00 00 00 00 00 00 00 00     %...%...........
      9c:	25 01 00 00 25 01 00 00 25 01 00 00 25 01 00 00     %...%...%...%...
      ac:	25 01 00 00 00 00 00 00                             %.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	00001f00 	.word	0x00001f00

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	00001f00 	.word	0x00001f00
     10c:	00001f00 	.word	0x00001f00
     110:	00000000 	.word	0x00000000

00000114 <app_init>:
* @return void
*/
void app_init(void)
{
    // @todo
}
     114:	4770      	bx	lr
	...

00000118 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     118:	b510      	push	{r4, lr}
	system_init();
     11a:	4b01      	ldr	r3, [pc, #4]	; (120 <atmel_start_init+0x8>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	0000046d 	.word	0x0000046d

00000124 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     124:	e7fe      	b.n	124 <Dummy_Handler>
	...

00000128 <Reset_Handler>:
{
     128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12a:	4a2a      	ldr	r2, [pc, #168]	; (1d4 <Reset_Handler+0xac>)
     12c:	4b2a      	ldr	r3, [pc, #168]	; (1d8 <Reset_Handler+0xb0>)
     12e:	429a      	cmp	r2, r3
     130:	d011      	beq.n	156 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     132:	001a      	movs	r2, r3
     134:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xb4>)
     136:	429a      	cmp	r2, r3
     138:	d20d      	bcs.n	156 <Reset_Handler+0x2e>
     13a:	4a29      	ldr	r2, [pc, #164]	; (1e0 <Reset_Handler+0xb8>)
     13c:	3303      	adds	r3, #3
     13e:	1a9b      	subs	r3, r3, r2
     140:	089b      	lsrs	r3, r3, #2
     142:	3301      	adds	r3, #1
     144:	009b      	lsls	r3, r3, #2
     146:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     148:	4823      	ldr	r0, [pc, #140]	; (1d8 <Reset_Handler+0xb0>)
     14a:	4922      	ldr	r1, [pc, #136]	; (1d4 <Reset_Handler+0xac>)
     14c:	588c      	ldr	r4, [r1, r2]
     14e:	5084      	str	r4, [r0, r2]
     150:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     152:	429a      	cmp	r2, r3
     154:	d1fa      	bne.n	14c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     156:	4a23      	ldr	r2, [pc, #140]	; (1e4 <Reset_Handler+0xbc>)
     158:	4b23      	ldr	r3, [pc, #140]	; (1e8 <Reset_Handler+0xc0>)
     15a:	429a      	cmp	r2, r3
     15c:	d20a      	bcs.n	174 <Reset_Handler+0x4c>
     15e:	43d3      	mvns	r3, r2
     160:	4921      	ldr	r1, [pc, #132]	; (1e8 <Reset_Handler+0xc0>)
     162:	185b      	adds	r3, r3, r1
     164:	2103      	movs	r1, #3
     166:	438b      	bics	r3, r1
     168:	3304      	adds	r3, #4
     16a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     16c:	2100      	movs	r1, #0
     16e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	4293      	cmp	r3, r2
     172:	d1fc      	bne.n	16e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     174:	4a1d      	ldr	r2, [pc, #116]	; (1ec <Reset_Handler+0xc4>)
     176:	21ff      	movs	r1, #255	; 0xff
     178:	4b1d      	ldr	r3, [pc, #116]	; (1f0 <Reset_Handler+0xc8>)
     17a:	438b      	bics	r3, r1
     17c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17e:	39fd      	subs	r1, #253	; 0xfd
     180:	2390      	movs	r3, #144	; 0x90
     182:	005b      	lsls	r3, r3, #1
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xcc>)
     186:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xd0>)
     18a:	78d3      	ldrb	r3, [r2, #3]
     18c:	2503      	movs	r5, #3
     18e:	43ab      	bics	r3, r5
     190:	2402      	movs	r4, #2
     192:	4323      	orrs	r3, r4
     194:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     196:	78d3      	ldrb	r3, [r2, #3]
     198:	270c      	movs	r7, #12
     19a:	43bb      	bics	r3, r7
     19c:	2608      	movs	r6, #8
     19e:	4333      	orrs	r3, r6
     1a0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a2:	4b16      	ldr	r3, [pc, #88]	; (1fc <Reset_Handler+0xd4>)
     1a4:	7b98      	ldrb	r0, [r3, #14]
     1a6:	2230      	movs	r2, #48	; 0x30
     1a8:	4390      	bics	r0, r2
     1aa:	2220      	movs	r2, #32
     1ac:	4310      	orrs	r0, r2
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b99      	ldrb	r1, [r3, #14]
     1b2:	43b9      	bics	r1, r7
     1b4:	4331      	orrs	r1, r6
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b9a      	ldrb	r2, [r3, #14]
     1ba:	43aa      	bics	r2, r5
     1bc:	4322      	orrs	r2, r4
     1be:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a0f      	ldr	r2, [pc, #60]	; (200 <Reset_Handler+0xd8>)
     1c2:	6853      	ldr	r3, [r2, #4]
     1c4:	2180      	movs	r1, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xdc>)
     1cc:	4798      	blx	r3
        main();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xe0>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xaa>
     1d4:	00001f00 	.word	0x00001f00
     1d8:	20000000 	.word	0x20000000
     1dc:	20000000 	.word	0x20000000
     1e0:	20000004 	.word	0x20000004
     1e4:	20000000 	.word	0x20000000
     1e8:	200002a8 	.word	0x200002a8
     1ec:	e000ed00 	.word	0xe000ed00
     1f0:	00000000 	.word	0x00000000
     1f4:	41007000 	.word	0x41007000
     1f8:	41005000 	.word	0x41005000
     1fc:	41004800 	.word	0x41004800
     200:	41004000 	.word	0x41004000
     204:	00001df1 	.word	0x00001df1
     208:	00001d99 	.word	0x00001d99

0000020c <CTRL_SPI_PORT_init>:
struct spi_m_sync_descriptor CTRL_SPI;

struct usart_sync_descriptor USART_0;

void CTRL_SPI_PORT_init(void)
{
     20c:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     20e:	24c0      	movs	r4, #192	; 0xc0
     210:	05e4      	lsls	r4, r4, #23
     212:	2280      	movs	r2, #128	; 0x80
     214:	0252      	lsls	r2, r2, #9
     216:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     218:	4b22      	ldr	r3, [pc, #136]	; (2a4 <CTRL_SPI_PORT_init+0x98>)
     21a:	2080      	movs	r0, #128	; 0x80
     21c:	05c0      	lsls	r0, r0, #23
     21e:	6298      	str	r0, [r3, #40]	; 0x28
     220:	4921      	ldr	r1, [pc, #132]	; (2a8 <CTRL_SPI_PORT_init+0x9c>)
     222:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     224:	6162      	str	r2, [r4, #20]
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     226:	2150      	movs	r1, #80	; 0x50
     228:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     22a:	2501      	movs	r5, #1
     22c:	46ac      	mov	ip, r5
     22e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     230:	2701      	movs	r7, #1
     232:	433a      	orrs	r2, r7
     234:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     236:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     238:	3918      	subs	r1, #24
     23a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     23c:	350e      	adds	r5, #14
     23e:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     240:	3d0d      	subs	r5, #13
     242:	432a      	orrs	r2, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     244:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	0292      	lsls	r2, r2, #10
     24a:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     24c:	6298      	str	r0, [r3, #40]	; 0x28
     24e:	4817      	ldr	r0, [pc, #92]	; (2ac <CTRL_SPI_PORT_init+0xa0>)
     250:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     252:	6162      	str	r2, [r4, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     254:	2051      	movs	r0, #81	; 0x51
     256:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     258:	4665      	mov	r5, ip
     25a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     25c:	433a      	orrs	r2, r7
     25e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     260:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     262:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     264:	260f      	movs	r6, #15
     266:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     268:	2520      	movs	r5, #32
     26a:	4328      	orrs	r0, r5
     26c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     270:	2280      	movs	r2, #128	; 0x80
     272:	0312      	lsls	r2, r2, #12
     274:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     276:	4a0e      	ldr	r2, [pc, #56]	; (2b0 <CTRL_SPI_PORT_init+0xa4>)
     278:	629a      	str	r2, [r3, #40]	; 0x28
     27a:	4a0e      	ldr	r2, [pc, #56]	; (2b4 <CTRL_SPI_PORT_init+0xa8>)
     27c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     27e:	2253      	movs	r2, #83	; 0x53
     280:	5c99      	ldrb	r1, [r3, r2]
     282:	2004      	movs	r0, #4
     284:	4381      	bics	r1, r0
     286:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     288:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28a:	4660      	mov	r0, ip
     28c:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     28e:	4339      	orrs	r1, r7
     290:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     292:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     294:	2139      	movs	r1, #57	; 0x39
     296:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     298:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     29a:	432a      	orrs	r2, r5
     29c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29e:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PIN_SPI_CTRL_MISO, PINMUX_PA19C_SERCOM1_PAD3);
}
     2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	41004400 	.word	0x41004400
     2a8:	c0000001 	.word	0xc0000001
     2ac:	c0000002 	.word	0xc0000002
     2b0:	40020000 	.word	0x40020000
     2b4:	c0020008 	.word	0xc0020008

000002b8 <CTRL_SPI_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2b8:	4a04      	ldr	r2, [pc, #16]	; (2cc <CTRL_SPI_CLOCK_init+0x14>)
     2ba:	6a13      	ldr	r3, [r2, #32]
     2bc:	2108      	movs	r1, #8
     2be:	430b      	orrs	r3, r1
     2c0:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2c2:	4a03      	ldr	r2, [pc, #12]	; (2d0 <CTRL_SPI_CLOCK_init+0x18>)
     2c4:	4b03      	ldr	r3, [pc, #12]	; (2d4 <CTRL_SPI_CLOCK_init+0x1c>)
     2c6:	805a      	strh	r2, [r3, #2]

void CTRL_SPI_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
}
     2c8:	4770      	bx	lr
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	40000400 	.word	0x40000400
     2d0:	00004015 	.word	0x00004015
     2d4:	40000c00 	.word	0x40000c00

000002d8 <CTRL_SPI_init>:

void CTRL_SPI_init(void)
{
     2d8:	b510      	push	{r4, lr}
	CTRL_SPI_CLOCK_init();
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <CTRL_SPI_init+0x14>)
     2dc:	4798      	blx	r3
	spi_m_sync_init(&CTRL_SPI, SERCOM1);
     2de:	4904      	ldr	r1, [pc, #16]	; (2f0 <CTRL_SPI_init+0x18>)
     2e0:	4804      	ldr	r0, [pc, #16]	; (2f4 <CTRL_SPI_init+0x1c>)
     2e2:	4b05      	ldr	r3, [pc, #20]	; (2f8 <CTRL_SPI_init+0x20>)
     2e4:	4798      	blx	r3
	CTRL_SPI_PORT_init();
     2e6:	4b05      	ldr	r3, [pc, #20]	; (2fc <CTRL_SPI_init+0x24>)
     2e8:	4798      	blx	r3
}
     2ea:	bd10      	pop	{r4, pc}
     2ec:	000002b9 	.word	0x000002b9
     2f0:	42000c00 	.word	0x42000c00
     2f4:	20000288 	.word	0x20000288
     2f8:	00000615 	.word	0x00000615
     2fc:	0000020d 	.word	0x0000020d

00000300 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     300:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <USART_0_PORT_init+0x3c>)
     304:	224a      	movs	r2, #74	; 0x4a
     306:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     308:	2501      	movs	r5, #1
     30a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     30c:	2401      	movs	r4, #1
     30e:	4321      	orrs	r1, r4
     310:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     312:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     314:	2035      	movs	r0, #53	; 0x35
     316:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     318:	3a3b      	subs	r2, #59	; 0x3b
     31a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     31c:	3a0c      	subs	r2, #12
     31e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     320:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     322:	214b      	movs	r1, #75	; 0x4b
     324:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     326:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     328:	4322      	orrs	r2, r4
     32a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     32c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     32e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     330:	393c      	subs	r1, #60	; 0x3c
     332:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     334:	3121      	adds	r1, #33	; 0x21
     336:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     338:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PIN_UART_TX, PINMUX_PA10D_SERCOM2_PAD2);

	gpio_set_pin_function(PIN_UART_RX, PINMUX_PA11D_SERCOM2_PAD3);
}
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	41004400 	.word	0x41004400

00000340 <USART_0_CLOCK_init>:
     340:	4a04      	ldr	r2, [pc, #16]	; (354 <USART_0_CLOCK_init+0x14>)
     342:	6a13      	ldr	r3, [r2, #32]
     344:	2110      	movs	r1, #16
     346:	430b      	orrs	r3, r1
     348:	6213      	str	r3, [r2, #32]
     34a:	4a03      	ldr	r2, [pc, #12]	; (358 <USART_0_CLOCK_init+0x18>)
     34c:	4b03      	ldr	r3, [pc, #12]	; (35c <USART_0_CLOCK_init+0x1c>)
     34e:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     350:	4770      	bx	lr
     352:	46c0      	nop			; (mov r8, r8)
     354:	40000400 	.word	0x40000400
     358:	00004016 	.word	0x00004016
     35c:	40000c00 	.word	0x40000c00

00000360 <USART_0_init>:

void USART_0_init(void)
{
     360:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     362:	4b05      	ldr	r3, [pc, #20]	; (378 <USART_0_init+0x18>)
     364:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     366:	2200      	movs	r2, #0
     368:	4904      	ldr	r1, [pc, #16]	; (37c <USART_0_init+0x1c>)
     36a:	4805      	ldr	r0, [pc, #20]	; (380 <USART_0_init+0x20>)
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <USART_0_init+0x24>)
     36e:	4798      	blx	r3
	USART_0_PORT_init();
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <USART_0_init+0x28>)
     372:	4798      	blx	r3
}
     374:	bd10      	pop	{r4, pc}
     376:	46c0      	nop			; (mov r8, r8)
     378:	00000341 	.word	0x00000341
     37c:	42001000 	.word	0x42001000
     380:	2000029c 	.word	0x2000029c
     384:	00000801 	.word	0x00000801
     388:	00000301 	.word	0x00000301

0000038c <delay_driver_init>:

void delay_driver_init(void)
{
     38c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     38e:	4802      	ldr	r0, [pc, #8]	; (398 <delay_driver_init+0xc>)
     390:	4b02      	ldr	r3, [pc, #8]	; (39c <delay_driver_init+0x10>)
     392:	4798      	blx	r3
}
     394:	bd10      	pop	{r4, pc}
     396:	46c0      	nop			; (mov r8, r8)
     398:	e000e010 	.word	0xe000e010
     39c:	000005e1 	.word	0x000005e1

000003a0 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3a2:	46c6      	mov	lr, r8
     3a4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3a6:	24c0      	movs	r4, #192	; 0xc0
     3a8:	05e4      	lsls	r4, r4, #23
     3aa:	2280      	movs	r2, #128	; 0x80
     3ac:	0452      	lsls	r2, r2, #17
     3ae:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3b0:	4b1a      	ldr	r3, [pc, #104]	; (41c <USB_0_PORT_init+0x7c>)
     3b2:	2780      	movs	r7, #128	; 0x80
     3b4:	05ff      	lsls	r7, r7, #23
     3b6:	629f      	str	r7, [r3, #40]	; 0x28
     3b8:	4919      	ldr	r1, [pc, #100]	; (420 <USB_0_PORT_init+0x80>)
     3ba:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3bc:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3be:	2058      	movs	r0, #88	; 0x58
     3c0:	5c19      	ldrb	r1, [r3, r0]
     3c2:	2204      	movs	r2, #4
     3c4:	4690      	mov	r8, r2
     3c6:	4391      	bics	r1, r2
     3c8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ca:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	2601      	movs	r6, #1
     3ce:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d0:	2501      	movs	r5, #1
     3d2:	4329      	orrs	r1, r5
     3d4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d8:	381c      	subs	r0, #28
     3da:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3dc:	320b      	adds	r2, #11
     3de:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3e0:	3a09      	subs	r2, #9
     3e2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e4:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e6:	2180      	movs	r1, #128	; 0x80
     3e8:	0489      	lsls	r1, r1, #18
     3ea:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ec:	629f      	str	r7, [r3, #40]	; 0x28
     3ee:	4f0d      	ldr	r7, [pc, #52]	; (424 <USB_0_PORT_init+0x84>)
     3f0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3f2:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3f4:	2159      	movs	r1, #89	; 0x59
     3f6:	5c5c      	ldrb	r4, [r3, r1]
     3f8:	4642      	mov	r2, r8
     3fa:	4394      	bics	r4, r2
     3fc:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     400:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     402:	432a      	orrs	r2, r5
     404:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     408:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     40a:	394a      	subs	r1, #74	; 0x4a
     40c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     40e:	3151      	adds	r1, #81	; 0x51
     410:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     412:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     414:	bc04      	pop	{r2}
     416:	4690      	mov	r8, r2
     418:	bdf0      	pop	{r4, r5, r6, r7, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	41004400 	.word	0x41004400
     420:	c0000100 	.word	0xc0000100
     424:	c0000200 	.word	0xc0000200

00000428 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     428:	4b06      	ldr	r3, [pc, #24]	; (444 <USB_0_CLOCK_init+0x1c>)
     42a:	69da      	ldr	r2, [r3, #28]
     42c:	2120      	movs	r1, #32
     42e:	430a      	orrs	r2, r1
     430:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     432:	695a      	ldr	r2, [r3, #20]
     434:	3120      	adds	r1, #32
     436:	430a      	orrs	r2, r1
     438:	615a      	str	r2, [r3, #20]
     43a:	4a03      	ldr	r2, [pc, #12]	; (448 <USB_0_CLOCK_init+0x20>)
     43c:	4b03      	ldr	r3, [pc, #12]	; (44c <USB_0_CLOCK_init+0x24>)
     43e:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     440:	4770      	bx	lr
     442:	46c0      	nop			; (mov r8, r8)
     444:	40000400 	.word	0x40000400
     448:	00004006 	.word	0x00004006
     44c:	40000c00 	.word	0x40000c00

00000450 <USB_0_init>:

void USB_0_init(void)
{
     450:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     452:	4b03      	ldr	r3, [pc, #12]	; (460 <USB_0_init+0x10>)
     454:	4798      	blx	r3
	usb_d_init();
     456:	4b03      	ldr	r3, [pc, #12]	; (464 <USB_0_init+0x14>)
     458:	4798      	blx	r3
	USB_0_PORT_init();
     45a:	4b03      	ldr	r3, [pc, #12]	; (468 <USB_0_init+0x18>)
     45c:	4798      	blx	r3
}
     45e:	bd10      	pop	{r4, pc}
     460:	00000429 	.word	0x00000429
     464:	00000abd 	.word	0x00000abd
     468:	000003a1 	.word	0x000003a1

0000046c <system_init>:

void system_init(void)
{
     46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     46e:	4b45      	ldr	r3, [pc, #276]	; (584 <system_init+0x118>)
     470:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	22c0      	movs	r2, #192	; 0xc0
     474:	05d2      	lsls	r2, r2, #23
     476:	2540      	movs	r5, #64	; 0x40
     478:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	4b43      	ldr	r3, [pc, #268]	; (588 <system_init+0x11c>)
     47c:	4943      	ldr	r1, [pc, #268]	; (58c <system_init+0x120>)
     47e:	6299      	str	r1, [r3, #40]	; 0x28
     480:	4e43      	ldr	r6, [pc, #268]	; (590 <system_init+0x124>)
     482:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     484:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     486:	2046      	movs	r0, #70	; 0x46
     488:	5c19      	ldrb	r1, [r3, r0]
     48a:	2404      	movs	r4, #4
     48c:	4321      	orrs	r1, r4
     48e:	b2c9      	uxtb	r1, r1
     490:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     492:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     494:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	2101      	movs	r1, #1
     498:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49c:	2780      	movs	r7, #128	; 0x80
     49e:	007f      	lsls	r7, r7, #1
     4a0:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a2:	483c      	ldr	r0, [pc, #240]	; (594 <system_init+0x128>)
     4a4:	6298      	str	r0, [r3, #40]	; 0x28
     4a6:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4a8:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4aa:	2548      	movs	r5, #72	; 0x48
     4ac:	5d58      	ldrb	r0, [r3, r5]
     4ae:	4320      	orrs	r0, r4
     4b0:	b2c0      	uxtb	r0, r0
     4b2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4b4:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b8:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ba:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4bc:	3701      	adds	r7, #1
     4be:	37ff      	adds	r7, #255	; 0xff
     4c0:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c2:	4835      	ldr	r0, [pc, #212]	; (598 <system_init+0x12c>)
     4c4:	6298      	str	r0, [r3, #40]	; 0x28
     4c6:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4c8:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4ca:	3501      	adds	r5, #1
     4cc:	5d58      	ldrb	r0, [r3, r5]
     4ce:	4320      	orrs	r0, r4
     4d0:	b2c0      	uxtb	r0, r0
     4d2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4d4:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d6:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d8:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4dc:	2080      	movs	r0, #128	; 0x80
     4de:	02c0      	lsls	r0, r0, #11
     4e0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e2:	2680      	movs	r6, #128	; 0x80
     4e4:	05f6      	lsls	r6, r6, #23
     4e6:	629e      	str	r6, [r3, #40]	; 0x28
     4e8:	4d2c      	ldr	r5, [pc, #176]	; (59c <system_init+0x130>)
     4ea:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4ec:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ee:	2552      	movs	r5, #82	; 0x52
     4f0:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4f4:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4f6:	2780      	movs	r7, #128	; 0x80
     4f8:	037f      	lsls	r7, r7, #13
     4fa:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4fc:	4828      	ldr	r0, [pc, #160]	; (5a0 <system_init+0x134>)
     4fe:	4684      	mov	ip, r0
     500:	6298      	str	r0, [r3, #40]	; 0x28
     502:	4828      	ldr	r0, [pc, #160]	; (5a4 <system_init+0x138>)
     504:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     506:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     508:	3502      	adds	r5, #2
     50a:	5d58      	ldrb	r0, [r3, r5]
     50c:	4320      	orrs	r0, r4
     50e:	b2c0      	uxtb	r0, r0
     510:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     512:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     514:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     516:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     518:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     51a:	2780      	movs	r7, #128	; 0x80
     51c:	03bf      	lsls	r7, r7, #14
     51e:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     520:	4660      	mov	r0, ip
     522:	6298      	str	r0, [r3, #40]	; 0x28
     524:	4820      	ldr	r0, [pc, #128]	; (5a8 <system_init+0x13c>)
     526:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     528:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     52a:	3501      	adds	r5, #1
     52c:	5d58      	ldrb	r0, [r3, r5]
     52e:	4320      	orrs	r0, r4
     530:	b2c0      	uxtb	r0, r0
     532:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     534:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     536:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     538:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     53c:	2080      	movs	r0, #128	; 0x80
     53e:	0500      	lsls	r0, r0, #20
     540:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     542:	629e      	str	r6, [r3, #40]	; 0x28
     544:	4c19      	ldr	r4, [pc, #100]	; (5ac <system_init+0x140>)
     546:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     548:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54a:	245b      	movs	r4, #91	; 0x5b
     54c:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     54e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     550:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     552:	2008      	movs	r0, #8
     554:	342d      	adds	r4, #45	; 0x2d
     556:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     558:	3420      	adds	r4, #32
     55a:	4d15      	ldr	r5, [pc, #84]	; (5b0 <system_init+0x144>)
     55c:	511d      	str	r5, [r3, r4]
     55e:	25c0      	movs	r5, #192	; 0xc0
     560:	062d      	lsls	r5, r5, #24
     562:	511d      	str	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     564:	3c10      	subs	r4, #16
     566:	5110      	str	r0, [r2, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     568:	30bb      	adds	r0, #187	; 0xbb
     56a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     56c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56e:	541a      	strb	r2, [r3, r0]
	                   // <true"> High
	                   true);

	gpio_set_pin_function(PIN_LED_RX, GPIO_PIN_FUNCTION_OFF);

	CTRL_SPI_init();
     570:	4b10      	ldr	r3, [pc, #64]	; (5b4 <system_init+0x148>)
     572:	4798      	blx	r3

	USART_0_init();
     574:	4b10      	ldr	r3, [pc, #64]	; (5b8 <system_init+0x14c>)
     576:	4798      	blx	r3

	delay_driver_init();
     578:	4b10      	ldr	r3, [pc, #64]	; (5bc <system_init+0x150>)
     57a:	4798      	blx	r3

	USB_0_init();
     57c:	4b10      	ldr	r3, [pc, #64]	; (5c0 <system_init+0x154>)
     57e:	4798      	blx	r3
}
     580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	00000b35 	.word	0x00000b35
     588:	41004400 	.word	0x41004400
     58c:	40020040 	.word	0x40020040
     590:	c0020000 	.word	0xc0020000
     594:	40020100 	.word	0x40020100
     598:	40020200 	.word	0x40020200
     59c:	c0000004 	.word	0xc0000004
     5a0:	40020000 	.word	0x40020000
     5a4:	c0020010 	.word	0xc0020010
     5a8:	c0020020 	.word	0xc0020020
     5ac:	c0000800 	.word	0xc0000800
     5b0:	40000008 	.word	0x40000008
     5b4:	000002d9 	.word	0x000002d9
     5b8:	00000361 	.word	0x00000361
     5bc:	0000038d 	.word	0x0000038d
     5c0:	00000451 	.word	0x00000451

000005c4 <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5c4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     5c8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     5ca:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     5cc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     5d0:	4770      	bx	lr

000005d2 <atomic_leave_critical>:
     5d2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     5d6:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     5d8:	f383 8810 	msr	PRIMASK, r3
}
     5dc:	4770      	bx	lr
	...

000005e0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     5e0:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     5e2:	4b02      	ldr	r3, [pc, #8]	; (5ec <delay_init+0xc>)
     5e4:	6018      	str	r0, [r3, #0]
     5e6:	4b02      	ldr	r3, [pc, #8]	; (5f0 <delay_init+0x10>)
     5e8:	4798      	blx	r3
}
     5ea:	bd10      	pop	{r4, pc}
     5ec:	2000001c 	.word	0x2000001c
     5f0:	00000fb5 	.word	0x00000fb5

000005f4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     5f4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     5f6:	4b04      	ldr	r3, [pc, #16]	; (608 <delay_ms+0x14>)
     5f8:	681c      	ldr	r4, [r3, #0]
     5fa:	4b04      	ldr	r3, [pc, #16]	; (60c <delay_ms+0x18>)
     5fc:	4798      	blx	r3
     5fe:	0001      	movs	r1, r0
     600:	0020      	movs	r0, r4
     602:	4b03      	ldr	r3, [pc, #12]	; (610 <delay_ms+0x1c>)
     604:	4798      	blx	r3
}
     606:	bd10      	pop	{r4, pc}
     608:	2000001c 	.word	0x2000001c
     60c:	00000b29 	.word	0x00000b29
     610:	00000fc9 	.word	0x00000fc9

00000614 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	0004      	movs	r4, r0
     618:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
     61a:	2800      	cmp	r0, #0
     61c:	d016      	beq.n	64c <spi_m_sync_init+0x38>
     61e:	0008      	movs	r0, r1
     620:	1e43      	subs	r3, r0, #1
     622:	4198      	sbcs	r0, r3
     624:	b2c0      	uxtb	r0, r0
     626:	2242      	movs	r2, #66	; 0x42
     628:	4909      	ldr	r1, [pc, #36]	; (650 <spi_m_sync_init+0x3c>)
     62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <spi_m_sync_init+0x40>)
     62c:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
     62e:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
     630:	0029      	movs	r1, r5
     632:	0020      	movs	r0, r4
     634:	4b08      	ldr	r3, [pc, #32]	; (658 <spi_m_sync_init+0x44>)
     636:	4798      	blx	r3
	if (rc < 0) {
     638:	2800      	cmp	r0, #0
     63a:	db06      	blt.n	64a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     63c:	4b07      	ldr	r3, [pc, #28]	; (65c <spi_m_sync_init+0x48>)
     63e:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
     640:	4b07      	ldr	r3, [pc, #28]	; (660 <spi_m_sync_init+0x4c>)
     642:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
     644:	4b07      	ldr	r3, [pc, #28]	; (664 <spi_m_sync_init+0x50>)
     646:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
     648:	2000      	movs	r0, #0
}
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	2000      	movs	r0, #0
     64e:	e7ea      	b.n	626 <spi_m_sync_init+0x12>
     650:	00001e5c 	.word	0x00001e5c
     654:	00000b21 	.word	0x00000b21
     658:	00000c85 	.word	0x00000c85
     65c:	ffff8000 	.word	0xffff8000
     660:	000006ed 	.word	0x000006ed
     664:	000006b1 	.word	0x000006b1

00000668 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     668:	b530      	push	{r4, r5, lr}
     66a:	b087      	sub	sp, #28
     66c:	0004      	movs	r4, r0
     66e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     670:	2800      	cmp	r0, #0
     672:	d014      	beq.n	69e <spi_m_sync_transfer+0x36>
     674:	0008      	movs	r0, r1
     676:	1e43      	subs	r3, r0, #1
     678:	4198      	sbcs	r0, r3
     67a:	b2c0      	uxtb	r0, r0
     67c:	22bd      	movs	r2, #189	; 0xbd
     67e:	4909      	ldr	r1, [pc, #36]	; (6a4 <spi_m_sync_transfer+0x3c>)
     680:	4b09      	ldr	r3, [pc, #36]	; (6a8 <spi_m_sync_transfer+0x40>)
     682:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     684:	682b      	ldr	r3, [r5, #0]
     686:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     688:	686b      	ldr	r3, [r5, #4]
     68a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     68c:	68ab      	ldr	r3, [r5, #8]
     68e:	9301      	str	r3, [sp, #4]
     690:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
     692:	a903      	add	r1, sp, #12
     694:	0020      	movs	r0, r4
     696:	4b05      	ldr	r3, [pc, #20]	; (6ac <spi_m_sync_transfer+0x44>)
     698:	4798      	blx	r3
}
     69a:	b007      	add	sp, #28
     69c:	bd30      	pop	{r4, r5, pc}
     69e:	2000      	movs	r0, #0
     6a0:	e7ec      	b.n	67c <spi_m_sync_transfer+0x14>
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	00001e5c 	.word	0x00001e5c
     6a8:	00000b21 	.word	0x00000b21
     6ac:	00000dd9 	.word	0x00000dd9

000006b0 <_spi_m_sync_io_write>:
{
     6b0:	b570      	push	{r4, r5, r6, lr}
     6b2:	b084      	sub	sp, #16
     6b4:	0004      	movs	r4, r0
     6b6:	000e      	movs	r6, r1
     6b8:	0015      	movs	r5, r2
	ASSERT(io);
     6ba:	1e43      	subs	r3, r0, #1
     6bc:	4198      	sbcs	r0, r3
     6be:	b2c0      	uxtb	r0, r0
     6c0:	22ad      	movs	r2, #173	; 0xad
     6c2:	4907      	ldr	r1, [pc, #28]	; (6e0 <_spi_m_sync_io_write+0x30>)
     6c4:	4b07      	ldr	r3, [pc, #28]	; (6e4 <_spi_m_sync_io_write+0x34>)
     6c6:	4798      	blx	r3
	xfer.rxbuf = 0;
     6c8:	2300      	movs	r3, #0
     6ca:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     6cc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     6ce:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     6d0:	0020      	movs	r0, r4
     6d2:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     6d4:	a901      	add	r1, sp, #4
     6d6:	4b04      	ldr	r3, [pc, #16]	; (6e8 <_spi_m_sync_io_write+0x38>)
     6d8:	4798      	blx	r3
}
     6da:	b004      	add	sp, #16
     6dc:	bd70      	pop	{r4, r5, r6, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	00001e5c 	.word	0x00001e5c
     6e4:	00000b21 	.word	0x00000b21
     6e8:	00000669 	.word	0x00000669

000006ec <_spi_m_sync_io_read>:
{
     6ec:	b570      	push	{r4, r5, r6, lr}
     6ee:	b084      	sub	sp, #16
     6f0:	0004      	movs	r4, r0
     6f2:	000e      	movs	r6, r1
     6f4:	0015      	movs	r5, r2
	ASSERT(io);
     6f6:	1e43      	subs	r3, r0, #1
     6f8:	4198      	sbcs	r0, r3
     6fa:	b2c0      	uxtb	r0, r0
     6fc:	2291      	movs	r2, #145	; 0x91
     6fe:	4907      	ldr	r1, [pc, #28]	; (71c <_spi_m_sync_io_read+0x30>)
     700:	4b07      	ldr	r3, [pc, #28]	; (720 <_spi_m_sync_io_read+0x34>)
     702:	4798      	blx	r3
	xfer.rxbuf = buf;
     704:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     706:	2300      	movs	r3, #0
     708:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     70a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     70c:	0020      	movs	r0, r4
     70e:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     710:	a901      	add	r1, sp, #4
     712:	4b04      	ldr	r3, [pc, #16]	; (724 <_spi_m_sync_io_read+0x38>)
     714:	4798      	blx	r3
}
     716:	b004      	add	sp, #16
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	00001e5c 	.word	0x00001e5c
     720:	00000b21 	.word	0x00000b21
     724:	00000669 	.word	0x00000669

00000728 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     72a:	46ce      	mov	lr, r9
     72c:	4647      	mov	r7, r8
     72e:	b580      	push	{r7, lr}
     730:	0004      	movs	r4, r0
     732:	000f      	movs	r7, r1
     734:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     736:	2800      	cmp	r0, #0
     738:	d021      	beq.n	77e <usart_sync_write+0x56>
     73a:	2900      	cmp	r1, #0
     73c:	d021      	beq.n	782 <usart_sync_write+0x5a>
     73e:	0010      	movs	r0, r2
     740:	1e43      	subs	r3, r0, #1
     742:	4198      	sbcs	r0, r3
     744:	22fb      	movs	r2, #251	; 0xfb
     746:	4910      	ldr	r1, [pc, #64]	; (788 <usart_sync_write+0x60>)
     748:	4b10      	ldr	r3, [pc, #64]	; (78c <usart_sync_write+0x64>)
     74a:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
     74c:	3408      	adds	r4, #8
     74e:	4d10      	ldr	r5, [pc, #64]	; (790 <usart_sync_write+0x68>)
     750:	0020      	movs	r0, r4
     752:	47a8      	blx	r5
     754:	2800      	cmp	r0, #0
     756:	d0fb      	beq.n	750 <usart_sync_write+0x28>
     758:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     75a:	4b0e      	ldr	r3, [pc, #56]	; (794 <usart_sync_write+0x6c>)
     75c:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device))
     75e:	4d0c      	ldr	r5, [pc, #48]	; (790 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     760:	5db9      	ldrb	r1, [r7, r6]
     762:	0020      	movs	r0, r4
     764:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device))
     766:	0020      	movs	r0, r4
     768:	47a8      	blx	r5
     76a:	2800      	cmp	r0, #0
     76c:	d0fb      	beq.n	766 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     76e:	3601      	adds	r6, #1
     770:	4546      	cmp	r6, r8
     772:	d3f5      	bcc.n	760 <usart_sync_write+0x38>

	return (int32_t)offset;
}
     774:	0030      	movs	r0, r6
     776:	bc0c      	pop	{r2, r3}
     778:	4690      	mov	r8, r2
     77a:	4699      	mov	r9, r3
     77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     77e:	2000      	movs	r0, #0
     780:	e7e0      	b.n	744 <usart_sync_write+0x1c>
     782:	2000      	movs	r0, #0
     784:	e7de      	b.n	744 <usart_sync_write+0x1c>
     786:	46c0      	nop			; (mov r8, r8)
     788:	00001e78 	.word	0x00001e78
     78c:	00000b21 	.word	0x00000b21
     790:	00000c71 	.word	0x00000c71
     794:	00000c61 	.word	0x00000c61

00000798 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     79a:	46ce      	mov	lr, r9
     79c:	4647      	mov	r7, r8
     79e:	b580      	push	{r7, lr}
     7a0:	0004      	movs	r4, r0
     7a2:	000f      	movs	r7, r1
     7a4:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7a6:	2800      	cmp	r0, #0
     7a8:	d01d      	beq.n	7e6 <usart_sync_read+0x4e>
     7aa:	2900      	cmp	r1, #0
     7ac:	d01d      	beq.n	7ea <usart_sync_read+0x52>
     7ae:	0010      	movs	r0, r2
     7b0:	1e43      	subs	r3, r0, #1
     7b2:	4198      	sbcs	r0, r3
     7b4:	2216      	movs	r2, #22
     7b6:	32ff      	adds	r2, #255	; 0xff
     7b8:	490d      	ldr	r1, [pc, #52]	; (7f0 <usart_sync_read+0x58>)
     7ba:	4b0e      	ldr	r3, [pc, #56]	; (7f4 <usart_sync_read+0x5c>)
     7bc:	4798      	blx	r3
	uint32_t                      offset = 0;
     7be:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     7c0:	3408      	adds	r4, #8
     7c2:	4d0d      	ldr	r5, [pc, #52]	; (7f8 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7c4:	4b0d      	ldr	r3, [pc, #52]	; (7fc <usart_sync_read+0x64>)
     7c6:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     7c8:	0020      	movs	r0, r4
     7ca:	47a8      	blx	r5
     7cc:	2800      	cmp	r0, #0
     7ce:	d0fb      	beq.n	7c8 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7d0:	0020      	movs	r0, r4
     7d2:	47c8      	blx	r9
     7d4:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     7d6:	3601      	adds	r6, #1
     7d8:	4546      	cmp	r6, r8
     7da:	d3f5      	bcc.n	7c8 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     7dc:	0030      	movs	r0, r6
     7de:	bc0c      	pop	{r2, r3}
     7e0:	4690      	mov	r8, r2
     7e2:	4699      	mov	r9, r3
     7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7e6:	2000      	movs	r0, #0
     7e8:	e7e4      	b.n	7b4 <usart_sync_read+0x1c>
     7ea:	2000      	movs	r0, #0
     7ec:	e7e2      	b.n	7b4 <usart_sync_read+0x1c>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00001e78 	.word	0x00001e78
     7f4:	00000b21 	.word	0x00000b21
     7f8:	00000c7b 	.word	0x00000c7b
     7fc:	00000c69 	.word	0x00000c69

00000800 <usart_sync_init>:
{
     800:	b570      	push	{r4, r5, r6, lr}
     802:	0005      	movs	r5, r0
     804:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     806:	2800      	cmp	r0, #0
     808:	d013      	beq.n	832 <usart_sync_init+0x32>
     80a:	0008      	movs	r0, r1
     80c:	1e43      	subs	r3, r0, #1
     80e:	4198      	sbcs	r0, r3
     810:	b2c0      	uxtb	r0, r0
     812:	223e      	movs	r2, #62	; 0x3e
     814:	4908      	ldr	r1, [pc, #32]	; (838 <usart_sync_init+0x38>)
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <usart_sync_init+0x3c>)
     818:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     81a:	0028      	movs	r0, r5
     81c:	3008      	adds	r0, #8
     81e:	0021      	movs	r1, r4
     820:	4b07      	ldr	r3, [pc, #28]	; (840 <usart_sync_init+0x40>)
     822:	4798      	blx	r3
	if (init_status) {
     824:	2800      	cmp	r0, #0
     826:	d103      	bne.n	830 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     828:	4b06      	ldr	r3, [pc, #24]	; (844 <usart_sync_init+0x44>)
     82a:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     82c:	4b06      	ldr	r3, [pc, #24]	; (848 <usart_sync_init+0x48>)
     82e:	602b      	str	r3, [r5, #0]
}
     830:	bd70      	pop	{r4, r5, r6, pc}
     832:	2000      	movs	r0, #0
     834:	e7ed      	b.n	812 <usart_sync_init+0x12>
     836:	46c0      	nop			; (mov r8, r8)
     838:	00001e78 	.word	0x00001e78
     83c:	00000b21 	.word	0x00000b21
     840:	00000c35 	.word	0x00000c35
     844:	00000799 	.word	0x00000799
     848:	00000729 	.word	0x00000729

0000084c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     850:	4b0e      	ldr	r3, [pc, #56]	; (88c <_usb_d_find_ep+0x40>)
     852:	785a      	ldrb	r2, [r3, #1]
     854:	4290      	cmp	r0, r2
     856:	d017      	beq.n	888 <_usb_d_find_ep+0x3c>
     858:	2300      	movs	r3, #0
     85a:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     85c:	4f0b      	ldr	r7, [pc, #44]	; (88c <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     85e:	260f      	movs	r6, #15
     860:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     862:	003d      	movs	r5, r7
     864:	e008      	b.n	878 <_usb_d_find_ep+0x2c>
     866:	3001      	adds	r0, #1
     868:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     86a:	2804      	cmp	r0, #4
     86c:	d00a      	beq.n	884 <_usb_d_find_ep+0x38>
     86e:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     870:	18ea      	adds	r2, r5, r3
     872:	7852      	ldrb	r2, [r2, #1]
     874:	42a2      	cmp	r2, r4
     876:	d006      	beq.n	886 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     878:	5dd9      	ldrb	r1, [r3, r7]
     87a:	2900      	cmp	r1, #0
     87c:	d1f3      	bne.n	866 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     87e:	4296      	cmp	r6, r2
     880:	d1f1      	bne.n	866 <_usb_d_find_ep+0x1a>
     882:	e000      	b.n	886 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     884:	3805      	subs	r0, #5
}
     886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     888:	2000      	movs	r0, #0
     88a:	e7fc      	b.n	886 <_usb_d_find_ep+0x3a>
     88c:	20000020 	.word	0x20000020

00000890 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     890:	2000      	movs	r0, #0
     892:	4770      	bx	lr

00000894 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	0004      	movs	r4, r0
     898:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     89a:	4b0a      	ldr	r3, [pc, #40]	; (8c4 <usb_d_cb_trans_more+0x30>)
     89c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     89e:	0142      	lsls	r2, r0, #5
     8a0:	4b09      	ldr	r3, [pc, #36]	; (8c8 <usb_d_cb_trans_more+0x34>)
     8a2:	189b      	adds	r3, r3, r2
     8a4:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     8a6:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     8a8:	2a03      	cmp	r2, #3
     8aa:	d001      	beq.n	8b0 <usb_d_cb_trans_more+0x1c>
}
     8ac:	0018      	movs	r0, r3
     8ae:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     8b0:	0140      	lsls	r0, r0, #5
     8b2:	4b05      	ldr	r3, [pc, #20]	; (8c8 <usb_d_cb_trans_more+0x34>)
     8b4:	1818      	adds	r0, r3, r0
     8b6:	6983      	ldr	r3, [r0, #24]
     8b8:	0029      	movs	r1, r5
     8ba:	0020      	movs	r0, r4
     8bc:	4798      	blx	r3
     8be:	0003      	movs	r3, r0
     8c0:	e7f4      	b.n	8ac <usb_d_cb_trans_more+0x18>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	0000084d 	.word	0x0000084d
     8c8:	20000020 	.word	0x20000020

000008cc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ce:	b085      	sub	sp, #20
     8d0:	0005      	movs	r5, r0
     8d2:	000f      	movs	r7, r1
     8d4:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     8d6:	4b51      	ldr	r3, [pc, #324]	; (a1c <_usb_d_cb_trans_done+0x150>)
     8d8:	4798      	blx	r3
     8da:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     8dc:	2f00      	cmp	r7, #0
     8de:	d162      	bne.n	9a6 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     8e0:	4b4f      	ldr	r3, [pc, #316]	; (a20 <_usb_d_cb_trans_done+0x154>)
     8e2:	0142      	lsls	r2, r0, #5
     8e4:	1899      	adds	r1, r3, r2
     8e6:	2000      	movs	r0, #0
     8e8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     8ea:	5cd3      	ldrb	r3, [r2, r3]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d00e      	beq.n	90e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     8f0:	0162      	lsls	r2, r4, #5
     8f2:	4b4b      	ldr	r3, [pc, #300]	; (a20 <_usb_d_cb_trans_done+0x154>)
     8f4:	189b      	adds	r3, r3, r2
     8f6:	2201      	movs	r2, #1
     8f8:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     8fa:	0164      	lsls	r4, r4, #5
     8fc:	4b48      	ldr	r3, [pc, #288]	; (a20 <_usb_d_cb_trans_done+0x154>)
     8fe:	191c      	adds	r4, r3, r4
     900:	78e1      	ldrb	r1, [r4, #3]
     902:	69e3      	ldr	r3, [r4, #28]
     904:	0032      	movs	r2, r6
     906:	0028      	movs	r0, r5
     908:	4798      	blx	r3
}
     90a:	b005      	add	sp, #20
     90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     90e:	788b      	ldrb	r3, [r1, #2]
     910:	2b03      	cmp	r3, #3
     912:	d00c      	beq.n	92e <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     914:	4b42      	ldr	r3, [pc, #264]	; (a20 <_usb_d_cb_trans_done+0x154>)
     916:	0162      	lsls	r2, r4, #5
     918:	320c      	adds	r2, #12
     91a:	189a      	adds	r2, r3, r2
     91c:	0164      	lsls	r4, r4, #5
     91e:	191c      	adds	r4, r3, r4
     920:	7860      	ldrb	r0, [r4, #1]
     922:	2100      	movs	r1, #0
     924:	69e3      	ldr	r3, [r4, #28]
     926:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     928:	2302      	movs	r3, #2
     92a:	70a3      	strb	r3, [r4, #2]
     92c:	e7ed      	b.n	90a <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     92e:	4a3c      	ldr	r2, [pc, #240]	; (a20 <_usb_d_cb_trans_done+0x154>)
     930:	000b      	movs	r3, r1
     932:	250c      	movs	r5, #12
     934:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     936:	0161      	lsls	r1, r4, #5
     938:	310c      	adds	r1, #12
     93a:	1852      	adds	r2, r2, r1
     93c:	7858      	ldrb	r0, [r3, #1]
     93e:	69db      	ldr	r3, [r3, #28]
     940:	2101      	movs	r1, #1
     942:	4798      	blx	r3
		if (err) {
     944:	2800      	cmp	r0, #0
     946:	d017      	beq.n	978 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     948:	0162      	lsls	r2, r4, #5
     94a:	4b35      	ldr	r3, [pc, #212]	; (a20 <_usb_d_cb_trans_done+0x154>)
     94c:	189b      	adds	r3, r3, r2
     94e:	2205      	movs	r2, #5
     950:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     952:	3a03      	subs	r2, #3
     954:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     956:	2d00      	cmp	r5, #0
     958:	db09      	blt.n	96e <_usb_d_cb_trans_done+0xa2>
     95a:	0164      	lsls	r4, r4, #5
     95c:	4b30      	ldr	r3, [pc, #192]	; (a20 <_usb_d_cb_trans_done+0x154>)
     95e:	191c      	adds	r4, r3, r4
     960:	7860      	ldrb	r0, [r4, #1]
     962:	2380      	movs	r3, #128	; 0x80
     964:	4318      	orrs	r0, r3
     966:	2101      	movs	r1, #1
     968:	4b2e      	ldr	r3, [pc, #184]	; (a24 <_usb_d_cb_trans_done+0x158>)
     96a:	4798      	blx	r3
     96c:	e7cd      	b.n	90a <_usb_d_cb_trans_done+0x3e>
     96e:	0164      	lsls	r4, r4, #5
     970:	4b2b      	ldr	r3, [pc, #172]	; (a20 <_usb_d_cb_trans_done+0x154>)
     972:	191c      	adds	r4, r3, r4
     974:	7860      	ldrb	r0, [r4, #1]
     976:	e7f6      	b.n	966 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     978:	0164      	lsls	r4, r4, #5
     97a:	4b29      	ldr	r3, [pc, #164]	; (a20 <_usb_d_cb_trans_done+0x154>)
     97c:	191c      	adds	r4, r3, r4
     97e:	2304      	movs	r3, #4
     980:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     982:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     984:	2200      	movs	r2, #0
     986:	9201      	str	r2, [sp, #4]
     988:	9202      	str	r2, [sp, #8]
     98a:	2d00      	cmp	r5, #0
     98c:	db08      	blt.n	9a0 <_usb_d_cb_trans_done+0xd4>
     98e:	3280      	adds	r2, #128	; 0x80
     990:	4313      	orrs	r3, r2
     992:	a801      	add	r0, sp, #4
     994:	7203      	strb	r3, [r0, #8]
     996:	2301      	movs	r3, #1
     998:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     99a:	4b23      	ldr	r3, [pc, #140]	; (a28 <_usb_d_cb_trans_done+0x15c>)
     99c:	4798      	blx	r3
     99e:	e7b4      	b.n	90a <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     9a0:	220f      	movs	r2, #15
     9a2:	4013      	ands	r3, r2
     9a4:	e7f5      	b.n	992 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     9a6:	2f01      	cmp	r7, #1
     9a8:	d00a      	beq.n	9c0 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     9aa:	2f02      	cmp	r7, #2
     9ac:	d01d      	beq.n	9ea <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     9ae:	2f03      	cmp	r7, #3
     9b0:	d02c      	beq.n	a0c <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     9b2:	0142      	lsls	r2, r0, #5
     9b4:	4b1a      	ldr	r3, [pc, #104]	; (a20 <_usb_d_cb_trans_done+0x154>)
     9b6:	189b      	adds	r3, r3, r2
     9b8:	2206      	movs	r2, #6
     9ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     9bc:	70da      	strb	r2, [r3, #3]
     9be:	e79c      	b.n	8fa <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     9c0:	4b17      	ldr	r3, [pc, #92]	; (a20 <_usb_d_cb_trans_done+0x154>)
     9c2:	0142      	lsls	r2, r0, #5
     9c4:	1899      	adds	r1, r3, r2
     9c6:	2002      	movs	r0, #2
     9c8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9ca:	5cd3      	ldrb	r3, [r2, r3]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d005      	beq.n	9dc <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     9d0:	0162      	lsls	r2, r4, #5
     9d2:	4b13      	ldr	r3, [pc, #76]	; (a20 <_usb_d_cb_trans_done+0x154>)
     9d4:	189b      	adds	r3, r3, r2
     9d6:	2205      	movs	r2, #5
     9d8:	709a      	strb	r2, [r3, #2]
     9da:	e78e      	b.n	8fa <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     9dc:	2202      	movs	r2, #2
     9de:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     9e0:	2100      	movs	r1, #0
     9e2:	0028      	movs	r0, r5
     9e4:	4b0f      	ldr	r3, [pc, #60]	; (a24 <_usb_d_cb_trans_done+0x158>)
     9e6:	4798      	blx	r3
     9e8:	e787      	b.n	8fa <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     9ea:	4b0d      	ldr	r3, [pc, #52]	; (a20 <_usb_d_cb_trans_done+0x154>)
     9ec:	0142      	lsls	r2, r0, #5
     9ee:	1899      	adds	r1, r3, r2
     9f0:	2004      	movs	r0, #4
     9f2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9f4:	5cd3      	ldrb	r3, [r2, r3]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d005      	beq.n	a06 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     9fa:	0162      	lsls	r2, r4, #5
     9fc:	4b08      	ldr	r3, [pc, #32]	; (a20 <_usb_d_cb_trans_done+0x154>)
     9fe:	189b      	adds	r3, r3, r2
     a00:	2201      	movs	r2, #1
     a02:	709a      	strb	r2, [r3, #2]
     a04:	e779      	b.n	8fa <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a06:	2302      	movs	r3, #2
     a08:	708b      	strb	r3, [r1, #2]
			return;
     a0a:	e77e      	b.n	90a <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     a0c:	0142      	lsls	r2, r0, #5
     a0e:	4b04      	ldr	r3, [pc, #16]	; (a20 <_usb_d_cb_trans_done+0x154>)
     a10:	189b      	adds	r3, r3, r2
     a12:	2200      	movs	r2, #0
     a14:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     a16:	3205      	adds	r2, #5
     a18:	70da      	strb	r2, [r3, #3]
     a1a:	e76e      	b.n	8fa <_usb_d_cb_trans_done+0x2e>
     a1c:	0000084d 	.word	0x0000084d
     a20:	20000020 	.word	0x20000020
     a24:	00001749 	.word	0x00001749
     a28:	0000191d 	.word	0x0000191d

00000a2c <usb_d_cb_trans_setup>:
{
     a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2e:	46c6      	mov	lr, r8
     a30:	b500      	push	{lr}
     a32:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     a34:	4b1d      	ldr	r3, [pc, #116]	; (aac <usb_d_cb_trans_setup+0x80>)
     a36:	4798      	blx	r3
     a38:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     a3a:	0145      	lsls	r5, r0, #5
     a3c:	350c      	adds	r5, #12
     a3e:	4b1c      	ldr	r3, [pc, #112]	; (ab0 <usb_d_cb_trans_setup+0x84>)
     a40:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     a42:	0029      	movs	r1, r5
     a44:	0020      	movs	r0, r4
     a46:	4b1b      	ldr	r3, [pc, #108]	; (ab4 <usb_d_cb_trans_setup+0x88>)
     a48:	4798      	blx	r3
	if (n != 8) {
     a4a:	b2c0      	uxtb	r0, r0
     a4c:	2808      	cmp	r0, #8
     a4e:	d00a      	beq.n	a66 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     a50:	2101      	movs	r1, #1
     a52:	0020      	movs	r0, r4
     a54:	4d18      	ldr	r5, [pc, #96]	; (ab8 <usb_d_cb_trans_setup+0x8c>)
     a56:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     a58:	2080      	movs	r0, #128	; 0x80
     a5a:	4320      	orrs	r0, r4
     a5c:	2101      	movs	r1, #1
     a5e:	47a8      	blx	r5
}
     a60:	bc04      	pop	{r2}
     a62:	4690      	mov	r8, r2
     a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a66:	2100      	movs	r1, #0
     a68:	0020      	movs	r0, r4
     a6a:	4b13      	ldr	r3, [pc, #76]	; (ab8 <usb_d_cb_trans_setup+0x8c>)
     a6c:	4698      	mov	r8, r3
     a6e:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     a70:	2780      	movs	r7, #128	; 0x80
     a72:	4327      	orrs	r7, r4
     a74:	2100      	movs	r1, #0
     a76:	0038      	movs	r0, r7
     a78:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     a7a:	0172      	lsls	r2, r6, #5
     a7c:	4b0c      	ldr	r3, [pc, #48]	; (ab0 <usb_d_cb_trans_setup+0x84>)
     a7e:	189b      	adds	r3, r3, r2
     a80:	2201      	movs	r2, #1
     a82:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     a84:	695b      	ldr	r3, [r3, #20]
     a86:	0029      	movs	r1, r5
     a88:	0020      	movs	r0, r4
     a8a:	4798      	blx	r3
     a8c:	2800      	cmp	r0, #0
     a8e:	d1e7      	bne.n	a60 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     a90:	0176      	lsls	r6, r6, #5
     a92:	4b07      	ldr	r3, [pc, #28]	; (ab0 <usb_d_cb_trans_setup+0x84>)
     a94:	199e      	adds	r6, r3, r6
     a96:	2305      	movs	r3, #5
     a98:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     a9a:	2101      	movs	r1, #1
     a9c:	0020      	movs	r0, r4
     a9e:	4c06      	ldr	r4, [pc, #24]	; (ab8 <usb_d_cb_trans_setup+0x8c>)
     aa0:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     aa2:	2101      	movs	r1, #1
     aa4:	0038      	movs	r0, r7
     aa6:	47a0      	blx	r4
     aa8:	e7da      	b.n	a60 <usb_d_cb_trans_setup+0x34>
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	0000084d 	.word	0x0000084d
     ab0:	20000020 	.word	0x20000020
     ab4:	000018ad 	.word	0x000018ad
     ab8:	00001749 	.word	0x00001749

00000abc <usb_d_init>:

int32_t usb_d_init(void)
{
     abc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     abe:	4b10      	ldr	r3, [pc, #64]	; (b00 <usb_d_init+0x44>)
     ac0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     ac2:	2800      	cmp	r0, #0
     ac4:	db1b      	blt.n	afe <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     ac6:	4c0f      	ldr	r4, [pc, #60]	; (b04 <usb_d_init+0x48>)
     ac8:	2280      	movs	r2, #128	; 0x80
     aca:	2100      	movs	r1, #0
     acc:	0020      	movs	r0, r4
     ace:	4b0e      	ldr	r3, [pc, #56]	; (b08 <usb_d_init+0x4c>)
     ad0:	4798      	blx	r3
     ad2:	0023      	movs	r3, r4
     ad4:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     ad6:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     ad8:	4a0c      	ldr	r2, [pc, #48]	; (b0c <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     ada:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     adc:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     ade:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     ae0:	61da      	str	r2, [r3, #28]
     ae2:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     ae4:	42a3      	cmp	r3, r4
     ae6:	d1f8      	bne.n	ada <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     ae8:	4909      	ldr	r1, [pc, #36]	; (b10 <usb_d_init+0x54>)
     aea:	2000      	movs	r0, #0
     aec:	4c09      	ldr	r4, [pc, #36]	; (b14 <usb_d_init+0x58>)
     aee:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     af0:	4909      	ldr	r1, [pc, #36]	; (b18 <usb_d_init+0x5c>)
     af2:	2001      	movs	r0, #1
     af4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     af6:	4909      	ldr	r1, [pc, #36]	; (b1c <usb_d_init+0x60>)
     af8:	2002      	movs	r0, #2
     afa:	47a0      	blx	r4
	return ERR_NONE;
     afc:	2000      	movs	r0, #0
}
     afe:	bd10      	pop	{r4, pc}
     b00:	00001689 	.word	0x00001689
     b04:	20000020 	.word	0x20000020
     b08:	00001e4b 	.word	0x00001e4b
     b0c:	00000891 	.word	0x00000891
     b10:	00000a2d 	.word	0x00000a2d
     b14:	00001b31 	.word	0x00001b31
     b18:	00000895 	.word	0x00000895
     b1c:	000008cd 	.word	0x000008cd

00000b20 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     b20:	2800      	cmp	r0, #0
     b22:	d100      	bne.n	b26 <assert+0x6>
		__asm("BKPT #0");
     b24:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     b26:	4770      	bx	lr

00000b28 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     b28:	4b01      	ldr	r3, [pc, #4]	; (b30 <_get_cycles_for_ms+0x8>)
     b2a:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     b2c:	4770      	bx	lr
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	0000bb80 	.word	0x0000bb80

00000b34 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     b34:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     b36:	4b06      	ldr	r3, [pc, #24]	; (b50 <_init_chip+0x1c>)
     b38:	685a      	ldr	r2, [r3, #4]
     b3a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     b3c:	4b05      	ldr	r3, [pc, #20]	; (b54 <_init_chip+0x20>)
     b3e:	4798      	blx	r3
	_sysctrl_init_sources();
     b40:	4b05      	ldr	r3, [pc, #20]	; (b58 <_init_chip+0x24>)
     b42:	4798      	blx	r3
	_gclk_init_generators();
     b44:	4b05      	ldr	r3, [pc, #20]	; (b5c <_init_chip+0x28>)
     b46:	4798      	blx	r3
	_sysctrl_init_referenced_generators();
     b48:	4b05      	ldr	r3, [pc, #20]	; (b60 <_init_chip+0x2c>)
     b4a:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     b4c:	bd10      	pop	{r4, pc}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	41004000 	.word	0x41004000
     b54:	00000b99 	.word	0x00000b99
     b58:	00000ee9 	.word	0x00000ee9
     b5c:	00000b65 	.word	0x00000b65
     b60:	00000f31 	.word	0x00000f31

00000b64 <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     b64:	4b07      	ldr	r3, [pc, #28]	; (b84 <_gclk_init_generators+0x20>)
     b66:	2280      	movs	r2, #128	; 0x80
     b68:	0052      	lsls	r2, r2, #1
     b6a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b6c:	4a06      	ldr	r2, [pc, #24]	; (b88 <_gclk_init_generators+0x24>)
     b6e:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     b70:	4a06      	ldr	r2, [pc, #24]	; (b8c <_gclk_init_generators+0x28>)
     b72:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b74:	4a06      	ldr	r2, [pc, #24]	; (b90 <_gclk_init_generators+0x2c>)
     b76:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     b78:	2281      	movs	r2, #129	; 0x81
     b7a:	0052      	lsls	r2, r2, #1
     b7c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b7e:	4a05      	ldr	r2, [pc, #20]	; (b94 <_gclk_init_generators+0x30>)
     b80:	605a      	str	r2, [r3, #4]
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SRC
	                               | GCLK_GENCTRL_ID(8));
#endif
}
     b82:	4770      	bx	lr
     b84:	40000c00 	.word	0x40000c00
     b88:	00010700 	.word	0x00010700
     b8c:	00002001 	.word	0x00002001
     b90:	00010601 	.word	0x00010601
     b94:	00010602 	.word	0x00010602

00000b98 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     b98:	4b06      	ldr	r3, [pc, #24]	; (bb4 <_pm_init+0x1c>)
     b9a:	7a1a      	ldrb	r2, [r3, #8]
     b9c:	b2d2      	uxtb	r2, r2
     b9e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     ba0:	7a5a      	ldrb	r2, [r3, #9]
     ba2:	b2d2      	uxtb	r2, r2
     ba4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     ba6:	7a9a      	ldrb	r2, [r3, #10]
     ba8:	b2d2      	uxtb	r2, r2
     baa:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     bac:	7ada      	ldrb	r2, [r3, #11]
     bae:	b2d2      	uxtb	r2, r2
     bb0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     bb2:	4770      	bx	lr
     bb4:	40000400 	.word	0x40000400

00000bb8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     bb8:	b510      	push	{r4, lr}
     bba:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     bbc:	4b19      	ldr	r3, [pc, #100]	; (c24 <_usart_init+0x6c>)
     bbe:	18c3      	adds	r3, r0, r3
     bc0:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     bc2:	b2db      	uxtb	r3, r3
     bc4:	2b02      	cmp	r3, #2
     bc6:	d005      	beq.n	bd4 <_usart_init+0x1c>
	ASSERT(false);
     bc8:	2291      	movs	r2, #145	; 0x91
     bca:	0092      	lsls	r2, r2, #2
     bcc:	4916      	ldr	r1, [pc, #88]	; (c28 <_usart_init+0x70>)
     bce:	2000      	movs	r0, #0
     bd0:	4b16      	ldr	r3, [pc, #88]	; (c2c <_usart_init+0x74>)
     bd2:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bd4:	2201      	movs	r2, #1
     bd6:	69e3      	ldr	r3, [r4, #28]
     bd8:	421a      	tst	r2, r3
     bda:	d1fc      	bne.n	bd6 <_usart_init+0x1e>
     bdc:	2203      	movs	r2, #3
     bde:	69e3      	ldr	r3, [r4, #28]
     be0:	421a      	tst	r2, r3
     be2:	d1fc      	bne.n	bde <_usart_init+0x26>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     be4:	6823      	ldr	r3, [r4, #0]
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
     be6:	079b      	lsls	r3, r3, #30
     be8:	d418      	bmi.n	c1c <_usart_init+0x64>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bea:	2201      	movs	r2, #1
     bec:	69e3      	ldr	r3, [r4, #28]
     bee:	421a      	tst	r2, r3
     bf0:	d1fc      	bne.n	bec <_usart_init+0x34>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
     bf2:	6823      	ldr	r3, [r4, #0]
     bf4:	2201      	movs	r2, #1
     bf6:	4313      	orrs	r3, r2
     bf8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bfa:	69e3      	ldr	r3, [r4, #28]
     bfc:	421a      	tst	r2, r3
     bfe:	d1fc      	bne.n	bfa <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c00:	4b0b      	ldr	r3, [pc, #44]	; (c30 <_usart_init+0x78>)
     c02:	6023      	str	r3, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     c04:	23c0      	movs	r3, #192	; 0xc0
     c06:	029b      	lsls	r3, r3, #10
     c08:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
     c0a:	23d2      	movs	r3, #210	; 0xd2
     c0c:	425b      	negs	r3, r3
     c0e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     c10:	2300      	movs	r3, #0
     c12:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     c14:	2230      	movs	r2, #48	; 0x30
     c16:	54a3      	strb	r3, [r4, r2]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
     c18:	2000      	movs	r0, #0
}
     c1a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     c1c:	2011      	movs	r0, #17
     c1e:	4240      	negs	r0, r0
     c20:	e7fb      	b.n	c1a <_usart_init+0x62>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	bdfff800 	.word	0xbdfff800
     c28:	00001ec0 	.word	0x00001ec0
     c2c:	00000b21 	.word	0x00000b21
     c30:	40310004 	.word	0x40310004

00000c34 <_usart_sync_init>:
{
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	0005      	movs	r5, r0
     c38:	000c      	movs	r4, r1
	ASSERT(device);
     c3a:	1e43      	subs	r3, r0, #1
     c3c:	4198      	sbcs	r0, r3
     c3e:	b2c0      	uxtb	r0, r0
     c40:	22bf      	movs	r2, #191	; 0xbf
     c42:	4904      	ldr	r1, [pc, #16]	; (c54 <_usart_sync_init+0x20>)
     c44:	4b04      	ldr	r3, [pc, #16]	; (c58 <_usart_sync_init+0x24>)
     c46:	4798      	blx	r3
	device->hw = hw;
     c48:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     c4a:	0020      	movs	r0, r4
     c4c:	4b03      	ldr	r3, [pc, #12]	; (c5c <_usart_sync_init+0x28>)
     c4e:	4798      	blx	r3
}
     c50:	bd70      	pop	{r4, r5, r6, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00001ec0 	.word	0x00001ec0
     c58:	00000b21 	.word	0x00000b21
     c5c:	00000bb9 	.word	0x00000bb9

00000c60 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     c60:	6803      	ldr	r3, [r0, #0]
     c62:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     c64:	8519      	strh	r1, [r3, #40]	; 0x28
}
     c66:	4770      	bx	lr

00000c68 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     c68:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     c6a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     c6c:	b2c0      	uxtb	r0, r0
}
     c6e:	4770      	bx	lr

00000c70 <_usart_sync_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     c70:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c72:	7e18      	ldrb	r0, [r3, #24]
     c74:	2301      	movs	r3, #1
     c76:	4018      	ands	r0, r3
}
     c78:	4770      	bx	lr

00000c7a <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c7a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     c7c:	7e18      	ldrb	r0, [r3, #24]
     c7e:	0740      	lsls	r0, r0, #29
     c80:	0fc0      	lsrs	r0, r0, #31
}
     c82:	4770      	bx	lr

00000c84 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     c84:	b570      	push	{r4, r5, r6, lr}
     c86:	0006      	movs	r6, r0
     c88:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     c8a:	4b49      	ldr	r3, [pc, #292]	; (db0 <_spi_m_sync_init+0x12c>)
     c8c:	18cb      	adds	r3, r1, r3
     c8e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     c90:	b2db      	uxtb	r3, r3
     c92:	2b01      	cmp	r3, #1
     c94:	d008      	beq.n	ca8 <_spi_m_sync_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     c96:	2800      	cmp	r0, #0
     c98:	d100      	bne.n	c9c <_spi_m_sync_init+0x18>
     c9a:	e079      	b.n	d90 <_spi_m_sync_init+0x10c>
     c9c:	2900      	cmp	r1, #0
     c9e:	d000      	beq.n	ca2 <_spi_m_sync_init+0x1e>
     ca0:	e07e      	b.n	da0 <_spi_m_sync_init+0x11c>
	return NULL;
     ca2:	2500      	movs	r5, #0
	ASSERT(dev && hw);
     ca4:	2000      	movs	r0, #0
     ca6:	e006      	b.n	cb6 <_spi_m_sync_init+0x32>
     ca8:	2800      	cmp	r0, #0
     caa:	d04d      	beq.n	d48 <_spi_m_sync_init+0xc4>
     cac:	2900      	cmp	r1, #0
     cae:	d048      	beq.n	d42 <_spi_m_sync_init+0xbe>
			return &sercomspi_regs[i];
     cb0:	4d40      	ldr	r5, [pc, #256]	; (db4 <_spi_m_sync_init+0x130>)
     cb2:	3518      	adds	r5, #24
	ASSERT(dev && hw);
     cb4:	2001      	movs	r0, #1
     cb6:	4a40      	ldr	r2, [pc, #256]	; (db8 <_spi_m_sync_init+0x134>)
     cb8:	4940      	ldr	r1, [pc, #256]	; (dbc <_spi_m_sync_init+0x138>)
     cba:	4b41      	ldr	r3, [pc, #260]	; (dc0 <_spi_m_sync_init+0x13c>)
     cbc:	4798      	blx	r3

	if (regs == NULL) {
     cbe:	2d00      	cmp	r5, #0
     cc0:	d060      	beq.n	d84 <_spi_m_sync_init+0x100>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     cc2:	2201      	movs	r2, #1
     cc4:	69e3      	ldr	r3, [r4, #28]
     cc6:	421a      	tst	r2, r3
     cc8:	d1fc      	bne.n	cc4 <_spi_m_sync_init+0x40>
     cca:	2203      	movs	r2, #3
     ccc:	69e3      	ldr	r3, [r4, #28]
     cce:	421a      	tst	r2, r3
     cd0:	d1fc      	bne.n	ccc <_spi_m_sync_init+0x48>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     cd2:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     cd4:	079b      	lsls	r3, r3, #30
     cd6:	d458      	bmi.n	d8a <_spi_m_sync_init+0x106>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     cd8:	2201      	movs	r2, #1
     cda:	69e3      	ldr	r3, [r4, #28]
     cdc:	421a      	tst	r2, r3
     cde:	d1fc      	bne.n	cda <_spi_m_sync_init+0x56>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
     ce0:	6823      	ldr	r3, [r4, #0]
     ce2:	2201      	movs	r2, #1
     ce4:	4313      	orrs	r3, r2
     ce6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ce8:	69e3      	ldr	r3, [r4, #28]
     cea:	421a      	tst	r2, r3
     cec:	d1fc      	bne.n	ce8 <_spi_m_sync_init+0x64>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
     cee:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     cf0:	231c      	movs	r3, #28
     cf2:	682a      	ldr	r2, [r5, #0]
     cf4:	4013      	ands	r3, r2
     cf6:	2b08      	cmp	r3, #8
     cf8:	d029      	beq.n	d4e <_spi_m_sync_init+0xca>
	ASSERT(hw && regs);
     cfa:	0020      	movs	r0, r4
     cfc:	1e43      	subs	r3, r0, #1
     cfe:	4198      	sbcs	r0, r3
     d00:	b2c0      	uxtb	r0, r0
     d02:	228e      	movs	r2, #142	; 0x8e
     d04:	0112      	lsls	r2, r2, #4
     d06:	492d      	ldr	r1, [pc, #180]	; (dbc <_spi_m_sync_init+0x138>)
     d08:	4b2d      	ldr	r3, [pc, #180]	; (dc0 <_spi_m_sync_init+0x13c>)
     d0a:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
     d0c:	4b2d      	ldr	r3, [pc, #180]	; (dc4 <_spi_m_sync_init+0x140>)
     d0e:	682a      	ldr	r2, [r5, #0]
     d10:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     d12:	6023      	str	r3, [r4, #0]
	        | (SERCOM_SPI_CTRLB_RXEN));
     d14:	4a2c      	ldr	r2, [pc, #176]	; (dc8 <_spi_m_sync_init+0x144>)
     d16:	686b      	ldr	r3, [r5, #4]
     d18:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(
     d1a:	2380      	movs	r3, #128	; 0x80
     d1c:	029b      	lsls	r3, r3, #10
     d1e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     d20:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
     d22:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
     d24:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     d26:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     d28:	2330      	movs	r3, #48	; 0x30
     d2a:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     d2c:	2307      	movs	r3, #7
     d2e:	686a      	ldr	r2, [r5, #4]
     d30:	4013      	ands	r3, r2
     d32:	1e5a      	subs	r2, r3, #1
     d34:	4193      	sbcs	r3, r2
     d36:	3301      	adds	r3, #1
     d38:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
     d3a:	89eb      	ldrh	r3, [r5, #14]
     d3c:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
     d3e:	2000      	movs	r0, #0
}
     d40:	bd70      	pop	{r4, r5, r6, pc}
			return &sercomspi_regs[i];
     d42:	4d1c      	ldr	r5, [pc, #112]	; (db4 <_spi_m_sync_init+0x130>)
     d44:	3518      	adds	r5, #24
     d46:	e7ad      	b.n	ca4 <_spi_m_sync_init+0x20>
     d48:	4d1a      	ldr	r5, [pc, #104]	; (db4 <_spi_m_sync_init+0x130>)
     d4a:	3518      	adds	r5, #24
     d4c:	e7aa      	b.n	ca4 <_spi_m_sync_init+0x20>
	ASSERT(hw && regs);
     d4e:	0020      	movs	r0, r4
     d50:	1e43      	subs	r3, r0, #1
     d52:	4198      	sbcs	r0, r3
     d54:	b2c0      	uxtb	r0, r0
     d56:	4a1d      	ldr	r2, [pc, #116]	; (dcc <_spi_m_sync_init+0x148>)
     d58:	4918      	ldr	r1, [pc, #96]	; (dbc <_spi_m_sync_init+0x138>)
     d5a:	4b19      	ldr	r3, [pc, #100]	; (dc0 <_spi_m_sync_init+0x13c>)
     d5c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
     d5e:	4b19      	ldr	r3, [pc, #100]	; (dc4 <_spi_m_sync_init+0x140>)
     d60:	682a      	ldr	r2, [r5, #0]
     d62:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     d64:	6023      	str	r3, [r4, #0]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     d66:	4a1a      	ldr	r2, [pc, #104]	; (dd0 <_spi_m_sync_init+0x14c>)
     d68:	686b      	ldr	r3, [r5, #4]
     d6a:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(hw,
     d6c:	4b19      	ldr	r3, [pc, #100]	; (dd4 <_spi_m_sync_init+0x150>)
     d6e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     d70:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
     d72:	68ab      	ldr	r3, [r5, #8]
     d74:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     d76:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     d78:	2330      	movs	r3, #48	; 0x30
     d7a:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     d7c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
     d7e:	2b00      	cmp	r3, #0
     d80:	d1fc      	bne.n	d7c <_spi_m_sync_init+0xf8>
     d82:	e7d3      	b.n	d2c <_spi_m_sync_init+0xa8>
		return ERR_INVALID_ARG;
     d84:	200d      	movs	r0, #13
     d86:	4240      	negs	r0, r0
     d88:	e7da      	b.n	d40 <_spi_m_sync_init+0xbc>
		return ERR_DENIED;
     d8a:	2011      	movs	r0, #17
     d8c:	4240      	negs	r0, r0
     d8e:	e7d7      	b.n	d40 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
     d90:	4a09      	ldr	r2, [pc, #36]	; (db8 <_spi_m_sync_init+0x134>)
     d92:	490a      	ldr	r1, [pc, #40]	; (dbc <_spi_m_sync_init+0x138>)
     d94:	2000      	movs	r0, #0
     d96:	4b0a      	ldr	r3, [pc, #40]	; (dc0 <_spi_m_sync_init+0x13c>)
     d98:	4798      	blx	r3
		return ERR_INVALID_ARG;
     d9a:	200d      	movs	r0, #13
     d9c:	4240      	negs	r0, r0
     d9e:	e7cf      	b.n	d40 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
     da0:	4a05      	ldr	r2, [pc, #20]	; (db8 <_spi_m_sync_init+0x134>)
     da2:	4906      	ldr	r1, [pc, #24]	; (dbc <_spi_m_sync_init+0x138>)
     da4:	2001      	movs	r0, #1
     da6:	4b06      	ldr	r3, [pc, #24]	; (dc0 <_spi_m_sync_init+0x13c>)
     da8:	4798      	blx	r3
		return ERR_INVALID_ARG;
     daa:	200d      	movs	r0, #13
     dac:	4240      	negs	r0, r0
     dae:	e7c7      	b.n	d40 <_spi_m_sync_init+0xbc>
     db0:	bdfff800 	.word	0xbdfff800
     db4:	00001e94 	.word	0x00001e94
     db8:	00000916 	.word	0x00000916
     dbc:	00001ec0 	.word	0x00001ec0
     dc0:	00000b21 	.word	0x00000b21
     dc4:	fffffefc 	.word	0xfffffefc
     dc8:	fffd1dbf 	.word	0xfffd1dbf
     dcc:	000008f4 	.word	0x000008f4
     dd0:	fffdddbf 	.word	0xfffdddbf
     dd4:	00020240 	.word	0x00020240

00000dd8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dda:	46de      	mov	lr, fp
     ddc:	4657      	mov	r7, sl
     dde:	464e      	mov	r6, r9
     de0:	4645      	mov	r5, r8
     de2:	b5e0      	push	{r5, r6, r7, lr}
     de4:	b083      	sub	sp, #12
     de6:	4681      	mov	r9, r0
     de8:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
     dea:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     dec:	680b      	ldr	r3, [r1, #0]
     dee:	4698      	mov	r8, r3
     df0:	684d      	ldr	r5, [r1, #4]
     df2:	7903      	ldrb	r3, [r0, #4]
     df4:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
     df6:	2800      	cmp	r0, #0
     df8:	d015      	beq.n	e26 <_spi_m_sync_trans+0x4e>
     dfa:	0020      	movs	r0, r4
     dfc:	1e43      	subs	r3, r0, #1
     dfe:	4198      	sbcs	r0, r3
     e00:	b2c0      	uxtb	r0, r0
     e02:	4a36      	ldr	r2, [pc, #216]	; (edc <_spi_m_sync_trans+0x104>)
     e04:	4936      	ldr	r1, [pc, #216]	; (ee0 <_spi_m_sync_trans+0x108>)
     e06:	4b37      	ldr	r3, [pc, #220]	; (ee4 <_spi_m_sync_trans+0x10c>)
     e08:	4798      	blx	r3
     e0a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     e0c:	075b      	lsls	r3, r3, #29
     e0e:	d13f      	bne.n	e90 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     e10:	2303      	movs	r3, #3
     e12:	69e0      	ldr	r0, [r4, #28]
     e14:	4018      	ands	r0, r3
     e16:	d1fc      	bne.n	e12 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     e18:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     e1a:	079b      	lsls	r3, r3, #30
     e1c:	d53b      	bpl.n	e96 <_spi_m_sync_trans+0xbe>
     e1e:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     e20:	2301      	movs	r3, #1
     e22:	469c      	mov	ip, r3
     e24:	e009      	b.n	e3a <_spi_m_sync_trans+0x62>
     e26:	2000      	movs	r0, #0
     e28:	e7eb      	b.n	e02 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
     e2a:	3501      	adds	r5, #1
	ctrl->rxcnt++;
     e2c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     e2e:	b25b      	sxtb	r3, r3
     e30:	2b00      	cmp	r3, #0
     e32:	db16      	blt.n	e62 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     e34:	68b3      	ldr	r3, [r6, #8]
     e36:	4283      	cmp	r3, r0
     e38:	d927      	bls.n	e8a <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     e3a:	7e23      	ldrb	r3, [r4, #24]
     e3c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     e3e:	2104      	movs	r1, #4
     e40:	4219      	tst	r1, r3
     e42:	d02b      	beq.n	e9c <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
     e44:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     e46:	2d00      	cmp	r5, #0
     e48:	d0f0      	beq.n	e2c <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
     e4a:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
     e4c:	9901      	ldr	r1, [sp, #4]
     e4e:	2901      	cmp	r1, #1
     e50:	d9eb      	bls.n	e2a <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     e52:	0a3f      	lsrs	r7, r7, #8
     e54:	706f      	strb	r7, [r5, #1]
     e56:	3502      	adds	r5, #2
     e58:	e7e8      	b.n	e2c <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
     e5a:	2101      	movs	r1, #1
     e5c:	468b      	mov	fp, r1
     e5e:	44d8      	add	r8, fp
     e60:	e037      	b.n	ed2 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     e62:	2301      	movs	r3, #1
     e64:	425b      	negs	r3, r3
     e66:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     e68:	3381      	adds	r3, #129	; 0x81
     e6a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
     e6c:	2013      	movs	r0, #19
     e6e:	4240      	negs	r0, r0
	tmp &= mask;
     e70:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     e72:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     e74:	4213      	tst	r3, r2
     e76:	d0fc      	beq.n	e72 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     e78:	2303      	movs	r3, #3
     e7a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     e7c:	b003      	add	sp, #12
     e7e:	bc3c      	pop	{r2, r3, r4, r5}
     e80:	4690      	mov	r8, r2
     e82:	4699      	mov	r9, r3
     e84:	46a2      	mov	sl, r4
     e86:	46ab      	mov	fp, r5
     e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     e8a:	4293      	cmp	r3, r2
     e8c:	d8d5      	bhi.n	e3a <_spi_m_sync_trans+0x62>
     e8e:	e7ef      	b.n	e70 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
     e90:	2004      	movs	r0, #4
     e92:	4240      	negs	r0, r0
     e94:	e7f2      	b.n	e7c <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
     e96:	2014      	movs	r0, #20
     e98:	4240      	negs	r0, r0
     e9a:	e7ef      	b.n	e7c <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     e9c:	4290      	cmp	r0, r2
     e9e:	d8c6      	bhi.n	e2e <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     ea0:	4667      	mov	r7, ip
     ea2:	421f      	tst	r7, r3
     ea4:	d0c3      	beq.n	e2e <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     ea6:	464f      	mov	r7, r9
     ea8:	88ff      	ldrh	r7, [r7, #6]
     eaa:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
     eac:	4647      	mov	r7, r8
     eae:	2f00      	cmp	r7, #0
     eb0:	d00f      	beq.n	ed2 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
     eb2:	783f      	ldrb	r7, [r7, #0]
     eb4:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
     eb6:	9901      	ldr	r1, [sp, #4]
     eb8:	2901      	cmp	r1, #1
     eba:	d9ce      	bls.n	e5a <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
     ebc:	4647      	mov	r7, r8
     ebe:	787f      	ldrb	r7, [r7, #1]
     ec0:	023f      	lsls	r7, r7, #8
     ec2:	46bb      	mov	fp, r7
     ec4:	4657      	mov	r7, sl
     ec6:	4659      	mov	r1, fp
     ec8:	430f      	orrs	r7, r1
     eca:	46ba      	mov	sl, r7
			ctrl->txbuf++;
     ecc:	2102      	movs	r1, #2
     ece:	468b      	mov	fp, r1
     ed0:	44d8      	add	r8, fp
	ctrl->txcnt++;
     ed2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     ed4:	4657      	mov	r7, sl
     ed6:	62a7      	str	r7, [r4, #40]	; 0x28
     ed8:	e7a9      	b.n	e2e <_spi_m_sync_trans+0x56>
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00000a72 	.word	0x00000a72
     ee0:	00001ec0 	.word	0x00001ec0
     ee4:	00000b21 	.word	0x00000b21

00000ee8 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
     ee8:	b510      	push	{r4, lr}
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     eea:	4b0e      	ldr	r3, [pc, #56]	; (f24 <_sysctrl_init_sources+0x3c>)
     eec:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     eee:	6a18      	ldr	r0, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     ef0:	490d      	ldr	r1, [pc, #52]	; (f28 <_sysctrl_init_sources+0x40>)
     ef2:	4011      	ands	r1, r2
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     ef4:	0f80      	lsrs	r0, r0, #30
     ef6:	0780      	lsls	r0, r0, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     ef8:	4c0c      	ldr	r4, [pc, #48]	; (f2c <_sysctrl_init_sources+0x44>)
     efa:	4320      	orrs	r0, r4
     efc:	4301      	orrs	r1, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     efe:	6219      	str	r1, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f00:	6999      	ldr	r1, [r3, #24]
     f02:	2002      	movs	r0, #2
     f04:	4301      	orrs	r1, r0
     f06:	6199      	str	r1, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
     f08:	02d2      	lsls	r2, r2, #11
     f0a:	0ed2      	lsrs	r2, r2, #27
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     f0c:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     f0e:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     f10:	2208      	movs	r2, #8
     f12:	68cb      	ldr	r3, [r1, #12]
     f14:	421a      	tst	r2, r3
     f16:	d0fc      	beq.n	f12 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     f18:	4a02      	ldr	r2, [pc, #8]	; (f24 <_sysctrl_init_sources+0x3c>)
     f1a:	6a13      	ldr	r3, [r2, #32]
     f1c:	2180      	movs	r1, #128	; 0x80
     f1e:	430b      	orrs	r3, r1
     f20:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     f22:	bd10      	pop	{r4, pc}
     f24:	40000800 	.word	0x40000800
     f28:	0fff0000 	.word	0x0fff0000
     f2c:	00000302 	.word	0x00000302

00000f30 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     f30:	2202      	movs	r2, #2
     f32:	4b1c      	ldr	r3, [pc, #112]	; (fa4 <_sysctrl_init_referenced_generators+0x74>)
     f34:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     f36:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     f38:	320e      	adds	r2, #14
     f3a:	68cb      	ldr	r3, [r1, #12]
     f3c:	421a      	tst	r2, r3
     f3e:	d0fc      	beq.n	f3a <_sysctrl_init_referenced_generators+0xa>
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     f40:	4a19      	ldr	r2, [pc, #100]	; (fa8 <_sysctrl_init_referenced_generators+0x78>)
     f42:	4b18      	ldr	r3, [pc, #96]	; (fa4 <_sysctrl_init_referenced_generators+0x74>)
     f44:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     f46:	4b19      	ldr	r3, [pc, #100]	; (fac <_sysctrl_init_referenced_generators+0x7c>)
     f48:	681b      	ldr	r3, [r3, #0]
     f4a:	0e9b      	lsrs	r3, r3, #26
     f4c:	2b3f      	cmp	r3, #63	; 0x3f
     f4e:	d01f      	beq.n	f90 <_sysctrl_init_referenced_generators+0x60>
     f50:	029b      	lsls	r3, r3, #10
     f52:	2280      	movs	r2, #128	; 0x80
     f54:	0092      	lsls	r2, r2, #2
     f56:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     f58:	4a12      	ldr	r2, [pc, #72]	; (fa4 <_sysctrl_init_referenced_generators+0x74>)
     f5a:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     f5c:	2302      	movs	r3, #2
     f5e:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     f60:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     f62:	075b      	lsls	r3, r3, #29
     f64:	d517      	bpl.n	f96 <_sysctrl_init_referenced_generators+0x66>
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     f66:	0011      	movs	r1, r2
	tmp &= mask;
     f68:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     f6a:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     f6c:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     f6e:	2bd0      	cmp	r3, #208	; 0xd0
     f70:	d1fb      	bne.n	f6a <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     f72:	4a0c      	ldr	r2, [pc, #48]	; (fa4 <_sysctrl_init_referenced_generators+0x74>)
     f74:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     f76:	2180      	movs	r1, #128	; 0x80
     f78:	430b      	orrs	r3, r1
     f7a:	8493      	strh	r3, [r2, #36]	; 0x24
	return ((Gclk *)hw)->GENDIV.reg;
}

static inline bool hri_gclk_get_STATUS_SYNCBUSY_bit(const void *const hw)
{
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     f7c:	4a0c      	ldr	r2, [pc, #48]	; (fb0 <_sysctrl_init_referenced_generators+0x80>)
     f7e:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     f80:	09db      	lsrs	r3, r3, #7
     f82:	d1fc      	bne.n	f7e <_sysctrl_init_referenced_generators+0x4e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     f84:	4a07      	ldr	r2, [pc, #28]	; (fa4 <_sysctrl_init_referenced_generators+0x74>)
     f86:	6993      	ldr	r3, [r2, #24]
     f88:	2102      	movs	r1, #2
     f8a:	438b      	bics	r3, r1
     f8c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     f8e:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     f90:	23fc      	movs	r3, #252	; 0xfc
     f92:	01db      	lsls	r3, r3, #7
     f94:	e7e0      	b.n	f58 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     f96:	4903      	ldr	r1, [pc, #12]	; (fa4 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     f98:	2210      	movs	r2, #16
     f9a:	68cb      	ldr	r3, [r1, #12]
     f9c:	421a      	tst	r2, r3
     f9e:	d0fc      	beq.n	f9a <_sysctrl_init_referenced_generators+0x6a>
     fa0:	e7e7      	b.n	f72 <_sysctrl_init_referenced_generators+0x42>
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	40000800 	.word	0x40000800
     fa8:	04010000 	.word	0x04010000
     fac:	00806024 	.word	0x00806024
     fb0:	40000c00 	.word	0x40000c00

00000fb4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     fb4:	4b02      	ldr	r3, [pc, #8]	; (fc0 <_delay_init+0xc>)
     fb6:	4a03      	ldr	r2, [pc, #12]	; (fc4 <_delay_init+0x10>)
     fb8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     fba:	2205      	movs	r2, #5
     fbc:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     fbe:	4770      	bx	lr
     fc0:	e000e010 	.word	0xe000e010
     fc4:	00ffffff 	.word	0x00ffffff

00000fc8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     fc8:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     fca:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     fcc:	1e5e      	subs	r6, r3, #1
     fce:	b2f6      	uxtb	r6, r6
     fd0:	2b00      	cmp	r3, #0
     fd2:	d013      	beq.n	ffc <_delay_cycles+0x34>
     fd4:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     fd6:	4a0e      	ldr	r2, [pc, #56]	; (1010 <_delay_cycles+0x48>)
     fd8:	4d0e      	ldr	r5, [pc, #56]	; (1014 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     fda:	2080      	movs	r0, #128	; 0x80
     fdc:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     fde:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     fe0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     fe2:	6813      	ldr	r3, [r2, #0]
     fe4:	4203      	tst	r3, r0
     fe6:	d0fc      	beq.n	fe2 <_delay_cycles+0x1a>
	while (n--) {
     fe8:	3c01      	subs	r4, #1
     fea:	b2e4      	uxtb	r4, r4
     fec:	2cff      	cmp	r4, #255	; 0xff
     fee:	d1f6      	bne.n	fde <_delay_cycles+0x16>
     ff0:	0633      	lsls	r3, r6, #24
     ff2:	1af6      	subs	r6, r6, r3
     ff4:	4b08      	ldr	r3, [pc, #32]	; (1018 <_delay_cycles+0x50>)
     ff6:	469c      	mov	ip, r3
     ff8:	4461      	add	r1, ip
     ffa:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     ffc:	4b04      	ldr	r3, [pc, #16]	; (1010 <_delay_cycles+0x48>)
     ffe:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1000:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1002:	0019      	movs	r1, r3
    1004:	2280      	movs	r2, #128	; 0x80
    1006:	0252      	lsls	r2, r2, #9
    1008:	680b      	ldr	r3, [r1, #0]
    100a:	4213      	tst	r3, r2
    100c:	d0fc      	beq.n	1008 <_delay_cycles+0x40>
		;
}
    100e:	bd70      	pop	{r4, r5, r6, pc}
    1010:	e000e010 	.word	0xe000e010
    1014:	00ffffff 	.word	0x00ffffff
    1018:	ff000001 	.word	0xff000001

0000101c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    101c:	2000      	movs	r0, #0
    101e:	4770      	bx	lr

00001020 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1020:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1022:	7c83      	ldrb	r3, [r0, #18]
    1024:	220f      	movs	r2, #15
    1026:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1028:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    102a:	3a08      	subs	r2, #8
    102c:	400a      	ands	r2, r1
    102e:	2a01      	cmp	r2, #1
    1030:	d00b      	beq.n	104a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1032:	015a      	lsls	r2, r3, #5
    1034:	4919      	ldr	r1, [pc, #100]	; (109c <_usb_d_dev_handle_setup+0x7c>)
    1036:	468c      	mov	ip, r1
    1038:	4462      	add	r2, ip
    103a:	2110      	movs	r1, #16
    103c:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    103e:	015b      	lsls	r3, r3, #5
    1040:	4a17      	ldr	r2, [pc, #92]	; (10a0 <_usb_d_dev_handle_setup+0x80>)
    1042:	4694      	mov	ip, r2
    1044:	4463      	add	r3, ip
    1046:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1048:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    104a:	064a      	lsls	r2, r1, #25
    104c:	d50e      	bpl.n	106c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    104e:	7cc2      	ldrb	r2, [r0, #19]
    1050:	2140      	movs	r1, #64	; 0x40
    1052:	438a      	bics	r2, r1
    1054:	74c2      	strb	r2, [r0, #19]
    1056:	015a      	lsls	r2, r3, #5
    1058:	4c12      	ldr	r4, [pc, #72]	; (10a4 <_usb_d_dev_handle_setup+0x84>)
    105a:	46a4      	mov	ip, r4
    105c:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    105e:	2580      	movs	r5, #128	; 0x80
    1060:	2482      	movs	r4, #130	; 0x82
    1062:	0064      	lsls	r4, r4, #1
    1064:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1066:	2406      	movs	r4, #6
    1068:	34ff      	adds	r4, #255	; 0xff
    106a:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    106c:	7cc2      	ldrb	r2, [r0, #19]
    106e:	2108      	movs	r1, #8
    1070:	438a      	bics	r2, r1
    1072:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1074:	490c      	ldr	r1, [pc, #48]	; (10a8 <_usb_d_dev_handle_setup+0x88>)
    1076:	015a      	lsls	r2, r3, #5
    1078:	188c      	adds	r4, r1, r2
    107a:	2500      	movs	r5, #0
    107c:	72a5      	strb	r5, [r4, #10]
    107e:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1080:	0013      	movs	r3, r2
    1082:	4c06      	ldr	r4, [pc, #24]	; (109c <_usb_d_dev_handle_setup+0x7c>)
    1084:	46a4      	mov	ip, r4
    1086:	4463      	add	r3, ip
    1088:	246f      	movs	r4, #111	; 0x6f
    108a:	71dc      	strb	r4, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    108c:	4b04      	ldr	r3, [pc, #16]	; (10a0 <_usb_d_dev_handle_setup+0x80>)
    108e:	469c      	mov	ip, r3
    1090:	4462      	add	r2, ip
    1092:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1094:	7c80      	ldrb	r0, [r0, #18]
    1096:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1098:	4798      	blx	r3
    109a:	e7d5      	b.n	1048 <_usb_d_dev_handle_setup+0x28>
    109c:	41005100 	.word	0x41005100
    10a0:	41005108 	.word	0x41005108
    10a4:	41005000 	.word	0x41005000
    10a8:	200000a0 	.word	0x200000a0

000010ac <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    10ac:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    10ae:	7c83      	ldrb	r3, [r0, #18]
    10b0:	2bff      	cmp	r3, #255	; 0xff
    10b2:	d002      	beq.n	10ba <_usb_d_dev_trans_done+0xe>
    10b4:	7cc2      	ldrb	r2, [r0, #19]
    10b6:	0652      	lsls	r2, r2, #25
    10b8:	d400      	bmi.n	10bc <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    10ba:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    10bc:	7cc2      	ldrb	r2, [r0, #19]
    10be:	2440      	movs	r4, #64	; 0x40
    10c0:	43a2      	bics	r2, r4
    10c2:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    10c4:	6882      	ldr	r2, [r0, #8]
    10c6:	4802      	ldr	r0, [pc, #8]	; (10d0 <_usb_d_dev_trans_done+0x24>)
    10c8:	6f04      	ldr	r4, [r0, #112]	; 0x70
    10ca:	0018      	movs	r0, r3
    10cc:	47a0      	blx	r4
    10ce:	e7f4      	b.n	10ba <_usb_d_dev_trans_done+0xe>
    10d0:	200000a0 	.word	0x200000a0

000010d4 <_usb_d_dev_handle_stall>:
{
    10d4:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    10d6:	2220      	movs	r2, #32
    10d8:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    10da:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    10dc:	7c81      	ldrb	r1, [r0, #18]
    10de:	230f      	movs	r3, #15
    10e0:	400b      	ands	r3, r1
    10e2:	015b      	lsls	r3, r3, #5
    10e4:	4903      	ldr	r1, [pc, #12]	; (10f4 <_usb_d_dev_handle_stall+0x20>)
    10e6:	468c      	mov	ip, r1
    10e8:	4463      	add	r3, ip
    10ea:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
    10ec:	2101      	movs	r1, #1
    10ee:	4b02      	ldr	r3, [pc, #8]	; (10f8 <_usb_d_dev_handle_stall+0x24>)
    10f0:	4798      	blx	r3
}
    10f2:	bd10      	pop	{r4, pc}
    10f4:	41005108 	.word	0x41005108
    10f8:	000010ad 	.word	0x000010ad

000010fc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    10fc:	b530      	push	{r4, r5, lr}
    10fe:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1100:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1102:	ac01      	add	r4, sp, #4
    1104:	2525      	movs	r5, #37	; 0x25
    1106:	7025      	strb	r5, [r4, #0]
    1108:	3525      	adds	r5, #37	; 0x25
    110a:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    110c:	2bff      	cmp	r3, #255	; 0xff
    110e:	d01b      	beq.n	1148 <_usb_d_dev_trans_stop+0x4c>
    1110:	7cc4      	ldrb	r4, [r0, #19]
    1112:	0664      	lsls	r4, r4, #25
    1114:	d518      	bpl.n	1148 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1116:	240f      	movs	r4, #15
    1118:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    111a:	2900      	cmp	r1, #0
    111c:	d016      	beq.n	114c <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    111e:	015c      	lsls	r4, r3, #5
    1120:	4d0e      	ldr	r5, [pc, #56]	; (115c <_usb_d_dev_trans_stop+0x60>)
    1122:	46ac      	mov	ip, r5
    1124:	4464      	add	r4, ip
    1126:	2580      	movs	r5, #128	; 0x80
    1128:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    112a:	ac01      	add	r4, sp, #4
    112c:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    112e:	0159      	lsls	r1, r3, #5
    1130:	4d0a      	ldr	r5, [pc, #40]	; (115c <_usb_d_dev_trans_stop+0x60>)
    1132:	46ac      	mov	ip, r5
    1134:	4461      	add	r1, ip
    1136:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1138:	015b      	lsls	r3, r3, #5
    113a:	4909      	ldr	r1, [pc, #36]	; (1160 <_usb_d_dev_trans_stop+0x64>)
    113c:	468c      	mov	ip, r1
    113e:	4463      	add	r3, ip
    1140:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1142:	0011      	movs	r1, r2
    1144:	4b07      	ldr	r3, [pc, #28]	; (1164 <_usb_d_dev_trans_stop+0x68>)
    1146:	4798      	blx	r3
}
    1148:	b003      	add	sp, #12
    114a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    114c:	015c      	lsls	r4, r3, #5
    114e:	4d03      	ldr	r5, [pc, #12]	; (115c <_usb_d_dev_trans_stop+0x60>)
    1150:	46ac      	mov	ip, r5
    1152:	4464      	add	r4, ip
    1154:	2540      	movs	r5, #64	; 0x40
    1156:	7165      	strb	r5, [r4, #5]
    1158:	e7e7      	b.n	112a <_usb_d_dev_trans_stop+0x2e>
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	41005100 	.word	0x41005100
    1160:	41005108 	.word	0x41005108
    1164:	000010ad 	.word	0x000010ad

00001168 <_usb_d_dev_handle_trfail>:
{
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    116c:	7c83      	ldrb	r3, [r0, #18]
    116e:	220f      	movs	r2, #15
    1170:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1172:	aa01      	add	r2, sp, #4
    1174:	2404      	movs	r4, #4
    1176:	7014      	strb	r4, [r2, #0]
    1178:	3404      	adds	r4, #4
    117a:	7054      	strb	r4, [r2, #1]
    117c:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    117e:	2900      	cmp	r1, #0
    1180:	d031      	beq.n	11e6 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1182:	001a      	movs	r2, r3
    1184:	3208      	adds	r2, #8
    1186:	0152      	lsls	r2, r2, #5
    1188:	4c32      	ldr	r4, [pc, #200]	; (1254 <_usb_d_dev_handle_trfail+0xec>)
    118a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    118c:	0664      	lsls	r4, r4, #25
    118e:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1190:	010a      	lsls	r2, r1, #4
    1192:	1952      	adds	r2, r2, r5
    1194:	4d30      	ldr	r5, [pc, #192]	; (1258 <_usb_d_dev_handle_trfail+0xf0>)
    1196:	18aa      	adds	r2, r5, r2
    1198:	7a95      	ldrb	r5, [r2, #10]
    119a:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    119c:	2c02      	cmp	r4, #2
    119e:	d02a      	beq.n	11f6 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    11a0:	07ac      	lsls	r4, r5, #30
    11a2:	d541      	bpl.n	1228 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    11a4:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    11a6:	7a94      	ldrb	r4, [r2, #10]
    11a8:	2602      	movs	r6, #2
    11aa:	43b4      	bics	r4, r6
    11ac:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    11ae:	aa01      	add	r2, sp, #4
    11b0:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    11b2:	015a      	lsls	r2, r3, #5
    11b4:	4e29      	ldr	r6, [pc, #164]	; (125c <_usb_d_dev_handle_trfail+0xf4>)
    11b6:	46b4      	mov	ip, r6
    11b8:	4462      	add	r2, ip
    11ba:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    11bc:	015b      	lsls	r3, r3, #5
    11be:	4a28      	ldr	r2, [pc, #160]	; (1260 <_usb_d_dev_handle_trfail+0xf8>)
    11c0:	4694      	mov	ip, r2
    11c2:	4463      	add	r3, ip
    11c4:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    11c6:	2307      	movs	r3, #7
    11c8:	402b      	ands	r3, r5
    11ca:	2b01      	cmp	r3, #1
    11cc:	d13f      	bne.n	124e <_usb_d_dev_handle_trfail+0xe6>
    11ce:	7cc3      	ldrb	r3, [r0, #19]
    11d0:	065b      	lsls	r3, r3, #25
    11d2:	d53c      	bpl.n	124e <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    11d4:	7cc3      	ldrb	r3, [r0, #19]
    11d6:	09db      	lsrs	r3, r3, #7
    11d8:	4299      	cmp	r1, r3
    11da:	d038      	beq.n	124e <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    11dc:	2200      	movs	r2, #0
    11de:	0019      	movs	r1, r3
    11e0:	4b20      	ldr	r3, [pc, #128]	; (1264 <_usb_d_dev_handle_trfail+0xfc>)
    11e2:	4798      	blx	r3
    11e4:	e033      	b.n	124e <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    11e6:	001a      	movs	r2, r3
    11e8:	3208      	adds	r2, #8
    11ea:	0152      	lsls	r2, r2, #5
    11ec:	4c19      	ldr	r4, [pc, #100]	; (1254 <_usb_d_dev_handle_trfail+0xec>)
    11ee:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    11f0:	2207      	movs	r2, #7
    11f2:	4014      	ands	r4, r2
    11f4:	e7cc      	b.n	1190 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    11f6:	07ec      	lsls	r4, r5, #31
    11f8:	d5d2      	bpl.n	11a0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    11fa:	7a94      	ldrb	r4, [r2, #10]
    11fc:	2501      	movs	r5, #1
    11fe:	43ac      	bics	r4, r5
    1200:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1202:	aa01      	add	r2, sp, #4
    1204:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1206:	015a      	lsls	r2, r3, #5
    1208:	4d14      	ldr	r5, [pc, #80]	; (125c <_usb_d_dev_handle_trfail+0xf4>)
    120a:	46ac      	mov	ip, r5
    120c:	4462      	add	r2, ip
    120e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1210:	015b      	lsls	r3, r3, #5
    1212:	4a13      	ldr	r2, [pc, #76]	; (1260 <_usb_d_dev_handle_trfail+0xf8>)
    1214:	4694      	mov	ip, r2
    1216:	4463      	add	r3, ip
    1218:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    121a:	1e4b      	subs	r3, r1, #1
    121c:	4199      	sbcs	r1, r3
    121e:	b2c9      	uxtb	r1, r1
    1220:	2204      	movs	r2, #4
    1222:	4b10      	ldr	r3, [pc, #64]	; (1264 <_usb_d_dev_handle_trfail+0xfc>)
    1224:	4798      	blx	r3
    1226:	e012      	b.n	124e <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1228:	005a      	lsls	r2, r3, #1
    122a:	1852      	adds	r2, r2, r1
    122c:	0112      	lsls	r2, r2, #4
    122e:	480a      	ldr	r0, [pc, #40]	; (1258 <_usb_d_dev_handle_trfail+0xf0>)
    1230:	1882      	adds	r2, r0, r2
    1232:	2000      	movs	r0, #0
    1234:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1236:	aa01      	add	r2, sp, #4
    1238:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    123a:	015a      	lsls	r2, r3, #5
    123c:	4807      	ldr	r0, [pc, #28]	; (125c <_usb_d_dev_handle_trfail+0xf4>)
    123e:	4684      	mov	ip, r0
    1240:	4462      	add	r2, ip
    1242:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1244:	015b      	lsls	r3, r3, #5
    1246:	4a06      	ldr	r2, [pc, #24]	; (1260 <_usb_d_dev_handle_trfail+0xf8>)
    1248:	4694      	mov	ip, r2
    124a:	4463      	add	r3, ip
    124c:	7019      	strb	r1, [r3, #0]
}
    124e:	b002      	add	sp, #8
    1250:	bd70      	pop	{r4, r5, r6, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	41005000 	.word	0x41005000
    1258:	200000a0 	.word	0x200000a0
    125c:	41005100 	.word	0x41005100
    1260:	41005108 	.word	0x41005108
    1264:	000010fd 	.word	0x000010fd

00001268 <_usb_d_dev_reset_epts>:
{
    1268:	b5f0      	push	{r4, r5, r6, r7, lr}
    126a:	46c6      	mov	lr, r8
    126c:	b500      	push	{lr}
    126e:	4d0c      	ldr	r5, [pc, #48]	; (12a0 <_usb_d_dev_reset_epts+0x38>)
    1270:	002c      	movs	r4, r5
    1272:	3474      	adds	r4, #116	; 0x74
    1274:	3529      	adds	r5, #41	; 0x29
    1276:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1278:	4b0a      	ldr	r3, [pc, #40]	; (12a4 <_usb_d_dev_reset_epts+0x3c>)
    127a:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    127c:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    127e:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1280:	2103      	movs	r1, #3
    1282:	0020      	movs	r0, r4
    1284:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1286:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1288:	74e6      	strb	r6, [r4, #19]
    128a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    128c:	42ac      	cmp	r4, r5
    128e:	d1f7      	bne.n	1280 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1290:	2260      	movs	r2, #96	; 0x60
    1292:	2100      	movs	r1, #0
    1294:	4802      	ldr	r0, [pc, #8]	; (12a0 <_usb_d_dev_reset_epts+0x38>)
    1296:	4b04      	ldr	r3, [pc, #16]	; (12a8 <_usb_d_dev_reset_epts+0x40>)
    1298:	4798      	blx	r3
}
    129a:	bc04      	pop	{r2}
    129c:	4690      	mov	r8, r2
    129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a0:	200000a0 	.word	0x200000a0
    12a4:	000010ad 	.word	0x000010ad
    12a8:	00001e4b 	.word	0x00001e4b

000012ac <_usb_d_dev_in_next>:
{
    12ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ae:	46c6      	mov	lr, r8
    12b0:	b500      	push	{lr}
    12b2:	0004      	movs	r4, r0
    12b4:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    12b6:	7c83      	ldrb	r3, [r0, #18]
    12b8:	250f      	movs	r5, #15
    12ba:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    12bc:	2900      	cmp	r1, #0
    12be:	d100      	bne.n	12c2 <_usb_d_dev_in_next+0x16>
    12c0:	e0aa      	b.n	1418 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    12c2:	016a      	lsls	r2, r5, #5
    12c4:	4b5a      	ldr	r3, [pc, #360]	; (1430 <_usb_d_dev_in_next+0x184>)
    12c6:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    12c8:	6958      	ldr	r0, [r3, #20]
    12ca:	0480      	lsls	r0, r0, #18
    12cc:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    12ce:	8a23      	ldrh	r3, [r4, #16]
    12d0:	4a58      	ldr	r2, [pc, #352]	; (1434 <_usb_d_dev_in_next+0x188>)
    12d2:	4293      	cmp	r3, r2
    12d4:	d100      	bne.n	12d8 <_usb_d_dev_in_next+0x2c>
    12d6:	e09a      	b.n	140e <_usb_d_dev_in_next+0x162>
    12d8:	3b01      	subs	r3, #1
    12da:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    12dc:	7ce3      	ldrb	r3, [r4, #19]
    12de:	2707      	movs	r7, #7
    12e0:	401f      	ands	r7, r3
	if (isr) {
    12e2:	2e00      	cmp	r6, #0
    12e4:	d005      	beq.n	12f2 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12e6:	016b      	lsls	r3, r5, #5
    12e8:	4953      	ldr	r1, [pc, #332]	; (1438 <_usb_d_dev_in_next+0x18c>)
    12ea:	468c      	mov	ip, r1
    12ec:	4463      	add	r3, ip
    12ee:	2102      	movs	r1, #2
    12f0:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    12f2:	68a3      	ldr	r3, [r4, #8]
    12f4:	18c1      	adds	r1, r0, r3
    12f6:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    12f8:	6863      	ldr	r3, [r4, #4]
    12fa:	4299      	cmp	r1, r3
    12fc:	d24a      	bcs.n	1394 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    12fe:	1a5b      	subs	r3, r3, r1
    1300:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1302:	7ce2      	ldrb	r2, [r4, #19]
    1304:	0692      	lsls	r2, r2, #26
    1306:	d535      	bpl.n	1374 <_usb_d_dev_in_next+0xc8>
    1308:	8a22      	ldrh	r2, [r4, #16]
    130a:	1c10      	adds	r0, r2, #0
    130c:	b292      	uxth	r2, r2
    130e:	429a      	cmp	r2, r3
    1310:	d900      	bls.n	1314 <_usb_d_dev_in_next+0x68>
    1312:	1c18      	adds	r0, r3, #0
    1314:	b283      	uxth	r3, r0
    1316:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1318:	6823      	ldr	r3, [r4, #0]
    131a:	469c      	mov	ip, r3
    131c:	4461      	add	r1, ip
    131e:	4642      	mov	r2, r8
    1320:	68e0      	ldr	r0, [r4, #12]
    1322:	4b46      	ldr	r3, [pc, #280]	; (143c <_usb_d_dev_in_next+0x190>)
    1324:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1326:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1328:	016a      	lsls	r2, r5, #5
    132a:	4b41      	ldr	r3, [pc, #260]	; (1430 <_usb_d_dev_in_next+0x184>)
    132c:	189b      	adds	r3, r3, r2
    132e:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1330:	016a      	lsls	r2, r5, #5
    1332:	4b3f      	ldr	r3, [pc, #252]	; (1430 <_usb_d_dev_in_next+0x184>)
    1334:	189b      	adds	r3, r3, r2
    1336:	695a      	ldr	r2, [r3, #20]
    1338:	4641      	mov	r1, r8
    133a:	0489      	lsls	r1, r1, #18
    133c:	0c89      	lsrs	r1, r1, #18
    133e:	0b92      	lsrs	r2, r2, #14
    1340:	0392      	lsls	r2, r2, #14
    1342:	430a      	orrs	r2, r1
    1344:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1346:	695a      	ldr	r2, [r3, #20]
    1348:	493d      	ldr	r1, [pc, #244]	; (1440 <_usb_d_dev_in_next+0x194>)
    134a:	400a      	ands	r2, r1
    134c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    134e:	2e00      	cmp	r6, #0
    1350:	d107      	bne.n	1362 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1352:	2f01      	cmp	r7, #1
    1354:	d059      	beq.n	140a <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1356:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1358:	016b      	lsls	r3, r5, #5
    135a:	493a      	ldr	r1, [pc, #232]	; (1444 <_usb_d_dev_in_next+0x198>)
    135c:	468c      	mov	ip, r1
    135e:	4463      	add	r3, ip
    1360:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1362:	016d      	lsls	r5, r5, #5
    1364:	4b34      	ldr	r3, [pc, #208]	; (1438 <_usb_d_dev_in_next+0x18c>)
    1366:	469c      	mov	ip, r3
    1368:	4465      	add	r5, ip
    136a:	2380      	movs	r3, #128	; 0x80
    136c:	716b      	strb	r3, [r5, #5]
}
    136e:	bc04      	pop	{r2}
    1370:	4690      	mov	r8, r2
    1372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1374:	1c1a      	adds	r2, r3, #0
    1376:	2080      	movs	r0, #128	; 0x80
    1378:	0180      	lsls	r0, r0, #6
    137a:	4283      	cmp	r3, r0
    137c:	d901      	bls.n	1382 <_usb_d_dev_in_next+0xd6>
    137e:	4b32      	ldr	r3, [pc, #200]	; (1448 <_usb_d_dev_in_next+0x19c>)
    1380:	881a      	ldrh	r2, [r3, #0]
    1382:	b293      	uxth	r3, r2
    1384:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1386:	6823      	ldr	r3, [r4, #0]
    1388:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    138a:	016a      	lsls	r2, r5, #5
    138c:	4b28      	ldr	r3, [pc, #160]	; (1430 <_usb_d_dev_in_next+0x184>)
    138e:	189b      	adds	r3, r3, r2
    1390:	6119      	str	r1, [r3, #16]
    1392:	e7cd      	b.n	1330 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1394:	7ce3      	ldrb	r3, [r4, #19]
    1396:	06db      	lsls	r3, r3, #27
    1398:	d50f      	bpl.n	13ba <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    139a:	7ce3      	ldrb	r3, [r4, #19]
    139c:	2210      	movs	r2, #16
    139e:	4393      	bics	r3, r2
    13a0:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    13a2:	016a      	lsls	r2, r5, #5
    13a4:	4b22      	ldr	r3, [pc, #136]	; (1430 <_usb_d_dev_in_next+0x184>)
    13a6:	189b      	adds	r3, r3, r2
    13a8:	695a      	ldr	r2, [r3, #20]
    13aa:	0b92      	lsrs	r2, r2, #14
    13ac:	0392      	lsls	r2, r2, #14
    13ae:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    13b0:	695a      	ldr	r2, [r3, #20]
    13b2:	4923      	ldr	r1, [pc, #140]	; (1440 <_usb_d_dev_in_next+0x194>)
    13b4:	400a      	ands	r2, r1
    13b6:	615a      	str	r2, [r3, #20]
    13b8:	e7c9      	b.n	134e <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    13ba:	2f01      	cmp	r7, #1
    13bc:	d00e      	beq.n	13dc <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13be:	016d      	lsls	r5, r5, #5
    13c0:	4b22      	ldr	r3, [pc, #136]	; (144c <_usb_d_dev_in_next+0x1a0>)
    13c2:	469c      	mov	ip, r3
    13c4:	4465      	add	r5, ip
    13c6:	234a      	movs	r3, #74	; 0x4a
    13c8:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    13ca:	8a21      	ldrh	r1, [r4, #16]
    13cc:	4002      	ands	r2, r0
    13ce:	4291      	cmp	r1, r2
    13d0:	d00b      	beq.n	13ea <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    13d2:	2100      	movs	r1, #0
    13d4:	0020      	movs	r0, r4
    13d6:	4b1e      	ldr	r3, [pc, #120]	; (1450 <_usb_d_dev_in_next+0x1a4>)
    13d8:	4798      	blx	r3
	return;
    13da:	e7c8      	b.n	136e <_usb_d_dev_in_next+0xc2>
    13dc:	016d      	lsls	r5, r5, #5
    13de:	4b1b      	ldr	r3, [pc, #108]	; (144c <_usb_d_dev_in_next+0x1a0>)
    13e0:	469c      	mov	ip, r3
    13e2:	4465      	add	r5, ip
    13e4:	234b      	movs	r3, #75	; 0x4b
    13e6:	702b      	strb	r3, [r5, #0]
    13e8:	e7ef      	b.n	13ca <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    13ea:	7ce3      	ldrb	r3, [r4, #19]
    13ec:	2240      	movs	r2, #64	; 0x40
    13ee:	4393      	bics	r3, r2
    13f0:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    13f2:	7ca0      	ldrb	r0, [r4, #18]
    13f4:	4b0e      	ldr	r3, [pc, #56]	; (1430 <_usb_d_dev_in_next+0x184>)
    13f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    13f8:	68a1      	ldr	r1, [r4, #8]
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	d1b6      	bne.n	136e <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1400:	7ce3      	ldrb	r3, [r4, #19]
    1402:	2240      	movs	r2, #64	; 0x40
    1404:	4313      	orrs	r3, r2
    1406:	74e3      	strb	r3, [r4, #19]
    1408:	e7e3      	b.n	13d2 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    140a:	224e      	movs	r2, #78	; 0x4e
    140c:	e7a4      	b.n	1358 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    140e:	7ce7      	ldrb	r7, [r4, #19]
    1410:	2307      	movs	r3, #7
    1412:	401f      	ands	r7, r3
    1414:	4a07      	ldr	r2, [pc, #28]	; (1434 <_usb_d_dev_in_next+0x188>)
    1416:	e766      	b.n	12e6 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1418:	8a03      	ldrh	r3, [r0, #16]
    141a:	4a06      	ldr	r2, [pc, #24]	; (1434 <_usb_d_dev_in_next+0x188>)
    141c:	2000      	movs	r0, #0
    141e:	4293      	cmp	r3, r2
    1420:	d000      	beq.n	1424 <_usb_d_dev_in_next+0x178>
    1422:	e759      	b.n	12d8 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1424:	7ce3      	ldrb	r3, [r4, #19]
    1426:	2707      	movs	r7, #7
    1428:	401f      	ands	r7, r3
    142a:	2000      	movs	r0, #0
    142c:	4a01      	ldr	r2, [pc, #4]	; (1434 <_usb_d_dev_in_next+0x188>)
    142e:	e760      	b.n	12f2 <_usb_d_dev_in_next+0x46>
    1430:	200000a0 	.word	0x200000a0
    1434:	000003ff 	.word	0x000003ff
    1438:	41005100 	.word	0x41005100
    143c:	00001e39 	.word	0x00001e39
    1440:	f0003fff 	.word	0xf0003fff
    1444:	41005109 	.word	0x41005109
    1448:	00001edc 	.word	0x00001edc
    144c:	41005108 	.word	0x41005108
    1450:	000010ad 	.word	0x000010ad

00001454 <_usb_d_dev_out_next>:
{
    1454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1456:	46de      	mov	lr, fp
    1458:	4657      	mov	r7, sl
    145a:	464e      	mov	r6, r9
    145c:	4645      	mov	r5, r8
    145e:	b5e0      	push	{r5, r6, r7, lr}
    1460:	0004      	movs	r4, r0
    1462:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1464:	7c83      	ldrb	r3, [r0, #18]
    1466:	250f      	movs	r5, #15
    1468:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    146a:	2900      	cmp	r1, #0
    146c:	d057      	beq.n	151e <_usb_d_dev_out_next+0xca>
    146e:	016a      	lsls	r2, r5, #5
    1470:	4b7d      	ldr	r3, [pc, #500]	; (1668 <_usb_d_dev_out_next+0x214>)
    1472:	189b      	adds	r3, r3, r2
    1474:	685a      	ldr	r2, [r3, #4]
    1476:	0112      	lsls	r2, r2, #4
    1478:	0c92      	lsrs	r2, r2, #18
    147a:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    147c:	685f      	ldr	r7, [r3, #4]
    147e:	04bf      	lsls	r7, r7, #18
    1480:	0cbf      	lsrs	r7, r7, #18
    1482:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1484:	8a06      	ldrh	r6, [r0, #16]
    1486:	4b79      	ldr	r3, [pc, #484]	; (166c <_usb_d_dev_out_next+0x218>)
    1488:	429e      	cmp	r6, r3
    148a:	d100      	bne.n	148e <_usb_d_dev_out_next+0x3a>
    148c:	e0cd      	b.n	162a <_usb_d_dev_out_next+0x1d6>
    148e:	3e01      	subs	r6, #1
    1490:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1492:	465f      	mov	r7, fp
    1494:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1496:	7ce3      	ldrb	r3, [r4, #19]
    1498:	2207      	movs	r2, #7
    149a:	401a      	ands	r2, r3
    149c:	4691      	mov	r9, r2
	if (isr) {
    149e:	4643      	mov	r3, r8
    14a0:	2b00      	cmp	r3, #0
    14a2:	d005      	beq.n	14b0 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    14a4:	016b      	lsls	r3, r5, #5
    14a6:	4a72      	ldr	r2, [pc, #456]	; (1670 <_usb_d_dev_out_next+0x21c>)
    14a8:	4694      	mov	ip, r2
    14aa:	4463      	add	r3, ip
    14ac:	2201      	movs	r2, #1
    14ae:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    14b0:	7ce3      	ldrb	r3, [r4, #19]
    14b2:	069b      	lsls	r3, r3, #26
    14b4:	d50f      	bpl.n	14d6 <_usb_d_dev_out_next+0x82>
    14b6:	6863      	ldr	r3, [r4, #4]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d039      	beq.n	1530 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    14bc:	68a0      	ldr	r0, [r4, #8]
    14be:	1a1b      	subs	r3, r3, r0
    14c0:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    14c2:	6822      	ldr	r2, [r4, #0]
    14c4:	4694      	mov	ip, r2
    14c6:	4460      	add	r0, ip
    14c8:	68e1      	ldr	r1, [r4, #12]
    14ca:	001a      	movs	r2, r3
    14cc:	42bb      	cmp	r3, r7
    14ce:	d900      	bls.n	14d2 <_usb_d_dev_out_next+0x7e>
    14d0:	003a      	movs	r2, r7
    14d2:	4b68      	ldr	r3, [pc, #416]	; (1674 <_usb_d_dev_out_next+0x220>)
    14d4:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    14d6:	6863      	ldr	r3, [r4, #4]
    14d8:	2b00      	cmp	r3, #0
    14da:	d029      	beq.n	1530 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    14dc:	4642      	mov	r2, r8
    14de:	2a00      	cmp	r2, #0
    14e0:	d042      	beq.n	1568 <_usb_d_dev_out_next+0x114>
    14e2:	8a22      	ldrh	r2, [r4, #16]
    14e4:	42ba      	cmp	r2, r7
    14e6:	d93f      	bls.n	1568 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    14e8:	7ce3      	ldrb	r3, [r4, #19]
    14ea:	2210      	movs	r2, #16
    14ec:	4393      	bics	r3, r2
    14ee:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    14f0:	68a3      	ldr	r3, [r4, #8]
    14f2:	445b      	add	r3, fp
    14f4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    14f6:	464b      	mov	r3, r9
    14f8:	2b01      	cmp	r3, #1
    14fa:	d100      	bne.n	14fe <_usb_d_dev_out_next+0xaa>
    14fc:	e087      	b.n	160e <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    14fe:	016b      	lsls	r3, r5, #5
    1500:	4a5d      	ldr	r2, [pc, #372]	; (1678 <_usb_d_dev_out_next+0x224>)
    1502:	4694      	mov	ip, r2
    1504:	4463      	add	r3, ip
    1506:	2225      	movs	r2, #37	; 0x25
    1508:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    150a:	2d00      	cmp	r5, #0
    150c:	d102      	bne.n	1514 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    150e:	4b56      	ldr	r3, [pc, #344]	; (1668 <_usb_d_dev_out_next+0x214>)
    1510:	68e2      	ldr	r2, [r4, #12]
    1512:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1514:	2100      	movs	r1, #0
    1516:	0020      	movs	r0, r4
    1518:	4b58      	ldr	r3, [pc, #352]	; (167c <_usb_d_dev_out_next+0x228>)
    151a:	4798      	blx	r3
	return;
    151c:	e059      	b.n	15d2 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    151e:	8a06      	ldrh	r6, [r0, #16]
    1520:	4b52      	ldr	r3, [pc, #328]	; (166c <_usb_d_dev_out_next+0x218>)
    1522:	429e      	cmp	r6, r3
    1524:	d100      	bne.n	1528 <_usb_d_dev_out_next+0xd4>
    1526:	e08e      	b.n	1646 <_usb_d_dev_out_next+0x1f2>
    1528:	2300      	movs	r3, #0
    152a:	469b      	mov	fp, r3
    152c:	469a      	mov	sl, r3
    152e:	e7ae      	b.n	148e <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1530:	7ce3      	ldrb	r3, [r4, #19]
    1532:	06db      	lsls	r3, r3, #27
    1534:	d400      	bmi.n	1538 <_usb_d_dev_out_next+0xe4>
    1536:	e07f      	b.n	1638 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1538:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    153a:	2210      	movs	r2, #16
    153c:	4393      	bics	r3, r2
    153e:	2220      	movs	r2, #32
    1540:	4313      	orrs	r3, r2
    1542:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    1544:	4a48      	ldr	r2, [pc, #288]	; (1668 <_usb_d_dev_out_next+0x214>)
    1546:	016b      	lsls	r3, r5, #5
    1548:	68e1      	ldr	r1, [r4, #12]
    154a:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    154c:	8a21      	ldrh	r1, [r4, #16]
    154e:	18d3      	adds	r3, r2, r3
    1550:	685a      	ldr	r2, [r3, #4]
    1552:	0489      	lsls	r1, r1, #18
    1554:	0909      	lsrs	r1, r1, #4
    1556:	484a      	ldr	r0, [pc, #296]	; (1680 <_usb_d_dev_out_next+0x22c>)
    1558:	4002      	ands	r2, r0
    155a:	430a      	orrs	r2, r1
    155c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    155e:	685a      	ldr	r2, [r3, #4]
    1560:	0b92      	lsrs	r2, r2, #14
    1562:	0392      	lsls	r2, r2, #14
    1564:	605a      	str	r2, [r3, #4]
    1566:	e022      	b.n	15ae <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1568:	68a2      	ldr	r2, [r4, #8]
    156a:	4452      	add	r2, sl
    156c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    156e:	4293      	cmp	r3, r2
    1570:	d9c1      	bls.n	14f6 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    1572:	1a9b      	subs	r3, r3, r2
    1574:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1576:	7ce1      	ldrb	r1, [r4, #19]
    1578:	0689      	lsls	r1, r1, #26
    157a:	d530      	bpl.n	15de <_usb_d_dev_out_next+0x18a>
    157c:	8a22      	ldrh	r2, [r4, #16]
    157e:	1c11      	adds	r1, r2, #0
    1580:	b292      	uxth	r2, r2
    1582:	429a      	cmp	r2, r3
    1584:	d900      	bls.n	1588 <_usb_d_dev_out_next+0x134>
    1586:	1c19      	adds	r1, r3, #0
    1588:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    158a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    158c:	016a      	lsls	r2, r5, #5
    158e:	4936      	ldr	r1, [pc, #216]	; (1668 <_usb_d_dev_out_next+0x214>)
    1590:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1592:	016a      	lsls	r2, r5, #5
    1594:	4934      	ldr	r1, [pc, #208]	; (1668 <_usb_d_dev_out_next+0x214>)
    1596:	1889      	adds	r1, r1, r2
    1598:	684a      	ldr	r2, [r1, #4]
    159a:	049b      	lsls	r3, r3, #18
    159c:	091b      	lsrs	r3, r3, #4
    159e:	4838      	ldr	r0, [pc, #224]	; (1680 <_usb_d_dev_out_next+0x22c>)
    15a0:	4002      	ands	r2, r0
    15a2:	4313      	orrs	r3, r2
    15a4:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    15a6:	684b      	ldr	r3, [r1, #4]
    15a8:	0b9b      	lsrs	r3, r3, #14
    15aa:	039b      	lsls	r3, r3, #14
    15ac:	604b      	str	r3, [r1, #4]
	if (!isr) {
    15ae:	4643      	mov	r3, r8
    15b0:	2b00      	cmp	r3, #0
    15b2:	d108      	bne.n	15c6 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    15b4:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    15b6:	464b      	mov	r3, r9
    15b8:	2b01      	cmp	r3, #1
    15ba:	d02f      	beq.n	161c <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    15bc:	016b      	lsls	r3, r5, #5
    15be:	4931      	ldr	r1, [pc, #196]	; (1684 <_usb_d_dev_out_next+0x230>)
    15c0:	468c      	mov	ip, r1
    15c2:	4463      	add	r3, ip
    15c4:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    15c6:	016d      	lsls	r5, r5, #5
    15c8:	4b29      	ldr	r3, [pc, #164]	; (1670 <_usb_d_dev_out_next+0x21c>)
    15ca:	469c      	mov	ip, r3
    15cc:	4465      	add	r5, ip
    15ce:	2340      	movs	r3, #64	; 0x40
    15d0:	712b      	strb	r3, [r5, #4]
}
    15d2:	bc3c      	pop	{r2, r3, r4, r5}
    15d4:	4690      	mov	r8, r2
    15d6:	4699      	mov	r9, r3
    15d8:	46a2      	mov	sl, r4
    15da:	46ab      	mov	fp, r5
    15dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    15de:	8a21      	ldrh	r1, [r4, #16]
    15e0:	428b      	cmp	r3, r1
    15e2:	d90a      	bls.n	15fa <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    15e4:	2180      	movs	r1, #128	; 0x80
    15e6:	0189      	lsls	r1, r1, #6
    15e8:	428b      	cmp	r3, r1
    15ea:	d80d      	bhi.n	1608 <_usb_d_dev_out_next+0x1b4>
    15ec:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    15ee:	6821      	ldr	r1, [r4, #0]
    15f0:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    15f2:	0169      	lsls	r1, r5, #5
    15f4:	481c      	ldr	r0, [pc, #112]	; (1668 <_usb_d_dev_out_next+0x214>)
    15f6:	500a      	str	r2, [r1, r0]
    15f8:	e7cb      	b.n	1592 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    15fa:	428b      	cmp	r3, r1
    15fc:	d2f7      	bcs.n	15ee <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    15fe:	7ce1      	ldrb	r1, [r4, #19]
    1600:	2020      	movs	r0, #32
    1602:	4301      	orrs	r1, r0
    1604:	74e1      	strb	r1, [r4, #19]
    1606:	e7f2      	b.n	15ee <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1608:	2380      	movs	r3, #128	; 0x80
    160a:	019b      	lsls	r3, r3, #6
    160c:	e7ef      	b.n	15ee <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    160e:	016b      	lsls	r3, r5, #5
    1610:	4a19      	ldr	r2, [pc, #100]	; (1678 <_usb_d_dev_out_next+0x224>)
    1612:	4694      	mov	ip, r2
    1614:	4463      	add	r3, ip
    1616:	222d      	movs	r2, #45	; 0x2d
    1618:	701a      	strb	r2, [r3, #0]
    161a:	e776      	b.n	150a <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    161c:	016a      	lsls	r2, r5, #5
    161e:	4b12      	ldr	r3, [pc, #72]	; (1668 <_usb_d_dev_out_next+0x214>)
    1620:	189b      	adds	r3, r3, r2
    1622:	2200      	movs	r2, #0
    1624:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1626:	322d      	adds	r2, #45	; 0x2d
    1628:	e7c8      	b.n	15bc <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    162a:	05bf      	lsls	r7, r7, #22
    162c:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    162e:	7cc3      	ldrb	r3, [r0, #19]
    1630:	2207      	movs	r2, #7
    1632:	401a      	ands	r2, r3
    1634:	4691      	mov	r9, r2
    1636:	e735      	b.n	14a4 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1638:	4643      	mov	r3, r8
    163a:	2b00      	cmp	r3, #0
    163c:	d10c      	bne.n	1658 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    163e:	68a3      	ldr	r3, [r4, #8]
    1640:	4453      	add	r3, sl
    1642:	60a3      	str	r3, [r4, #8]
    1644:	e757      	b.n	14f6 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1646:	7cc3      	ldrb	r3, [r0, #19]
    1648:	2207      	movs	r2, #7
    164a:	401a      	ands	r2, r3
    164c:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    164e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1650:	2300      	movs	r3, #0
    1652:	469b      	mov	fp, r3
    1654:	469a      	mov	sl, r3
    1656:	e72b      	b.n	14b0 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1658:	8a23      	ldrh	r3, [r4, #16]
    165a:	42bb      	cmp	r3, r7
    165c:	d900      	bls.n	1660 <_usb_d_dev_out_next+0x20c>
    165e:	e743      	b.n	14e8 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1660:	68a3      	ldr	r3, [r4, #8]
    1662:	4453      	add	r3, sl
    1664:	60a3      	str	r3, [r4, #8]
    1666:	e746      	b.n	14f6 <_usb_d_dev_out_next+0xa2>
    1668:	200000a0 	.word	0x200000a0
    166c:	000003ff 	.word	0x000003ff
    1670:	41005100 	.word	0x41005100
    1674:	00001e39 	.word	0x00001e39
    1678:	41005108 	.word	0x41005108
    167c:	000010ad 	.word	0x000010ad
    1680:	f0003fff 	.word	0xf0003fff
    1684:	41005109 	.word	0x41005109

00001688 <_usb_d_dev_init>:
{
    1688:	b510      	push	{r4, lr}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    168a:	492a      	ldr	r1, [pc, #168]	; (1734 <_usb_d_dev_init+0xac>)
    168c:	2201      	movs	r2, #1
    168e:	788b      	ldrb	r3, [r1, #2]
    1690:	4213      	tst	r3, r2
    1692:	d1fc      	bne.n	168e <_usb_d_dev_init+0x6>
    1694:	4927      	ldr	r1, [pc, #156]	; (1734 <_usb_d_dev_init+0xac>)
    1696:	2203      	movs	r2, #3
    1698:	788b      	ldrb	r3, [r1, #2]
    169a:	4213      	tst	r3, r2
    169c:	d1fc      	bne.n	1698 <_usb_d_dev_init+0x10>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    169e:	4b25      	ldr	r3, [pc, #148]	; (1734 <_usb_d_dev_init+0xac>)
    16a0:	781b      	ldrb	r3, [r3, #0]
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
    16a2:	079b      	lsls	r3, r3, #30
    16a4:	d442      	bmi.n	172c <_usb_d_dev_init+0xa4>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16a6:	4923      	ldr	r1, [pc, #140]	; (1734 <_usb_d_dev_init+0xac>)
    16a8:	2201      	movs	r2, #1
    16aa:	788b      	ldrb	r3, [r1, #2]
    16ac:	4213      	tst	r3, r2
    16ae:	d1fc      	bne.n	16aa <_usb_d_dev_init+0x22>
	((Usb *)hw)->DEVICE.CTRLA.reg |= USB_CTRLA_SWRST;
    16b0:	4a20      	ldr	r2, [pc, #128]	; (1734 <_usb_d_dev_init+0xac>)
    16b2:	7813      	ldrb	r3, [r2, #0]
    16b4:	2101      	movs	r1, #1
    16b6:	430b      	orrs	r3, r1
    16b8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16ba:	0011      	movs	r1, r2
    16bc:	2201      	movs	r2, #1
    16be:	788b      	ldrb	r3, [r1, #2]
    16c0:	4213      	tst	r3, r2
    16c2:	d1fc      	bne.n	16be <_usb_d_dev_init+0x36>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    16c4:	4b1c      	ldr	r3, [pc, #112]	; (1738 <_usb_d_dev_init+0xb0>)
    16c6:	4a1d      	ldr	r2, [pc, #116]	; (173c <_usb_d_dev_init+0xb4>)
    16c8:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    16ca:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    16cc:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    16ce:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    16d0:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    16d2:	4b1b      	ldr	r3, [pc, #108]	; (1740 <_usb_d_dev_init+0xb8>)
    16d4:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    16d6:	4b1b      	ldr	r3, [pc, #108]	; (1744 <_usb_d_dev_init+0xbc>)
    16d8:	681b      	ldr	r3, [r3, #0]
    16da:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    16dc:	211f      	movs	r1, #31
    16de:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    16e0:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    16e2:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    16e4:	019b      	lsls	r3, r3, #6
    16e6:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    16e8:	2a1f      	cmp	r2, #31
    16ea:	d019      	beq.n	1720 <_usb_d_dev_init+0x98>
	if (pad_transp == 0x1F) {
    16ec:	291f      	cmp	r1, #31
    16ee:	d019      	beq.n	1724 <_usb_d_dev_init+0x9c>
	if (pad_trim == 0x7) {
    16f0:	2b07      	cmp	r3, #7
    16f2:	d019      	beq.n	1728 <_usb_d_dev_init+0xa0>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    16f4:	0192      	lsls	r2, r2, #6
    16f6:	430a      	orrs	r2, r1
    16f8:	031b      	lsls	r3, r3, #12
    16fa:	4313      	orrs	r3, r2
    16fc:	4a0d      	ldr	r2, [pc, #52]	; (1734 <_usb_d_dev_init+0xac>)
    16fe:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1700:	78d3      	ldrb	r3, [r2, #3]
    1702:	2103      	movs	r1, #3
    1704:	430b      	orrs	r3, r1
    1706:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1708:	78d3      	ldrb	r3, [r2, #3]
    170a:	210c      	movs	r1, #12
    170c:	430b      	orrs	r3, r1
    170e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    1710:	2304      	movs	r3, #4
    1712:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    1714:	4b08      	ldr	r3, [pc, #32]	; (1738 <_usb_d_dev_init+0xb0>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    1716:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1718:	2301      	movs	r3, #1
    171a:	8113      	strh	r3, [r2, #8]
	return ERR_NONE;
    171c:	2000      	movs	r0, #0
}
    171e:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1720:	3a1a      	subs	r2, #26
    1722:	e7e3      	b.n	16ec <_usb_d_dev_init+0x64>
		pad_transp = 29;
    1724:	3902      	subs	r1, #2
    1726:	e7e3      	b.n	16f0 <_usb_d_dev_init+0x68>
		pad_trim = 5;
    1728:	3b02      	subs	r3, #2
    172a:	e7e3      	b.n	16f4 <_usb_d_dev_init+0x6c>
		return ERR_DENIED;
    172c:	2011      	movs	r0, #17
    172e:	4240      	negs	r0, r0
    1730:	e7f5      	b.n	171e <_usb_d_dev_init+0x96>
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	41005000 	.word	0x41005000
    1738:	200000a0 	.word	0x200000a0
    173c:	0000101d 	.word	0x0000101d
    1740:	00001269 	.word	0x00001269
    1744:	00806024 	.word	0x00806024

00001748 <_usb_d_dev_ep_stall>:
{
    1748:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    174a:	230f      	movs	r3, #15
    174c:	4003      	ands	r3, r0
    174e:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1750:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1752:	2b00      	cmp	r3, #0
    1754:	d009      	beq.n	176a <_usb_d_dev_ep_stall+0x22>
    1756:	001a      	movs	r2, r3
    1758:	2800      	cmp	r0, #0
    175a:	db04      	blt.n	1766 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    175c:	2b02      	cmp	r3, #2
    175e:	d905      	bls.n	176c <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    1760:	2012      	movs	r0, #18
    1762:	4240      	negs	r0, r0
    1764:	e019      	b.n	179a <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1766:	1c9a      	adds	r2, r3, #2
    1768:	e7f8      	b.n	175c <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    176a:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    176c:	2901      	cmp	r1, #1
    176e:	d015      	beq.n	179c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1770:	2900      	cmp	r1, #0
    1772:	d036      	beq.n	17e2 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1774:	0093      	lsls	r3, r2, #2
    1776:	189b      	adds	r3, r3, r2
    1778:	009b      	lsls	r3, r3, #2
    177a:	4a47      	ldr	r2, [pc, #284]	; (1898 <_usb_d_dev_ep_stall+0x150>)
    177c:	18d2      	adds	r2, r2, r3
    177e:	3286      	adds	r2, #134	; 0x86
    1780:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1782:	230f      	movs	r3, #15
    1784:	4013      	ands	r3, r2
    1786:	015b      	lsls	r3, r3, #5
    1788:	4a44      	ldr	r2, [pc, #272]	; (189c <_usb_d_dev_ep_stall+0x154>)
    178a:	4694      	mov	ip, r2
    178c:	4463      	add	r3, ip
    178e:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1790:	2310      	movs	r3, #16
    1792:	40a3      	lsls	r3, r4
    1794:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    1796:	1e43      	subs	r3, r0, #1
    1798:	4198      	sbcs	r0, r3
}
    179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    179c:	2510      	movs	r5, #16
    179e:	40a5      	lsls	r5, r4
    17a0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    17a2:	493d      	ldr	r1, [pc, #244]	; (1898 <_usb_d_dev_ep_stall+0x150>)
    17a4:	0090      	lsls	r0, r2, #2
    17a6:	1883      	adds	r3, r0, r2
    17a8:	009b      	lsls	r3, r3, #2
    17aa:	18cb      	adds	r3, r1, r3
    17ac:	3386      	adds	r3, #134	; 0x86
    17ae:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    17b0:	230f      	movs	r3, #15
    17b2:	4033      	ands	r3, r6
    17b4:	015e      	lsls	r6, r3, #5
    17b6:	4f39      	ldr	r7, [pc, #228]	; (189c <_usb_d_dev_ep_stall+0x154>)
    17b8:	46bc      	mov	ip, r7
    17ba:	4466      	add	r6, ip
    17bc:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    17be:	2520      	movs	r5, #32
    17c0:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    17c2:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    17c4:	015b      	lsls	r3, r3, #5
    17c6:	4d36      	ldr	r5, [pc, #216]	; (18a0 <_usb_d_dev_ep_stall+0x158>)
    17c8:	46ac      	mov	ip, r5
    17ca:	4463      	add	r3, ip
    17cc:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    17ce:	1882      	adds	r2, r0, r2
    17d0:	0092      	lsls	r2, r2, #2
    17d2:	188a      	adds	r2, r1, r2
    17d4:	3280      	adds	r2, #128	; 0x80
    17d6:	79d3      	ldrb	r3, [r2, #7]
    17d8:	2108      	movs	r1, #8
    17da:	430b      	orrs	r3, r1
    17dc:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    17de:	2000      	movs	r0, #0
    17e0:	e7db      	b.n	179a <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    17e2:	0093      	lsls	r3, r2, #2
    17e4:	189b      	adds	r3, r3, r2
    17e6:	0099      	lsls	r1, r3, #2
    17e8:	4b2b      	ldr	r3, [pc, #172]	; (1898 <_usb_d_dev_ep_stall+0x150>)
    17ea:	185b      	adds	r3, r3, r1
    17ec:	3386      	adds	r3, #134	; 0x86
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	210f      	movs	r1, #15
    17f2:	400b      	ands	r3, r1
    17f4:	015d      	lsls	r5, r3, #5
    17f6:	492b      	ldr	r1, [pc, #172]	; (18a4 <_usb_d_dev_ep_stall+0x15c>)
    17f8:	468c      	mov	ip, r1
    17fa:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    17fc:	2183      	movs	r1, #131	; 0x83
    17fe:	0049      	lsls	r1, r1, #1
    1800:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1802:	39f6      	subs	r1, #246	; 0xf6
    1804:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1806:	2000      	movs	r0, #0
	if (!is_stalled) {
    1808:	420e      	tst	r6, r1
    180a:	d0c6      	beq.n	179a <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    180c:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    180e:	3005      	adds	r0, #5
    1810:	30ff      	adds	r0, #255	; 0xff
    1812:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1814:	2120      	movs	r1, #32
    1816:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1818:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    181a:	015b      	lsls	r3, r3, #5
    181c:	4e22      	ldr	r6, [pc, #136]	; (18a8 <_usb_d_dev_ep_stall+0x160>)
    181e:	46b4      	mov	ip, r6
    1820:	4463      	add	r3, ip
    1822:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1824:	2308      	movs	r3, #8
    1826:	33ff      	adds	r3, #255	; 0xff
    1828:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    182a:	420b      	tst	r3, r1
    182c:	d009      	beq.n	1842 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    182e:	2308      	movs	r3, #8
    1830:	33ff      	adds	r3, #255	; 0xff
    1832:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1834:	3b07      	subs	r3, #7
    1836:	3bff      	subs	r3, #255	; 0xff
    1838:	40a3      	lsls	r3, r4
    183a:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    183c:	2182      	movs	r1, #130	; 0x82
    183e:	0049      	lsls	r1, r1, #1
    1840:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1842:	0093      	lsls	r3, r2, #2
    1844:	189b      	adds	r3, r3, r2
    1846:	0099      	lsls	r1, r3, #2
    1848:	4b13      	ldr	r3, [pc, #76]	; (1898 <_usb_d_dev_ep_stall+0x150>)
    184a:	185b      	adds	r3, r3, r1
    184c:	3370      	adds	r3, #112	; 0x70
    184e:	7dd9      	ldrb	r1, [r3, #23]
    1850:	2307      	movs	r3, #7
    1852:	400b      	ands	r3, r1
    1854:	2b01      	cmp	r3, #1
    1856:	d00b      	beq.n	1870 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    1858:	0093      	lsls	r3, r2, #2
    185a:	189a      	adds	r2, r3, r2
    185c:	0092      	lsls	r2, r2, #2
    185e:	4b0e      	ldr	r3, [pc, #56]	; (1898 <_usb_d_dev_ep_stall+0x150>)
    1860:	189b      	adds	r3, r3, r2
    1862:	3380      	adds	r3, #128	; 0x80
    1864:	79da      	ldrb	r2, [r3, #7]
    1866:	2108      	movs	r1, #8
    1868:	438a      	bics	r2, r1
    186a:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    186c:	2000      	movs	r0, #0
    186e:	e794      	b.n	179a <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1870:	3306      	adds	r3, #6
    1872:	33ff      	adds	r3, #255	; 0xff
    1874:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1876:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1878:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    187a:	4219      	tst	r1, r3
    187c:	d000      	beq.n	1880 <_usb_d_dev_ep_stall+0x138>
    187e:	e78c      	b.n	179a <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1880:	0093      	lsls	r3, r2, #2
    1882:	189a      	adds	r2, r3, r2
    1884:	0092      	lsls	r2, r2, #2
    1886:	4b04      	ldr	r3, [pc, #16]	; (1898 <_usb_d_dev_ep_stall+0x150>)
    1888:	189b      	adds	r3, r3, r2
    188a:	3380      	adds	r3, #128	; 0x80
    188c:	79da      	ldrb	r2, [r3, #7]
    188e:	2108      	movs	r1, #8
    1890:	438a      	bics	r2, r1
    1892:	71da      	strb	r2, [r3, #7]
    1894:	e781      	b.n	179a <_usb_d_dev_ep_stall+0x52>
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	200000a0 	.word	0x200000a0
    189c:	41005100 	.word	0x41005100
    18a0:	41005109 	.word	0x41005109
    18a4:	41005000 	.word	0x41005000
    18a8:	41005108 	.word	0x41005108

000018ac <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    18b0:	230f      	movs	r3, #15
    18b2:	4018      	ands	r0, r3
    18b4:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    18b6:	4b16      	ldr	r3, [pc, #88]	; (1910 <_usb_d_dev_ep_read_req+0x64>)
    18b8:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    18ba:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    18bc:	685b      	ldr	r3, [r3, #4]
    18be:	049b      	lsls	r3, r3, #18
    18c0:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    18c2:	2802      	cmp	r0, #2
    18c4:	d81a      	bhi.n	18fc <_usb_d_dev_ep_read_req+0x50>
    18c6:	2d00      	cmp	r5, #0
    18c8:	d01b      	beq.n	1902 <_usb_d_dev_ep_read_req+0x56>
    18ca:	4b12      	ldr	r3, [pc, #72]	; (1914 <_usb_d_dev_ep_read_req+0x68>)
    18cc:	469c      	mov	ip, r3
    18ce:	4464      	add	r4, ip
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    18d0:	2380      	movs	r3, #128	; 0x80
    18d2:	005b      	lsls	r3, r3, #1
    18d4:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    18d6:	2b11      	cmp	r3, #17
    18d8:	d116      	bne.n	1908 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    18da:	2308      	movs	r3, #8
    18dc:	33ff      	adds	r3, #255	; 0xff
    18de:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    18e0:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    18e2:	06db      	lsls	r3, r3, #27
    18e4:	d400      	bmi.n	18e8 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    18e6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    18e8:	2208      	movs	r2, #8
    18ea:	0028      	movs	r0, r5
    18ec:	4b0a      	ldr	r3, [pc, #40]	; (1918 <_usb_d_dev_ep_read_req+0x6c>)
    18ee:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18f0:	2210      	movs	r2, #16
    18f2:	2308      	movs	r3, #8
    18f4:	33ff      	adds	r3, #255	; 0xff
    18f6:	54e2      	strb	r2, [r4, r3]
	return bytes;
    18f8:	0030      	movs	r0, r6
    18fa:	e7f4      	b.n	18e6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    18fc:	2012      	movs	r0, #18
    18fe:	4240      	negs	r0, r0
    1900:	e7f1      	b.n	18e6 <_usb_d_dev_ep_read_req+0x3a>
    1902:	2012      	movs	r0, #18
    1904:	4240      	negs	r0, r0
    1906:	e7ee      	b.n	18e6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    1908:	2013      	movs	r0, #19
    190a:	4240      	negs	r0, r0
    190c:	e7eb      	b.n	18e6 <_usb_d_dev_ep_read_req+0x3a>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	200000a0 	.word	0x200000a0
    1914:	41005000 	.word	0x41005000
    1918:	00001e39 	.word	0x00001e39

0000191c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	46de      	mov	lr, fp
    1920:	4657      	mov	r7, sl
    1922:	464e      	mov	r6, r9
    1924:	4645      	mov	r5, r8
    1926:	b5e0      	push	{r5, r6, r7, lr}
    1928:	b085      	sub	sp, #20
    192a:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    192c:	7a06      	ldrb	r6, [r0, #8]
    192e:	230f      	movs	r3, #15
    1930:	4033      	ands	r3, r6
    1932:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1934:	2b00      	cmp	r3, #0
    1936:	d100      	bne.n	193a <_usb_d_dev_ep_trans+0x1e>
    1938:	e0d3      	b.n	1ae2 <_usb_d_dev_ep_trans+0x1c6>
    193a:	0018      	movs	r0, r3
    193c:	2e00      	cmp	r6, #0
    193e:	db39      	blt.n	19b4 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    1940:	0004      	movs	r4, r0
    1942:	4a73      	ldr	r2, [pc, #460]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1944:	3260      	adds	r2, #96	; 0x60
    1946:	1c41      	adds	r1, r0, #1
    1948:	008d      	lsls	r5, r1, #2
    194a:	186d      	adds	r5, r5, r1
    194c:	00ad      	lsls	r5, r5, #2
    194e:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1950:	0081      	lsls	r1, r0, #2
    1952:	1809      	adds	r1, r1, r0
    1954:	0089      	lsls	r1, r1, #2
    1956:	1852      	adds	r2, r2, r1
    1958:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    195a:	4a6e      	ldr	r2, [pc, #440]	; (1b14 <_usb_d_dev_ep_trans+0x1f8>)
    195c:	4291      	cmp	r1, r2
    195e:	d02b      	beq.n	19b8 <_usb_d_dev_ep_trans+0x9c>
    1960:	1e4f      	subs	r7, r1, #1
    1962:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    1964:	4642      	mov	r2, r8
    1966:	6852      	ldr	r2, [r2, #4]
    1968:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    196a:	2b02      	cmp	r3, #2
    196c:	d900      	bls.n	1970 <_usb_d_dev_ep_trans+0x54>
    196e:	e0a4      	b.n	1aba <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1970:	4643      	mov	r3, r8
    1972:	681b      	ldr	r3, [r3, #0]
    1974:	4868      	ldr	r0, [pc, #416]	; (1b18 <_usb_d_dev_ep_trans+0x1fc>)
    1976:	4283      	cmp	r3, r0
    1978:	d920      	bls.n	19bc <_usb_d_dev_ep_trans+0xa0>
    197a:	1898      	adds	r0, r3, r2
    197c:	9001      	str	r0, [sp, #4]
    197e:	4867      	ldr	r0, [pc, #412]	; (1b1c <_usb_d_dev_ep_trans+0x200>)
    1980:	4684      	mov	ip, r0
    1982:	9801      	ldr	r0, [sp, #4]
    1984:	4560      	cmp	r0, ip
    1986:	d819      	bhi.n	19bc <_usb_d_dev_ep_trans+0xa0>
    1988:	079b      	lsls	r3, r3, #30
    198a:	d117      	bne.n	19bc <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    198c:	2e00      	cmp	r6, #0
    198e:	db32      	blt.n	19f6 <_usb_d_dev_ep_trans+0xda>
    1990:	4291      	cmp	r1, r2
    1992:	d900      	bls.n	1996 <_usb_d_dev_ep_trans+0x7a>
    1994:	e0af      	b.n	1af6 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1996:	2f00      	cmp	r7, #0
    1998:	d030      	beq.n	19fc <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    199a:	00a3      	lsls	r3, r4, #2
    199c:	191b      	adds	r3, r3, r4
    199e:	009a      	lsls	r2, r3, #2
    19a0:	4b5b      	ldr	r3, [pc, #364]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    19a2:	189b      	adds	r3, r3, r2
    19a4:	3380      	adds	r3, #128	; 0x80
    19a6:	681b      	ldr	r3, [r3, #0]
    19a8:	2b00      	cmp	r3, #0
    19aa:	d100      	bne.n	19ae <_usb_d_dev_ep_trans+0x92>
    19ac:	e08b      	b.n	1ac6 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    19ae:	2300      	movs	r3, #0
    19b0:	4699      	mov	r9, r3
    19b2:	e00f      	b.n	19d4 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    19b4:	1c98      	adds	r0, r3, #2
    19b6:	e7c3      	b.n	1940 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    19b8:	000f      	movs	r7, r1
    19ba:	e7d3      	b.n	1964 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    19bc:	00a3      	lsls	r3, r4, #2
    19be:	191b      	adds	r3, r3, r4
    19c0:	009a      	lsls	r2, r3, #2
    19c2:	4b53      	ldr	r3, [pc, #332]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    19c4:	189b      	adds	r3, r3, r2
    19c6:	3380      	adds	r3, #128	; 0x80
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	2b00      	cmp	r3, #0
    19cc:	d100      	bne.n	19d0 <_usb_d_dev_ep_trans+0xb4>
    19ce:	e077      	b.n	1ac0 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    19d0:	2301      	movs	r3, #1
    19d2:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    19d4:	00a3      	lsls	r3, r4, #2
    19d6:	191b      	adds	r3, r3, r4
    19d8:	009a      	lsls	r2, r3, #2
    19da:	4b4d      	ldr	r3, [pc, #308]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    19dc:	189b      	adds	r3, r3, r2
    19de:	3370      	adds	r3, #112	; 0x70
    19e0:	7ddb      	ldrb	r3, [r3, #23]
		return USB_HALTED;
    19e2:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    19e4:	071b      	lsls	r3, r3, #28
    19e6:	d50c      	bpl.n	1a02 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    19e8:	b005      	add	sp, #20
    19ea:	bc3c      	pop	{r2, r3, r4, r5}
    19ec:	4690      	mov	r8, r2
    19ee:	4699      	mov	r9, r3
    19f0:	46a2      	mov	sl, r4
    19f2:	46ab      	mov	fp, r5
    19f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    19f6:	2300      	movs	r3, #0
    19f8:	4699      	mov	r9, r3
    19fa:	e7eb      	b.n	19d4 <_usb_d_dev_ep_trans+0xb8>
    19fc:	2300      	movs	r3, #0
    19fe:	4699      	mov	r9, r3
    1a00:	e7e8      	b.n	19d4 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    1a02:	a803      	add	r0, sp, #12
    1a04:	4b46      	ldr	r3, [pc, #280]	; (1b20 <_usb_d_dev_ep_trans+0x204>)
    1a06:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1a08:	00a3      	lsls	r3, r4, #2
    1a0a:	191b      	adds	r3, r3, r4
    1a0c:	009a      	lsls	r2, r3, #2
    1a0e:	4b40      	ldr	r3, [pc, #256]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1a10:	189b      	adds	r3, r3, r2
    1a12:	3370      	adds	r3, #112	; 0x70
    1a14:	7ddb      	ldrb	r3, [r3, #23]
    1a16:	065b      	lsls	r3, r3, #25
    1a18:	d444      	bmi.n	1aa4 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    1a1a:	00a3      	lsls	r3, r4, #2
    1a1c:	191b      	adds	r3, r3, r4
    1a1e:	009b      	lsls	r3, r3, #2
    1a20:	4a3b      	ldr	r2, [pc, #236]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1a22:	4693      	mov	fp, r2
    1a24:	449b      	add	fp, r3
    1a26:	2380      	movs	r3, #128	; 0x80
    1a28:	445b      	add	r3, fp
    1a2a:	469a      	mov	sl, r3
    1a2c:	79db      	ldrb	r3, [r3, #7]
    1a2e:	2240      	movs	r2, #64	; 0x40
    1a30:	4313      	orrs	r3, r2
    1a32:	4652      	mov	r2, sl
    1a34:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1a36:	a803      	add	r0, sp, #12
    1a38:	4b3a      	ldr	r3, [pc, #232]	; (1b24 <_usb_d_dev_ep_trans+0x208>)
    1a3a:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1a3c:	465b      	mov	r3, fp
    1a3e:	4642      	mov	r2, r8
    1a40:	6812      	ldr	r2, [r2, #0]
    1a42:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1a44:	4642      	mov	r2, r8
    1a46:	6852      	ldr	r2, [r2, #4]
    1a48:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1a4a:	2300      	movs	r3, #0
    1a4c:	465a      	mov	r2, fp
    1a4e:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1a50:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1a52:	01d2      	lsls	r2, r2, #7
    1a54:	4653      	mov	r3, sl
    1a56:	79d9      	ldrb	r1, [r3, #7]
    1a58:	237f      	movs	r3, #127	; 0x7f
    1a5a:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1a5c:	4649      	mov	r1, r9
    1a5e:	0149      	lsls	r1, r1, #5
    1a60:	4313      	orrs	r3, r2
    1a62:	2220      	movs	r2, #32
    1a64:	4393      	bics	r3, r2
    1a66:	430b      	orrs	r3, r1
    1a68:	4652      	mov	r2, sl
    1a6a:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1a6c:	4643      	mov	r3, r8
    1a6e:	7a5b      	ldrb	r3, [r3, #9]
    1a70:	2200      	movs	r2, #0
    1a72:	2b00      	cmp	r3, #0
    1a74:	d002      	beq.n	1a7c <_usb_d_dev_ep_trans+0x160>
    1a76:	427a      	negs	r2, r7
    1a78:	417a      	adcs	r2, r7
    1a7a:	b2d2      	uxtb	r2, r2
    1a7c:	00a3      	lsls	r3, r4, #2
    1a7e:	191c      	adds	r4, r3, r4
    1a80:	00a4      	lsls	r4, r4, #2
    1a82:	4b23      	ldr	r3, [pc, #140]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1a84:	191b      	adds	r3, r3, r4
    1a86:	3380      	adds	r3, #128	; 0x80
    1a88:	0112      	lsls	r2, r2, #4
    1a8a:	79df      	ldrb	r7, [r3, #7]
    1a8c:	2110      	movs	r1, #16
    1a8e:	438f      	bics	r7, r1
    1a90:	4317      	orrs	r7, r2
    1a92:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1a94:	2e00      	cmp	r6, #0
    1a96:	db0a      	blt.n	1aae <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1a98:	2100      	movs	r1, #0
    1a9a:	0028      	movs	r0, r5
    1a9c:	4b22      	ldr	r3, [pc, #136]	; (1b28 <_usb_d_dev_ep_trans+0x20c>)
    1a9e:	4798      	blx	r3
	return ERR_NONE;
    1aa0:	2000      	movs	r0, #0
    1aa2:	e7a1      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1aa4:	a803      	add	r0, sp, #12
    1aa6:	4b1f      	ldr	r3, [pc, #124]	; (1b24 <_usb_d_dev_ep_trans+0x208>)
    1aa8:	4798      	blx	r3
		return USB_BUSY;
    1aaa:	2001      	movs	r0, #1
    1aac:	e79c      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1aae:	2100      	movs	r1, #0
    1ab0:	0028      	movs	r0, r5
    1ab2:	4b1e      	ldr	r3, [pc, #120]	; (1b2c <_usb_d_dev_ep_trans+0x210>)
    1ab4:	4798      	blx	r3
	return ERR_NONE;
    1ab6:	2000      	movs	r0, #0
    1ab8:	e796      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    1aba:	2012      	movs	r0, #18
    1abc:	4240      	negs	r0, r0
    1abe:	e793      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1ac0:	2013      	movs	r0, #19
    1ac2:	4240      	negs	r0, r0
    1ac4:	e790      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    1ac6:	2012      	movs	r0, #18
    1ac8:	4240      	negs	r0, r0
    1aca:	e78d      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1acc:	2013      	movs	r0, #19
    1ace:	4240      	negs	r0, r0
    1ad0:	e78a      	b.n	19e8 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    1ad2:	4643      	mov	r3, r8
    1ad4:	685a      	ldr	r2, [r3, #4]
    1ad6:	0597      	lsls	r7, r2, #22
    1ad8:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    1ada:	4d0d      	ldr	r5, [pc, #52]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1adc:	3574      	adds	r5, #116	; 0x74
    1ade:	2400      	movs	r4, #0
    1ae0:	e746      	b.n	1970 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1ae2:	4a0b      	ldr	r2, [pc, #44]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1ae4:	3260      	adds	r2, #96	; 0x60
    1ae6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1ae8:	4a0a      	ldr	r2, [pc, #40]	; (1b14 <_usb_d_dev_ep_trans+0x1f8>)
    1aea:	4291      	cmp	r1, r2
    1aec:	d0f1      	beq.n	1ad2 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    1aee:	4d08      	ldr	r5, [pc, #32]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1af0:	3574      	adds	r5, #116	; 0x74
    1af2:	2400      	movs	r4, #0
    1af4:	e734      	b.n	1960 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1af6:	00a3      	lsls	r3, r4, #2
    1af8:	191b      	adds	r3, r3, r4
    1afa:	009a      	lsls	r2, r3, #2
    1afc:	4b04      	ldr	r3, [pc, #16]	; (1b10 <_usb_d_dev_ep_trans+0x1f4>)
    1afe:	189b      	adds	r3, r3, r2
    1b00:	3380      	adds	r3, #128	; 0x80
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d0e1      	beq.n	1acc <_usb_d_dev_ep_trans+0x1b0>
    1b08:	2301      	movs	r3, #1
    1b0a:	4699      	mov	r9, r3
    1b0c:	e762      	b.n	19d4 <_usb_d_dev_ep_trans+0xb8>
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	200000a0 	.word	0x200000a0
    1b14:	000003ff 	.word	0x000003ff
    1b18:	1fffffff 	.word	0x1fffffff
    1b1c:	20007fff 	.word	0x20007fff
    1b20:	000005c5 	.word	0x000005c5
    1b24:	000005d3 	.word	0x000005d3
    1b28:	00001455 	.word	0x00001455
    1b2c:	000012ad 	.word	0x000012ad

00001b30 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1b30:	1e0b      	subs	r3, r1, #0
    1b32:	d008      	beq.n	1b46 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1b34:	2800      	cmp	r0, #0
    1b36:	d008      	beq.n	1b4a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1b38:	2801      	cmp	r0, #1
    1b3a:	d009      	beq.n	1b50 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1b3c:	2802      	cmp	r0, #2
    1b3e:	d106      	bne.n	1b4e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1b40:	4a05      	ldr	r2, [pc, #20]	; (1b58 <_usb_d_dev_register_ep_callback+0x28>)
    1b42:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1b44:	e003      	b.n	1b4e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <_usb_d_dev_register_ep_callback+0x2c>)
    1b48:	e7f4      	b.n	1b34 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1b4a:	4a03      	ldr	r2, [pc, #12]	; (1b58 <_usb_d_dev_register_ep_callback+0x28>)
    1b4c:	6693      	str	r3, [r2, #104]	; 0x68
}
    1b4e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1b50:	4a01      	ldr	r2, [pc, #4]	; (1b58 <_usb_d_dev_register_ep_callback+0x28>)
    1b52:	66d3      	str	r3, [r2, #108]	; 0x6c
    1b54:	e7fb      	b.n	1b4e <_usb_d_dev_register_ep_callback+0x1e>
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	200000a0 	.word	0x200000a0
    1b5c:	0000101d 	.word	0x0000101d

00001b60 <USB_Handler>:

/**
* \brief USB interrupt handler
*/
void USB_Handler(void)
{
    1b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1b62:	4b81      	ldr	r3, [pc, #516]	; (1d68 <USB_Handler+0x208>)
    1b64:	8c1e      	ldrh	r6, [r3, #32]
    1b66:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1b68:	2e00      	cmp	r6, #0
    1b6a:	d003      	beq.n	1b74 <USB_Handler+0x14>
    1b6c:	4c7f      	ldr	r4, [pc, #508]	; (1d6c <USB_Handler+0x20c>)
    1b6e:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1b70:	2500      	movs	r5, #0
    1b72:	e0b9      	b.n	1ce8 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1b74:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1b76:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1b78:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1b7a:	075a      	lsls	r2, r3, #29
    1b7c:	d417      	bmi.n	1bae <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1b7e:	059a      	lsls	r2, r3, #22
    1b80:	d41c      	bmi.n	1bbc <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1b82:	061a      	lsls	r2, r3, #24
    1b84:	d43e      	bmi.n	1c04 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1b86:	2270      	movs	r2, #112	; 0x70
    1b88:	421a      	tst	r2, r3
    1b8a:	d144      	bne.n	1c16 <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1b8c:	071a      	lsls	r2, r3, #28
    1b8e:	d45e      	bmi.n	1c4e <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1b90:	07db      	lsls	r3, r3, #31
    1b92:	d5eb      	bpl.n	1b6c <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1b94:	4b74      	ldr	r3, [pc, #464]	; (1d68 <USB_Handler+0x208>)
    1b96:	4a76      	ldr	r2, [pc, #472]	; (1d70 <USB_Handler+0x210>)
    1b98:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b9a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b9c:	3a92      	subs	r2, #146	; 0x92
    1b9e:	3aff      	subs	r2, #255	; 0xff
    1ba0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1ba2:	4b72      	ldr	r3, [pc, #456]	; (1d6c <USB_Handler+0x20c>)
    1ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1ba6:	2100      	movs	r1, #0
    1ba8:	2004      	movs	r0, #4
    1baa:	4798      	blx	r3
    1bac:	e005      	b.n	1bba <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1bae:	2204      	movs	r2, #4
    1bb0:	4b6d      	ldr	r3, [pc, #436]	; (1d68 <USB_Handler+0x208>)
    1bb2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1bb4:	4b6d      	ldr	r3, [pc, #436]	; (1d6c <USB_Handler+0x20c>)
    1bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1bb8:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bbc:	4b6a      	ldr	r3, [pc, #424]	; (1d68 <USB_Handler+0x208>)
    1bbe:	4a6c      	ldr	r2, [pc, #432]	; (1d70 <USB_Handler+0x210>)
    1bc0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1bc2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1bc4:	3a92      	subs	r2, #146	; 0x92
    1bc6:	3aff      	subs	r2, #255	; 0xff
    1bc8:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1bca:	4b68      	ldr	r3, [pc, #416]	; (1d6c <USB_Handler+0x20c>)
    1bcc:	891b      	ldrh	r3, [r3, #8]
    1bce:	071b      	lsls	r3, r3, #28
    1bd0:	0f1b      	lsrs	r3, r3, #28
    1bd2:	2b03      	cmp	r3, #3
    1bd4:	d00c      	beq.n	1bf0 <USB_Handler+0x90>
    1bd6:	4b65      	ldr	r3, [pc, #404]	; (1d6c <USB_Handler+0x20c>)
    1bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1bda:	071b      	lsls	r3, r3, #28
    1bdc:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1bde:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1be0:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1be2:	2b03      	cmp	r3, #3
    1be4:	d005      	beq.n	1bf2 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1be6:	4b61      	ldr	r3, [pc, #388]	; (1d6c <USB_Handler+0x20c>)
    1be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1bea:	2003      	movs	r0, #3
    1bec:	4798      	blx	r3
    1bee:	e7e4      	b.n	1bba <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1bf0:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1bf2:	0152      	lsls	r2, r2, #5
    1bf4:	4b5d      	ldr	r3, [pc, #372]	; (1d6c <USB_Handler+0x20c>)
    1bf6:	189b      	adds	r3, r3, r2
    1bf8:	8919      	ldrh	r1, [r3, #8]
    1bfa:	0449      	lsls	r1, r1, #17
    1bfc:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1bfe:	2200      	movs	r2, #0
    1c00:	811a      	strh	r2, [r3, #8]
    1c02:	e7f0      	b.n	1be6 <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c04:	2280      	movs	r2, #128	; 0x80
    1c06:	4b58      	ldr	r3, [pc, #352]	; (1d68 <USB_Handler+0x208>)
    1c08:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1c0a:	4b58      	ldr	r3, [pc, #352]	; (1d6c <USB_Handler+0x20c>)
    1c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c0e:	2100      	movs	r1, #0
    1c10:	2005      	movs	r0, #5
    1c12:	4798      	blx	r3
    1c14:	e7d1      	b.n	1bba <USB_Handler+0x5a>
    1c16:	4b54      	ldr	r3, [pc, #336]	; (1d68 <USB_Handler+0x208>)
    1c18:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c1a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c1c:	4a54      	ldr	r2, [pc, #336]	; (1d70 <USB_Handler+0x210>)
    1c1e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1c20:	4b54      	ldr	r3, [pc, #336]	; (1d74 <USB_Handler+0x214>)
    1c22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1c24:	069b      	lsls	r3, r3, #26
    1c26:	d40c      	bmi.n	1c42 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1c28:	4952      	ldr	r1, [pc, #328]	; (1d74 <USB_Handler+0x214>)
	tmp &= mask;
    1c2a:	3a32      	subs	r2, #50	; 0x32
    1c2c:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1c2e:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1c30:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    1c32:	2bd0      	cmp	r3, #208	; 0xd0
    1c34:	d1fb      	bne.n	1c2e <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1c36:	4b4d      	ldr	r3, [pc, #308]	; (1d6c <USB_Handler+0x20c>)
    1c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c3a:	2100      	movs	r1, #0
    1c3c:	2002      	movs	r0, #2
    1c3e:	4798      	blx	r3
    1c40:	e7bb      	b.n	1bba <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1c42:	494c      	ldr	r1, [pc, #304]	; (1d74 <USB_Handler+0x214>)
	tmp &= mask;
    1c44:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1c46:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    1c48:	421a      	tst	r2, r3
    1c4a:	d0fc      	beq.n	1c46 <USB_Handler+0xe6>
    1c4c:	e7f3      	b.n	1c36 <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1c4e:	4b46      	ldr	r3, [pc, #280]	; (1d68 <USB_Handler+0x208>)
    1c50:	2100      	movs	r1, #0
    1c52:	2280      	movs	r2, #128	; 0x80
    1c54:	0052      	lsls	r2, r2, #1
    1c56:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c58:	3af8      	subs	r2, #248	; 0xf8
    1c5a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c5c:	3268      	adds	r2, #104	; 0x68
    1c5e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c60:	4a43      	ldr	r2, [pc, #268]	; (1d70 <USB_Handler+0x210>)
    1c62:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1c64:	4b44      	ldr	r3, [pc, #272]	; (1d78 <USB_Handler+0x218>)
    1c66:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1c68:	4b40      	ldr	r3, [pc, #256]	; (1d6c <USB_Handler+0x20c>)
    1c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c6c:	2100      	movs	r1, #0
    1c6e:	2001      	movs	r0, #1
    1c70:	4798      	blx	r3
    1c72:	e7a2      	b.n	1bba <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c74:	06cb      	lsls	r3, r1, #27
    1c76:	d407      	bmi.n	1c88 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1c78:	064b      	lsls	r3, r1, #25
    1c7a:	d408      	bmi.n	1c8e <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1c7c:	068b      	lsls	r3, r1, #26
    1c7e:	d52e      	bpl.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1c80:	2100      	movs	r1, #0
    1c82:	4b3e      	ldr	r3, [pc, #248]	; (1d7c <USB_Handler+0x21c>)
    1c84:	4798      	blx	r3
    1c86:	e02a      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    1c88:	4b3d      	ldr	r3, [pc, #244]	; (1d80 <USB_Handler+0x220>)
    1c8a:	4798      	blx	r3
    1c8c:	e027      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1c8e:	2101      	movs	r1, #1
    1c90:	4b3a      	ldr	r3, [pc, #232]	; (1d7c <USB_Handler+0x21c>)
    1c92:	4798      	blx	r3
    1c94:	e023      	b.n	1cde <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1c96:	064a      	lsls	r2, r1, #25
    1c98:	d40e      	bmi.n	1cb8 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1c9a:	070a      	lsls	r2, r1, #28
    1c9c:	d410      	bmi.n	1cc0 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1c9e:	078a      	lsls	r2, r1, #30
    1ca0:	d412      	bmi.n	1cc8 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ca2:	2207      	movs	r2, #7
    1ca4:	4013      	ands	r3, r2
    1ca6:	2b01      	cmp	r3, #1
    1ca8:	d119      	bne.n	1cde <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1caa:	074b      	lsls	r3, r1, #29
    1cac:	d410      	bmi.n	1cd0 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1cae:	06cb      	lsls	r3, r1, #27
    1cb0:	d515      	bpl.n	1cde <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1cb2:	4b33      	ldr	r3, [pc, #204]	; (1d80 <USB_Handler+0x220>)
    1cb4:	4798      	blx	r3
    1cb6:	e012      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1cb8:	2101      	movs	r1, #1
    1cba:	4b30      	ldr	r3, [pc, #192]	; (1d7c <USB_Handler+0x21c>)
    1cbc:	4798      	blx	r3
    1cbe:	e00e      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    1cc0:	2101      	movs	r1, #1
    1cc2:	4b30      	ldr	r3, [pc, #192]	; (1d84 <USB_Handler+0x224>)
    1cc4:	4798      	blx	r3
    1cc6:	e00a      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    1cc8:	2101      	movs	r1, #1
    1cca:	4b2f      	ldr	r3, [pc, #188]	; (1d88 <USB_Handler+0x228>)
    1ccc:	4798      	blx	r3
    1cce:	e006      	b.n	1cde <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    1cd0:	2100      	movs	r1, #0
    1cd2:	4b2c      	ldr	r3, [pc, #176]	; (1d84 <USB_Handler+0x224>)
    1cd4:	4798      	blx	r3
    1cd6:	e002      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1cd8:	2100      	movs	r1, #0
    1cda:	4b28      	ldr	r3, [pc, #160]	; (1d7c <USB_Handler+0x21c>)
    1cdc:	4798      	blx	r3
    1cde:	3501      	adds	r5, #1
    1ce0:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1ce2:	2d09      	cmp	r5, #9
    1ce4:	d100      	bne.n	1ce8 <USB_Handler+0x188>
    1ce6:	e768      	b.n	1bba <USB_Handler+0x5a>
    1ce8:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1cea:	7ca1      	ldrb	r1, [r4, #18]
    1cec:	29ff      	cmp	r1, #255	; 0xff
    1cee:	d0f6      	beq.n	1cde <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    1cf0:	230f      	movs	r3, #15
    1cf2:	400b      	ands	r3, r1
    1cf4:	2101      	movs	r1, #1
    1cf6:	4099      	lsls	r1, r3
    1cf8:	420e      	tst	r6, r1
    1cfa:	d0f0      	beq.n	1cde <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1cfc:	0159      	lsls	r1, r3, #5
    1cfe:	4f23      	ldr	r7, [pc, #140]	; (1d8c <USB_Handler+0x22c>)
    1d00:	46bc      	mov	ip, r7
    1d02:	4461      	add	r1, ip
    1d04:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1d06:	015b      	lsls	r3, r3, #5
    1d08:	4f21      	ldr	r7, [pc, #132]	; (1d90 <USB_Handler+0x230>)
    1d0a:	46bc      	mov	ip, r7
    1d0c:	4463      	add	r3, ip
    1d0e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1d10:	4019      	ands	r1, r3
	if (flags) {
    1d12:	d0e4      	beq.n	1cde <USB_Handler+0x17e>
		if (!_usb_d_dev_ep_is_busy(ept)) {
    1d14:	00ab      	lsls	r3, r5, #2
    1d16:	195a      	adds	r2, r3, r5
    1d18:	0092      	lsls	r2, r2, #2
    1d1a:	4b14      	ldr	r3, [pc, #80]	; (1d6c <USB_Handler+0x20c>)
    1d1c:	469c      	mov	ip, r3
    1d1e:	4462      	add	r2, ip
    1d20:	3270      	adds	r2, #112	; 0x70
    1d22:	7dd3      	ldrb	r3, [r2, #23]
    1d24:	065a      	lsls	r2, r3, #25
    1d26:	d5a5      	bpl.n	1c74 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1d28:	b25a      	sxtb	r2, r3
    1d2a:	2a00      	cmp	r2, #0
    1d2c:	dbb3      	blt.n	1c96 <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1d2e:	068a      	lsls	r2, r1, #26
    1d30:	d4d2      	bmi.n	1cd8 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1d32:	074a      	lsls	r2, r1, #29
    1d34:	d40c      	bmi.n	1d50 <USB_Handler+0x1f0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1d36:	07ca      	lsls	r2, r1, #31
    1d38:	d40e      	bmi.n	1d58 <USB_Handler+0x1f8>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1d3a:	2207      	movs	r2, #7
    1d3c:	4013      	ands	r3, r2
    1d3e:	2b01      	cmp	r3, #1
    1d40:	d1cd      	bne.n	1cde <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1d42:	070b      	lsls	r3, r1, #28
    1d44:	d40c      	bmi.n	1d60 <USB_Handler+0x200>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d46:	06cb      	lsls	r3, r1, #27
    1d48:	d5c9      	bpl.n	1cde <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1d4a:	4b0d      	ldr	r3, [pc, #52]	; (1d80 <USB_Handler+0x220>)
    1d4c:	4798      	blx	r3
    1d4e:	e7c6      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    1d50:	2100      	movs	r1, #0
    1d52:	4b0c      	ldr	r3, [pc, #48]	; (1d84 <USB_Handler+0x224>)
    1d54:	4798      	blx	r3
    1d56:	e7c2      	b.n	1cde <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    1d58:	2101      	movs	r1, #1
    1d5a:	4b0e      	ldr	r3, [pc, #56]	; (1d94 <USB_Handler+0x234>)
    1d5c:	4798      	blx	r3
    1d5e:	e7be      	b.n	1cde <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    1d60:	2101      	movs	r1, #1
    1d62:	4b08      	ldr	r3, [pc, #32]	; (1d84 <USB_Handler+0x224>)
    1d64:	4798      	blx	r3
    1d66:	e7ba      	b.n	1cde <USB_Handler+0x17e>
    1d68:	41005000 	.word	0x41005000
    1d6c:	200000a0 	.word	0x200000a0
    1d70:	00000201 	.word	0x00000201
    1d74:	40000800 	.word	0x40000800
    1d78:	00001269 	.word	0x00001269
    1d7c:	000010d5 	.word	0x000010d5
    1d80:	00001021 	.word	0x00001021
    1d84:	00001169 	.word	0x00001169
    1d88:	000012ad 	.word	0x000012ad
    1d8c:	41005100 	.word	0x41005100
    1d90:	41005109 	.word	0x41005109
    1d94:	00001455 	.word	0x00001455

00001d98 <main>:
#include <hal_gpio.h>
#include <hal_delay.h>
#include "./app/app.h"

int main(void)
{
    1d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9a:	46de      	mov	lr, fp
    1d9c:	4657      	mov	r7, sl
    1d9e:	464e      	mov	r6, r9
    1da0:	b5c0      	push	{r6, r7, lr}
	// Initializes MCU, MCU drivers and middleware
	atmel_start_init();
    1da2:	4b10      	ldr	r3, [pc, #64]	; (1de4 <main+0x4c>)
    1da4:	4798      	blx	r3

    // Initialize application and application drivers
    app_init();
    1da6:	4b10      	ldr	r3, [pc, #64]	; (1de8 <main+0x50>)
    1da8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1daa:	24c0      	movs	r4, #192	; 0xc0
    1dac:	05e4      	lsls	r4, r4, #23
    1dae:	2398      	movs	r3, #152	; 0x98
    1db0:	469b      	mov	fp, r3
    1db2:	3b90      	subs	r3, #144	; 0x90
    1db4:	4699      	mov	r9, r3
    1db6:	469a      	mov	sl, r3
    1db8:	2680      	movs	r6, #128	; 0x80
    1dba:	02b6      	lsls	r6, r6, #10
    1dbc:	61a6      	str	r6, [r4, #24]
    1dbe:	465b      	mov	r3, fp
    1dc0:	4652      	mov	r2, sl
    1dc2:	50e2      	str	r2, [r4, r3]
    1dc4:	2780      	movs	r7, #128	; 0x80
    1dc6:	053f      	lsls	r7, r7, #20
    1dc8:	61a7      	str	r7, [r4, #24]
	while (1) 
    {
        gpio_set_pin_level(PIN_SPI_CTRL_SCK, true);
        gpio_set_pin_level(PIN_LED_RX, true);
        gpio_set_pin_level(PIN_LED_TX, true);
        delay_ms(1000);
    1dca:	20fa      	movs	r0, #250	; 0xfa
    1dcc:	0080      	lsls	r0, r0, #2
    1dce:	4d07      	ldr	r5, [pc, #28]	; (1dec <main+0x54>)
    1dd0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dd2:	6166      	str	r6, [r4, #20]
    1dd4:	2394      	movs	r3, #148	; 0x94
    1dd6:	464a      	mov	r2, r9
    1dd8:	50e2      	str	r2, [r4, r3]
    1dda:	6167      	str	r7, [r4, #20]
        gpio_set_pin_level(PIN_SPI_CTRL_SCK, false);
        gpio_set_pin_level(PIN_LED_RX, false);
        gpio_set_pin_level(PIN_LED_TX, false);
        delay_ms(1000);
    1ddc:	20fa      	movs	r0, #250	; 0xfa
    1dde:	0080      	lsls	r0, r0, #2
    1de0:	47a8      	blx	r5
    1de2:	e7e9      	b.n	1db8 <main+0x20>
    1de4:	00000119 	.word	0x00000119
    1de8:	00000115 	.word	0x00000115
    1dec:	000005f5 	.word	0x000005f5

00001df0 <__libc_init_array>:
    1df0:	b570      	push	{r4, r5, r6, lr}
    1df2:	2600      	movs	r6, #0
    1df4:	4d0c      	ldr	r5, [pc, #48]	; (1e28 <__libc_init_array+0x38>)
    1df6:	4c0d      	ldr	r4, [pc, #52]	; (1e2c <__libc_init_array+0x3c>)
    1df8:	1b64      	subs	r4, r4, r5
    1dfa:	10a4      	asrs	r4, r4, #2
    1dfc:	42a6      	cmp	r6, r4
    1dfe:	d109      	bne.n	1e14 <__libc_init_array+0x24>
    1e00:	2600      	movs	r6, #0
    1e02:	f000 f86d 	bl	1ee0 <_init>
    1e06:	4d0a      	ldr	r5, [pc, #40]	; (1e30 <__libc_init_array+0x40>)
    1e08:	4c0a      	ldr	r4, [pc, #40]	; (1e34 <__libc_init_array+0x44>)
    1e0a:	1b64      	subs	r4, r4, r5
    1e0c:	10a4      	asrs	r4, r4, #2
    1e0e:	42a6      	cmp	r6, r4
    1e10:	d105      	bne.n	1e1e <__libc_init_array+0x2e>
    1e12:	bd70      	pop	{r4, r5, r6, pc}
    1e14:	00b3      	lsls	r3, r6, #2
    1e16:	58eb      	ldr	r3, [r5, r3]
    1e18:	4798      	blx	r3
    1e1a:	3601      	adds	r6, #1
    1e1c:	e7ee      	b.n	1dfc <__libc_init_array+0xc>
    1e1e:	00b3      	lsls	r3, r6, #2
    1e20:	58eb      	ldr	r3, [r5, r3]
    1e22:	4798      	blx	r3
    1e24:	3601      	adds	r6, #1
    1e26:	e7f2      	b.n	1e0e <__libc_init_array+0x1e>
    1e28:	00001eec 	.word	0x00001eec
    1e2c:	00001eec 	.word	0x00001eec
    1e30:	00001eec 	.word	0x00001eec
    1e34:	00001ef0 	.word	0x00001ef0

00001e38 <memcpy>:
    1e38:	2300      	movs	r3, #0
    1e3a:	b510      	push	{r4, lr}
    1e3c:	429a      	cmp	r2, r3
    1e3e:	d100      	bne.n	1e42 <memcpy+0xa>
    1e40:	bd10      	pop	{r4, pc}
    1e42:	5ccc      	ldrb	r4, [r1, r3]
    1e44:	54c4      	strb	r4, [r0, r3]
    1e46:	3301      	adds	r3, #1
    1e48:	e7f8      	b.n	1e3c <memcpy+0x4>

00001e4a <memset>:
    1e4a:	0003      	movs	r3, r0
    1e4c:	1882      	adds	r2, r0, r2
    1e4e:	4293      	cmp	r3, r2
    1e50:	d100      	bne.n	1e54 <memset+0xa>
    1e52:	4770      	bx	lr
    1e54:	7019      	strb	r1, [r3, #0]
    1e56:	3301      	adds	r3, #1
    1e58:	e7f9      	b.n	1e4e <memset+0x4>
    1e5a:	0000      	movs	r0, r0
    1e5c:	682f2e2e 	.word	0x682f2e2e
    1e60:	732f6c61 	.word	0x732f6c61
    1e64:	682f6372 	.word	0x682f6372
    1e68:	735f6c61 	.word	0x735f6c61
    1e6c:	6d5f6970 	.word	0x6d5f6970
    1e70:	6e79735f 	.word	0x6e79735f
    1e74:	00632e63 	.word	0x00632e63
    1e78:	682f2e2e 	.word	0x682f2e2e
    1e7c:	732f6c61 	.word	0x732f6c61
    1e80:	682f6372 	.word	0x682f6372
    1e84:	755f6c61 	.word	0x755f6c61
    1e88:	74726173 	.word	0x74726173
    1e8c:	6e79735f 	.word	0x6e79735f
    1e90:	00632e63 	.word	0x00632e63

00001e94 <_i2cms>:
	...

00001eac <sercomspi_regs>:
    1eac:	0030000c 00020000 00000000 01ff0017     ..0.............
    1ebc:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    1ecc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    1edc:	00002000                                . ..

00001ee0 <_init>:
    1ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ee6:	bc08      	pop	{r3}
    1ee8:	469e      	mov	lr, r3
    1eea:	4770      	bx	lr

00001eec <__init_array_start>:
    1eec:	000000dd 	.word	0x000000dd

00001ef0 <_fini>:
    1ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ef6:	bc08      	pop	{r3}
    1ef8:	469e      	mov	lr, r3
    1efa:	4770      	bx	lr

00001efc <__fini_array_start>:
    1efc:	000000b5 	.word	0x000000b5
