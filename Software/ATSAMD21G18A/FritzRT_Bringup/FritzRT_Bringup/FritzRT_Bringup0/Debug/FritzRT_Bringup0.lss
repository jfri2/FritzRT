
FritzRT_Bringup0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d9c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011d9c  2**0
                  CONTENTS
  2 .bss          000002a4  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002004  200002a4  200002a4  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011d9c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00011dc4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026467  00000000  00000000  00011e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002480  00000000  00000000  00038284  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ef92  00000000  00000000  0003a704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009a8  00000000  00000000  00049696  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010c0  00000000  00000000  0004a03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000168f5  00000000  00000000  0004b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c25d  00000000  00000000  000619f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007bdd6  00000000  00000000  0006dc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001aa0  00000000  00000000  000e9a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 22 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .". %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	49 1a 00 00 21 01 00 00 21 01 00 00 21 01 00 00     I...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	00001d9c 	.word	0x00001d9c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	00001d9c 	.word	0x00001d9c
     10c:	00001d9c 	.word	0x00001d9c
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000405 	.word	0x00000405

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00001d9c 	.word	0x00001d9c
     1d4:	20000000 	.word	0x20000000
     1d8:	20000000 	.word	0x20000000
     1dc:	20000004 	.word	0x20000004
     1e0:	20000000 	.word	0x20000000
     1e4:	200002a4 	.word	0x200002a4
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001c8d 	.word	0x00001c8d
     204:	00001c81 	.word	0x00001c81

00000208 <CTRL_SPI_PORT_init>:
struct spi_m_sync_descriptor CTRL_SPI;

struct usart_sync_descriptor USART_0;

void CTRL_SPI_PORT_init(void)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     20a:	4b15      	ldr	r3, [pc, #84]	; (260 <CTRL_SPI_PORT_init+0x58>)
     20c:	2150      	movs	r1, #80	; 0x50
     20e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     210:	2701      	movs	r7, #1
     212:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     214:	2401      	movs	r4, #1
     216:	4322      	orrs	r2, r4
     218:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     21a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     21c:	3918      	subs	r1, #24
     21e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     220:	200f      	movs	r0, #15
     222:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     224:	380d      	subs	r0, #13
     226:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     228:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     22a:	304f      	adds	r0, #79	; 0x4f
     22c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     22e:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     230:	4322      	orrs	r2, r4
     232:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     234:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     236:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     238:	260f      	movs	r6, #15
     23a:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     23c:	2520      	movs	r5, #32
     23e:	4328      	orrs	r0, r5
     240:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     242:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     244:	2253      	movs	r2, #83	; 0x53
     246:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     248:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     24a:	4321      	orrs	r1, r4
     24c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     24e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     250:	2139      	movs	r1, #57	; 0x39
     252:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     254:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     256:	432a      	orrs	r2, r5
     258:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     25a:	545a      	strb	r2, [r3, r1]
	gpio_set_pin_function(PIN_SPI_CTRL_MOSI, PINMUX_PA16C_SERCOM1_PAD0);

	gpio_set_pin_function(PIN_SPI_CTRL_SCK, PINMUX_PA17C_SERCOM1_PAD1);

	gpio_set_pin_function(PIN_SPI_CTRL_MISO, PINMUX_PA19C_SERCOM1_PAD3);
}
     25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	41004400 	.word	0x41004400

00000264 <CTRL_SPI_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     264:	4a04      	ldr	r2, [pc, #16]	; (278 <CTRL_SPI_CLOCK_init+0x14>)
     266:	6a13      	ldr	r3, [r2, #32]
     268:	2108      	movs	r1, #8
     26a:	430b      	orrs	r3, r1
     26c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     26e:	4a03      	ldr	r2, [pc, #12]	; (27c <CTRL_SPI_CLOCK_init+0x18>)
     270:	4b03      	ldr	r3, [pc, #12]	; (280 <CTRL_SPI_CLOCK_init+0x1c>)
     272:	805a      	strh	r2, [r3, #2]

void CTRL_SPI_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400
     27c:	00004015 	.word	0x00004015
     280:	40000c00 	.word	0x40000c00

00000284 <CTRL_SPI_init>:

void CTRL_SPI_init(void)
{
     284:	b510      	push	{r4, lr}
	CTRL_SPI_CLOCK_init();
     286:	4b04      	ldr	r3, [pc, #16]	; (298 <CTRL_SPI_init+0x14>)
     288:	4798      	blx	r3
	spi_m_sync_init(&CTRL_SPI, SERCOM1);
     28a:	4904      	ldr	r1, [pc, #16]	; (29c <CTRL_SPI_init+0x18>)
     28c:	4804      	ldr	r0, [pc, #16]	; (2a0 <CTRL_SPI_init+0x1c>)
     28e:	4b05      	ldr	r3, [pc, #20]	; (2a4 <CTRL_SPI_init+0x20>)
     290:	4798      	blx	r3
	CTRL_SPI_PORT_init();
     292:	4b05      	ldr	r3, [pc, #20]	; (2a8 <CTRL_SPI_init+0x24>)
     294:	4798      	blx	r3
}
     296:	bd10      	pop	{r4, pc}
     298:	00000265 	.word	0x00000265
     29c:	42000c00 	.word	0x42000c00
     2a0:	20000284 	.word	0x20000284
     2a4:	00000571 	.word	0x00000571
     2a8:	00000209 	.word	0x00000209

000002ac <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     2ac:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ae:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <USART_0_PORT_init+0x3c>)
     2b0:	224a      	movs	r2, #74	; 0x4a
     2b2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b4:	2501      	movs	r5, #1
     2b6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b8:	2401      	movs	r4, #1
     2ba:	4321      	orrs	r1, r4
     2bc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2c0:	2035      	movs	r0, #53	; 0x35
     2c2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c4:	3a3b      	subs	r2, #59	; 0x3b
     2c6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2c8:	3a0c      	subs	r2, #12
     2ca:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2cc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ce:	214b      	movs	r1, #75	; 0x4b
     2d0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d4:	4322      	orrs	r2, r4
     2d6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2d8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2da:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2dc:	393c      	subs	r1, #60	; 0x3c
     2de:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2e0:	3121      	adds	r1, #33	; 0x21
     2e2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2e4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PIN_UART_TX, PINMUX_PA10D_SERCOM2_PAD2);

	gpio_set_pin_function(PIN_UART_RX, PINMUX_PA11D_SERCOM2_PAD3);
}
     2e6:	bd30      	pop	{r4, r5, pc}
     2e8:	41004400 	.word	0x41004400

000002ec <USART_0_CLOCK_init>:
     2ec:	4a04      	ldr	r2, [pc, #16]	; (300 <USART_0_CLOCK_init+0x14>)
     2ee:	6a13      	ldr	r3, [r2, #32]
     2f0:	2110      	movs	r1, #16
     2f2:	430b      	orrs	r3, r1
     2f4:	6213      	str	r3, [r2, #32]
     2f6:	4a03      	ldr	r2, [pc, #12]	; (304 <USART_0_CLOCK_init+0x18>)
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <USART_0_CLOCK_init+0x1c>)
     2fa:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     2fc:	4770      	bx	lr
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	40000400 	.word	0x40000400
     304:	00004016 	.word	0x00004016
     308:	40000c00 	.word	0x40000c00

0000030c <USART_0_init>:

void USART_0_init(void)
{
     30c:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     30e:	4b05      	ldr	r3, [pc, #20]	; (324 <USART_0_init+0x18>)
     310:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     312:	2200      	movs	r2, #0
     314:	4904      	ldr	r1, [pc, #16]	; (328 <USART_0_init+0x1c>)
     316:	4805      	ldr	r0, [pc, #20]	; (32c <USART_0_init+0x20>)
     318:	4b05      	ldr	r3, [pc, #20]	; (330 <USART_0_init+0x24>)
     31a:	4798      	blx	r3
	USART_0_PORT_init();
     31c:	4b05      	ldr	r3, [pc, #20]	; (334 <USART_0_init+0x28>)
     31e:	4798      	blx	r3
}
     320:	bd10      	pop	{r4, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	000002ed 	.word	0x000002ed
     328:	42001000 	.word	0x42001000
     32c:	20000298 	.word	0x20000298
     330:	0000075d 	.word	0x0000075d
     334:	000002ad 	.word	0x000002ad

00000338 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
     338:	b5f0      	push	{r4, r5, r6, r7, lr}
     33a:	46c6      	mov	lr, r8
     33c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     33e:	24c0      	movs	r4, #192	; 0xc0
     340:	05e4      	lsls	r4, r4, #23
     342:	2280      	movs	r2, #128	; 0x80
     344:	0452      	lsls	r2, r2, #17
     346:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     348:	4b1a      	ldr	r3, [pc, #104]	; (3b4 <USB_0_PORT_init+0x7c>)
     34a:	2780      	movs	r7, #128	; 0x80
     34c:	05ff      	lsls	r7, r7, #23
     34e:	629f      	str	r7, [r3, #40]	; 0x28
     350:	4919      	ldr	r1, [pc, #100]	; (3b8 <USB_0_PORT_init+0x80>)
     352:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     354:	6162      	str	r2, [r4, #20]
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     356:	2058      	movs	r0, #88	; 0x58
     358:	5c19      	ldrb	r1, [r3, r0]
     35a:	2204      	movs	r2, #4
     35c:	4690      	mov	r8, r2
     35e:	4391      	bics	r1, r2
     360:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     362:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     364:	2601      	movs	r6, #1
     366:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     368:	2501      	movs	r5, #1
     36a:	4329      	orrs	r1, r5
     36c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     36e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     370:	381c      	subs	r0, #28
     372:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     374:	320b      	adds	r2, #11
     376:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     378:	3a09      	subs	r2, #9
     37a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     37c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     37e:	2180      	movs	r1, #128	; 0x80
     380:	0489      	lsls	r1, r1, #18
     382:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     384:	629f      	str	r7, [r3, #40]	; 0x28
     386:	4f0d      	ldr	r7, [pc, #52]	; (3bc <USB_0_PORT_init+0x84>)
     388:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     38c:	2159      	movs	r1, #89	; 0x59
     38e:	5c5c      	ldrb	r4, [r3, r1]
     390:	4642      	mov	r2, r8
     392:	4394      	bics	r4, r2
     394:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     396:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     398:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     39a:	432a      	orrs	r2, r5
     39c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     39e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3a2:	394a      	subs	r1, #74	; 0x4a
     3a4:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3a6:	3151      	adds	r1, #81	; 0x51
     3a8:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3aa:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     3ac:	bc04      	pop	{r2}
     3ae:	4690      	mov	r8, r2
     3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	41004400 	.word	0x41004400
     3b8:	c0000100 	.word	0xc0000100
     3bc:	c0000200 	.word	0xc0000200

000003c0 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     3c0:	4b06      	ldr	r3, [pc, #24]	; (3dc <USB_0_CLOCK_init+0x1c>)
     3c2:	69da      	ldr	r2, [r3, #28]
     3c4:	2120      	movs	r1, #32
     3c6:	430a      	orrs	r2, r1
     3c8:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     3ca:	695a      	ldr	r2, [r3, #20]
     3cc:	3120      	adds	r1, #32
     3ce:	430a      	orrs	r2, r1
     3d0:	615a      	str	r2, [r3, #20]
     3d2:	4a03      	ldr	r2, [pc, #12]	; (3e0 <USB_0_CLOCK_init+0x20>)
     3d4:	4b03      	ldr	r3, [pc, #12]	; (3e4 <USB_0_CLOCK_init+0x24>)
     3d6:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     3d8:	4770      	bx	lr
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	40000400 	.word	0x40000400
     3e0:	00004006 	.word	0x00004006
     3e4:	40000c00 	.word	0x40000c00

000003e8 <USB_0_init>:

void USB_0_init(void)
{
     3e8:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     3ea:	4b03      	ldr	r3, [pc, #12]	; (3f8 <USB_0_init+0x10>)
     3ec:	4798      	blx	r3
	usb_d_init();
     3ee:	4b03      	ldr	r3, [pc, #12]	; (3fc <USB_0_init+0x14>)
     3f0:	4798      	blx	r3
	USB_0_PORT_init();
     3f2:	4b03      	ldr	r3, [pc, #12]	; (400 <USB_0_init+0x18>)
     3f4:	4798      	blx	r3
}
     3f6:	bd10      	pop	{r4, pc}
     3f8:	000003c1 	.word	0x000003c1
     3fc:	00000a19 	.word	0x00000a19
     400:	00000339 	.word	0x00000339

00000404 <system_init>:

void system_init(void)
{
     404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     406:	4b44      	ldr	r3, [pc, #272]	; (518 <system_init+0x114>)
     408:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     40a:	22c0      	movs	r2, #192	; 0xc0
     40c:	05d2      	lsls	r2, r2, #23
     40e:	2540      	movs	r5, #64	; 0x40
     410:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     412:	4b42      	ldr	r3, [pc, #264]	; (51c <system_init+0x118>)
     414:	4942      	ldr	r1, [pc, #264]	; (520 <system_init+0x11c>)
     416:	6299      	str	r1, [r3, #40]	; 0x28
     418:	4e42      	ldr	r6, [pc, #264]	; (524 <system_init+0x120>)
     41a:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     41c:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     41e:	2046      	movs	r0, #70	; 0x46
     420:	5c19      	ldrb	r1, [r3, r0]
     422:	2404      	movs	r4, #4
     424:	4321      	orrs	r1, r4
     426:	b2c9      	uxtb	r1, r1
     428:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     42a:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42c:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     42e:	2101      	movs	r1, #1
     430:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	2780      	movs	r7, #128	; 0x80
     436:	007f      	lsls	r7, r7, #1
     438:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43a:	483b      	ldr	r0, [pc, #236]	; (528 <system_init+0x124>)
     43c:	6298      	str	r0, [r3, #40]	; 0x28
     43e:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     440:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     442:	2548      	movs	r5, #72	; 0x48
     444:	5d58      	ldrb	r0, [r3, r5]
     446:	4320      	orrs	r0, r4
     448:	b2c0      	uxtb	r0, r0
     44a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     44c:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     44e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     450:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     452:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     454:	3701      	adds	r7, #1
     456:	37ff      	adds	r7, #255	; 0xff
     458:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     45a:	4834      	ldr	r0, [pc, #208]	; (52c <system_init+0x128>)
     45c:	6298      	str	r0, [r3, #40]	; 0x28
     45e:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     460:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     462:	3501      	adds	r5, #1
     464:	5d58      	ldrb	r0, [r3, r5]
     466:	4320      	orrs	r0, r4
     468:	b2c0      	uxtb	r0, r0
     46a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     46c:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     470:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     472:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     474:	2080      	movs	r0, #128	; 0x80
     476:	02c0      	lsls	r0, r0, #11
     478:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	2680      	movs	r6, #128	; 0x80
     47c:	05f6      	lsls	r6, r6, #23
     47e:	629e      	str	r6, [r3, #40]	; 0x28
     480:	4d2b      	ldr	r5, [pc, #172]	; (530 <system_init+0x12c>)
     482:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     484:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     486:	2552      	movs	r5, #82	; 0x52
     488:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     48a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     48c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     48e:	2780      	movs	r7, #128	; 0x80
     490:	037f      	lsls	r7, r7, #13
     492:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     494:	4827      	ldr	r0, [pc, #156]	; (534 <system_init+0x130>)
     496:	4684      	mov	ip, r0
     498:	6298      	str	r0, [r3, #40]	; 0x28
     49a:	4827      	ldr	r0, [pc, #156]	; (538 <system_init+0x134>)
     49c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49e:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4a0:	3502      	adds	r5, #2
     4a2:	5d58      	ldrb	r0, [r3, r5]
     4a4:	4320      	orrs	r0, r4
     4a6:	b2c0      	uxtb	r0, r0
     4a8:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4aa:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ac:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ae:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b0:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4b2:	2780      	movs	r7, #128	; 0x80
     4b4:	03bf      	lsls	r7, r7, #14
     4b6:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b8:	4660      	mov	r0, ip
     4ba:	6298      	str	r0, [r3, #40]	; 0x28
     4bc:	481f      	ldr	r0, [pc, #124]	; (53c <system_init+0x138>)
     4be:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4c0:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4c2:	3501      	adds	r5, #1
     4c4:	5d58      	ldrb	r0, [r3, r5]
     4c6:	4320      	orrs	r0, r4
     4c8:	b2c0      	uxtb	r0, r0
     4ca:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4cc:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4d4:	2080      	movs	r0, #128	; 0x80
     4d6:	0500      	lsls	r0, r0, #20
     4d8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4da:	629e      	str	r6, [r3, #40]	; 0x28
     4dc:	4c18      	ldr	r4, [pc, #96]	; (540 <system_init+0x13c>)
     4de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e0:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e2:	245b      	movs	r4, #91	; 0x5b
     4e4:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e8:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ea:	2008      	movs	r0, #8
     4ec:	342d      	adds	r4, #45	; 0x2d
     4ee:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f0:	3420      	adds	r4, #32
     4f2:	4d14      	ldr	r5, [pc, #80]	; (544 <system_init+0x140>)
     4f4:	511d      	str	r5, [r3, r4]
     4f6:	25c0      	movs	r5, #192	; 0xc0
     4f8:	062d      	lsls	r5, r5, #24
     4fa:	511d      	str	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4fc:	3c10      	subs	r4, #16
     4fe:	5110      	str	r0, [r2, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	30bb      	adds	r0, #187	; 0xbb
     502:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     506:	541a      	strb	r2, [r3, r0]
	                   // <true"> High
	                   true);

	gpio_set_pin_function(PIN_LED_RX, GPIO_PIN_FUNCTION_OFF);

	CTRL_SPI_init();
     508:	4b0f      	ldr	r3, [pc, #60]	; (548 <system_init+0x144>)
     50a:	4798      	blx	r3

	USART_0_init();
     50c:	4b0f      	ldr	r3, [pc, #60]	; (54c <system_init+0x148>)
     50e:	4798      	blx	r3

	USB_0_init();
     510:	4b0f      	ldr	r3, [pc, #60]	; (550 <system_init+0x14c>)
     512:	4798      	blx	r3
}
     514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	00000a85 	.word	0x00000a85
     51c:	41004400 	.word	0x41004400
     520:	40020040 	.word	0x40020040
     524:	c0020000 	.word	0xc0020000
     528:	40020100 	.word	0x40020100
     52c:	40020200 	.word	0x40020200
     530:	c0000004 	.word	0xc0000004
     534:	40020000 	.word	0x40020000
     538:	c0020010 	.word	0xc0020010
     53c:	c0020020 	.word	0xc0020020
     540:	c0000800 	.word	0xc0000800
     544:	40000008 	.word	0x40000008
     548:	00000285 	.word	0x00000285
     54c:	0000030d 	.word	0x0000030d
     550:	000003e9 	.word	0x000003e9

00000554 <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     554:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     558:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     55a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     55c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     560:	4770      	bx	lr

00000562 <atomic_leave_critical>:
     562:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     566:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     568:	f383 8810 	msr	PRIMASK, r3
}
     56c:	4770      	bx	lr
	...

00000570 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     570:	b570      	push	{r4, r5, r6, lr}
     572:	0004      	movs	r4, r0
     574:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
     576:	2800      	cmp	r0, #0
     578:	d016      	beq.n	5a8 <spi_m_sync_init+0x38>
     57a:	0008      	movs	r0, r1
     57c:	1e43      	subs	r3, r0, #1
     57e:	4198      	sbcs	r0, r3
     580:	b2c0      	uxtb	r0, r0
     582:	2242      	movs	r2, #66	; 0x42
     584:	4909      	ldr	r1, [pc, #36]	; (5ac <spi_m_sync_init+0x3c>)
     586:	4b0a      	ldr	r3, [pc, #40]	; (5b0 <spi_m_sync_init+0x40>)
     588:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
     58a:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
     58c:	0029      	movs	r1, r5
     58e:	0020      	movs	r0, r4
     590:	4b08      	ldr	r3, [pc, #32]	; (5b4 <spi_m_sync_init+0x44>)
     592:	4798      	blx	r3
	if (rc < 0) {
     594:	2800      	cmp	r0, #0
     596:	db06      	blt.n	5a6 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     598:	4b07      	ldr	r3, [pc, #28]	; (5b8 <spi_m_sync_init+0x48>)
     59a:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
     59c:	4b07      	ldr	r3, [pc, #28]	; (5bc <spi_m_sync_init+0x4c>)
     59e:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
     5a0:	4b07      	ldr	r3, [pc, #28]	; (5c0 <spi_m_sync_init+0x50>)
     5a2:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
     5a4:	2000      	movs	r0, #0
}
     5a6:	bd70      	pop	{r4, r5, r6, pc}
     5a8:	2000      	movs	r0, #0
     5aa:	e7ea      	b.n	582 <spi_m_sync_init+0x12>
     5ac:	00001cf8 	.word	0x00001cf8
     5b0:	00000a7d 	.word	0x00000a7d
     5b4:	00000bd5 	.word	0x00000bd5
     5b8:	ffff8000 	.word	0xffff8000
     5bc:	00000649 	.word	0x00000649
     5c0:	0000060d 	.word	0x0000060d

000005c4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b087      	sub	sp, #28
     5c8:	0004      	movs	r4, r0
     5ca:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     5cc:	2800      	cmp	r0, #0
     5ce:	d014      	beq.n	5fa <spi_m_sync_transfer+0x36>
     5d0:	0008      	movs	r0, r1
     5d2:	1e43      	subs	r3, r0, #1
     5d4:	4198      	sbcs	r0, r3
     5d6:	b2c0      	uxtb	r0, r0
     5d8:	22bd      	movs	r2, #189	; 0xbd
     5da:	4909      	ldr	r1, [pc, #36]	; (600 <spi_m_sync_transfer+0x3c>)
     5dc:	4b09      	ldr	r3, [pc, #36]	; (604 <spi_m_sync_transfer+0x40>)
     5de:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     5e0:	682b      	ldr	r3, [r5, #0]
     5e2:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     5e4:	686b      	ldr	r3, [r5, #4]
     5e6:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     5e8:	68ab      	ldr	r3, [r5, #8]
     5ea:	9301      	str	r3, [sp, #4]
     5ec:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
     5ee:	a903      	add	r1, sp, #12
     5f0:	0020      	movs	r0, r4
     5f2:	4b05      	ldr	r3, [pc, #20]	; (608 <spi_m_sync_transfer+0x44>)
     5f4:	4798      	blx	r3
}
     5f6:	b007      	add	sp, #28
     5f8:	bd30      	pop	{r4, r5, pc}
     5fa:	2000      	movs	r0, #0
     5fc:	e7ec      	b.n	5d8 <spi_m_sync_transfer+0x14>
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	00001cf8 	.word	0x00001cf8
     604:	00000a7d 	.word	0x00000a7d
     608:	00000d29 	.word	0x00000d29

0000060c <_spi_m_sync_io_write>:
{
     60c:	b570      	push	{r4, r5, r6, lr}
     60e:	b084      	sub	sp, #16
     610:	0004      	movs	r4, r0
     612:	000e      	movs	r6, r1
     614:	0015      	movs	r5, r2
	ASSERT(io);
     616:	1e43      	subs	r3, r0, #1
     618:	4198      	sbcs	r0, r3
     61a:	b2c0      	uxtb	r0, r0
     61c:	22ad      	movs	r2, #173	; 0xad
     61e:	4907      	ldr	r1, [pc, #28]	; (63c <_spi_m_sync_io_write+0x30>)
     620:	4b07      	ldr	r3, [pc, #28]	; (640 <_spi_m_sync_io_write+0x34>)
     622:	4798      	blx	r3
	xfer.rxbuf = 0;
     624:	2300      	movs	r3, #0
     626:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     628:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     62a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     62c:	0020      	movs	r0, r4
     62e:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     630:	a901      	add	r1, sp, #4
     632:	4b04      	ldr	r3, [pc, #16]	; (644 <_spi_m_sync_io_write+0x38>)
     634:	4798      	blx	r3
}
     636:	b004      	add	sp, #16
     638:	bd70      	pop	{r4, r5, r6, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	00001cf8 	.word	0x00001cf8
     640:	00000a7d 	.word	0x00000a7d
     644:	000005c5 	.word	0x000005c5

00000648 <_spi_m_sync_io_read>:
{
     648:	b570      	push	{r4, r5, r6, lr}
     64a:	b084      	sub	sp, #16
     64c:	0004      	movs	r4, r0
     64e:	000e      	movs	r6, r1
     650:	0015      	movs	r5, r2
	ASSERT(io);
     652:	1e43      	subs	r3, r0, #1
     654:	4198      	sbcs	r0, r3
     656:	b2c0      	uxtb	r0, r0
     658:	2291      	movs	r2, #145	; 0x91
     65a:	4907      	ldr	r1, [pc, #28]	; (678 <_spi_m_sync_io_read+0x30>)
     65c:	4b07      	ldr	r3, [pc, #28]	; (67c <_spi_m_sync_io_read+0x34>)
     65e:	4798      	blx	r3
	xfer.rxbuf = buf;
     660:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     662:	2300      	movs	r3, #0
     664:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     666:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     668:	0020      	movs	r0, r4
     66a:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     66c:	a901      	add	r1, sp, #4
     66e:	4b04      	ldr	r3, [pc, #16]	; (680 <_spi_m_sync_io_read+0x38>)
     670:	4798      	blx	r3
}
     672:	b004      	add	sp, #16
     674:	bd70      	pop	{r4, r5, r6, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	00001cf8 	.word	0x00001cf8
     67c:	00000a7d 	.word	0x00000a7d
     680:	000005c5 	.word	0x000005c5

00000684 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     686:	46ce      	mov	lr, r9
     688:	4647      	mov	r7, r8
     68a:	b580      	push	{r7, lr}
     68c:	0004      	movs	r4, r0
     68e:	000f      	movs	r7, r1
     690:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     692:	2800      	cmp	r0, #0
     694:	d021      	beq.n	6da <usart_sync_write+0x56>
     696:	2900      	cmp	r1, #0
     698:	d021      	beq.n	6de <usart_sync_write+0x5a>
     69a:	0010      	movs	r0, r2
     69c:	1e43      	subs	r3, r0, #1
     69e:	4198      	sbcs	r0, r3
     6a0:	22fb      	movs	r2, #251	; 0xfb
     6a2:	4910      	ldr	r1, [pc, #64]	; (6e4 <usart_sync_write+0x60>)
     6a4:	4b10      	ldr	r3, [pc, #64]	; (6e8 <usart_sync_write+0x64>)
     6a6:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
     6a8:	3408      	adds	r4, #8
     6aa:	4d10      	ldr	r5, [pc, #64]	; (6ec <usart_sync_write+0x68>)
     6ac:	0020      	movs	r0, r4
     6ae:	47a8      	blx	r5
     6b0:	2800      	cmp	r0, #0
     6b2:	d0fb      	beq.n	6ac <usart_sync_write+0x28>
     6b4:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6b6:	4b0e      	ldr	r3, [pc, #56]	; (6f0 <usart_sync_write+0x6c>)
     6b8:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device))
     6ba:	4d0c      	ldr	r5, [pc, #48]	; (6ec <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6bc:	5db9      	ldrb	r1, [r7, r6]
     6be:	0020      	movs	r0, r4
     6c0:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device))
     6c2:	0020      	movs	r0, r4
     6c4:	47a8      	blx	r5
     6c6:	2800      	cmp	r0, #0
     6c8:	d0fb      	beq.n	6c2 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     6ca:	3601      	adds	r6, #1
     6cc:	4546      	cmp	r6, r8
     6ce:	d3f5      	bcc.n	6bc <usart_sync_write+0x38>

	return (int32_t)offset;
}
     6d0:	0030      	movs	r0, r6
     6d2:	bc0c      	pop	{r2, r3}
     6d4:	4690      	mov	r8, r2
     6d6:	4699      	mov	r9, r3
     6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     6da:	2000      	movs	r0, #0
     6dc:	e7e0      	b.n	6a0 <usart_sync_write+0x1c>
     6de:	2000      	movs	r0, #0
     6e0:	e7de      	b.n	6a0 <usart_sync_write+0x1c>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00001d14 	.word	0x00001d14
     6e8:	00000a7d 	.word	0x00000a7d
     6ec:	00000bc1 	.word	0x00000bc1
     6f0:	00000bb1 	.word	0x00000bb1

000006f4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6f6:	46ce      	mov	lr, r9
     6f8:	4647      	mov	r7, r8
     6fa:	b580      	push	{r7, lr}
     6fc:	0004      	movs	r4, r0
     6fe:	000f      	movs	r7, r1
     700:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     702:	2800      	cmp	r0, #0
     704:	d01d      	beq.n	742 <usart_sync_read+0x4e>
     706:	2900      	cmp	r1, #0
     708:	d01d      	beq.n	746 <usart_sync_read+0x52>
     70a:	0010      	movs	r0, r2
     70c:	1e43      	subs	r3, r0, #1
     70e:	4198      	sbcs	r0, r3
     710:	2216      	movs	r2, #22
     712:	32ff      	adds	r2, #255	; 0xff
     714:	490d      	ldr	r1, [pc, #52]	; (74c <usart_sync_read+0x58>)
     716:	4b0e      	ldr	r3, [pc, #56]	; (750 <usart_sync_read+0x5c>)
     718:	4798      	blx	r3
	uint32_t                      offset = 0;
     71a:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     71c:	3408      	adds	r4, #8
     71e:	4d0d      	ldr	r5, [pc, #52]	; (754 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     720:	4b0d      	ldr	r3, [pc, #52]	; (758 <usart_sync_read+0x64>)
     722:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     724:	0020      	movs	r0, r4
     726:	47a8      	blx	r5
     728:	2800      	cmp	r0, #0
     72a:	d0fb      	beq.n	724 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     72c:	0020      	movs	r0, r4
     72e:	47c8      	blx	r9
     730:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     732:	3601      	adds	r6, #1
     734:	4546      	cmp	r6, r8
     736:	d3f5      	bcc.n	724 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     738:	0030      	movs	r0, r6
     73a:	bc0c      	pop	{r2, r3}
     73c:	4690      	mov	r8, r2
     73e:	4699      	mov	r9, r3
     740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     742:	2000      	movs	r0, #0
     744:	e7e4      	b.n	710 <usart_sync_read+0x1c>
     746:	2000      	movs	r0, #0
     748:	e7e2      	b.n	710 <usart_sync_read+0x1c>
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	00001d14 	.word	0x00001d14
     750:	00000a7d 	.word	0x00000a7d
     754:	00000bcb 	.word	0x00000bcb
     758:	00000bb9 	.word	0x00000bb9

0000075c <usart_sync_init>:
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	0005      	movs	r5, r0
     760:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     762:	2800      	cmp	r0, #0
     764:	d013      	beq.n	78e <usart_sync_init+0x32>
     766:	0008      	movs	r0, r1
     768:	1e43      	subs	r3, r0, #1
     76a:	4198      	sbcs	r0, r3
     76c:	b2c0      	uxtb	r0, r0
     76e:	223e      	movs	r2, #62	; 0x3e
     770:	4908      	ldr	r1, [pc, #32]	; (794 <usart_sync_init+0x38>)
     772:	4b09      	ldr	r3, [pc, #36]	; (798 <usart_sync_init+0x3c>)
     774:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     776:	0028      	movs	r0, r5
     778:	3008      	adds	r0, #8
     77a:	0021      	movs	r1, r4
     77c:	4b07      	ldr	r3, [pc, #28]	; (79c <usart_sync_init+0x40>)
     77e:	4798      	blx	r3
	if (init_status) {
     780:	2800      	cmp	r0, #0
     782:	d103      	bne.n	78c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     784:	4b06      	ldr	r3, [pc, #24]	; (7a0 <usart_sync_init+0x44>)
     786:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     788:	4b06      	ldr	r3, [pc, #24]	; (7a4 <usart_sync_init+0x48>)
     78a:	602b      	str	r3, [r5, #0]
}
     78c:	bd70      	pop	{r4, r5, r6, pc}
     78e:	2000      	movs	r0, #0
     790:	e7ed      	b.n	76e <usart_sync_init+0x12>
     792:	46c0      	nop			; (mov r8, r8)
     794:	00001d14 	.word	0x00001d14
     798:	00000a7d 	.word	0x00000a7d
     79c:	00000b85 	.word	0x00000b85
     7a0:	000006f5 	.word	0x000006f5
     7a4:	00000685 	.word	0x00000685

000007a8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7aa:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     7ac:	4b0e      	ldr	r3, [pc, #56]	; (7e8 <_usb_d_find_ep+0x40>)
     7ae:	785a      	ldrb	r2, [r3, #1]
     7b0:	4290      	cmp	r0, r2
     7b2:	d017      	beq.n	7e4 <_usb_d_find_ep+0x3c>
     7b4:	2300      	movs	r3, #0
     7b6:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     7b8:	4f0b      	ldr	r7, [pc, #44]	; (7e8 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     7ba:	260f      	movs	r6, #15
     7bc:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     7be:	003d      	movs	r5, r7
     7c0:	e008      	b.n	7d4 <_usb_d_find_ep+0x2c>
     7c2:	3001      	adds	r0, #1
     7c4:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     7c6:	2804      	cmp	r0, #4
     7c8:	d00a      	beq.n	7e0 <_usb_d_find_ep+0x38>
     7ca:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     7cc:	18ea      	adds	r2, r5, r3
     7ce:	7852      	ldrb	r2, [r2, #1]
     7d0:	42a2      	cmp	r2, r4
     7d2:	d006      	beq.n	7e2 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     7d4:	5dd9      	ldrb	r1, [r3, r7]
     7d6:	2900      	cmp	r1, #0
     7d8:	d1f3      	bne.n	7c2 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     7da:	4296      	cmp	r6, r2
     7dc:	d1f1      	bne.n	7c2 <_usb_d_find_ep+0x1a>
     7de:	e000      	b.n	7e2 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     7e0:	3805      	subs	r0, #5
}
     7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     7e4:	2000      	movs	r0, #0
     7e6:	e7fc      	b.n	7e2 <_usb_d_find_ep+0x3a>
     7e8:	2000001c 	.word	0x2000001c

000007ec <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     7ec:	2000      	movs	r0, #0
     7ee:	4770      	bx	lr

000007f0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     7f0:	b570      	push	{r4, r5, r6, lr}
     7f2:	0004      	movs	r4, r0
     7f4:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     7f6:	4b0a      	ldr	r3, [pc, #40]	; (820 <usb_d_cb_trans_more+0x30>)
     7f8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     7fa:	0142      	lsls	r2, r0, #5
     7fc:	4b09      	ldr	r3, [pc, #36]	; (824 <usb_d_cb_trans_more+0x34>)
     7fe:	189b      	adds	r3, r3, r2
     800:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     802:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     804:	2a03      	cmp	r2, #3
     806:	d001      	beq.n	80c <usb_d_cb_trans_more+0x1c>
}
     808:	0018      	movs	r0, r3
     80a:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     80c:	0140      	lsls	r0, r0, #5
     80e:	4b05      	ldr	r3, [pc, #20]	; (824 <usb_d_cb_trans_more+0x34>)
     810:	1818      	adds	r0, r3, r0
     812:	6983      	ldr	r3, [r0, #24]
     814:	0029      	movs	r1, r5
     816:	0020      	movs	r0, r4
     818:	4798      	blx	r3
     81a:	0003      	movs	r3, r0
     81c:	e7f4      	b.n	808 <usb_d_cb_trans_more+0x18>
     81e:	46c0      	nop			; (mov r8, r8)
     820:	000007a9 	.word	0x000007a9
     824:	2000001c 	.word	0x2000001c

00000828 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	b085      	sub	sp, #20
     82c:	0005      	movs	r5, r0
     82e:	000f      	movs	r7, r1
     830:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     832:	4b51      	ldr	r3, [pc, #324]	; (978 <_usb_d_cb_trans_done+0x150>)
     834:	4798      	blx	r3
     836:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     838:	2f00      	cmp	r7, #0
     83a:	d162      	bne.n	902 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     83c:	4b4f      	ldr	r3, [pc, #316]	; (97c <_usb_d_cb_trans_done+0x154>)
     83e:	0142      	lsls	r2, r0, #5
     840:	1899      	adds	r1, r3, r2
     842:	2000      	movs	r0, #0
     844:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     846:	5cd3      	ldrb	r3, [r2, r3]
     848:	2b00      	cmp	r3, #0
     84a:	d00e      	beq.n	86a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     84c:	0162      	lsls	r2, r4, #5
     84e:	4b4b      	ldr	r3, [pc, #300]	; (97c <_usb_d_cb_trans_done+0x154>)
     850:	189b      	adds	r3, r3, r2
     852:	2201      	movs	r2, #1
     854:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     856:	0164      	lsls	r4, r4, #5
     858:	4b48      	ldr	r3, [pc, #288]	; (97c <_usb_d_cb_trans_done+0x154>)
     85a:	191c      	adds	r4, r3, r4
     85c:	78e1      	ldrb	r1, [r4, #3]
     85e:	69e3      	ldr	r3, [r4, #28]
     860:	0032      	movs	r2, r6
     862:	0028      	movs	r0, r5
     864:	4798      	blx	r3
}
     866:	b005      	add	sp, #20
     868:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     86a:	788b      	ldrb	r3, [r1, #2]
     86c:	2b03      	cmp	r3, #3
     86e:	d00c      	beq.n	88a <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     870:	4b42      	ldr	r3, [pc, #264]	; (97c <_usb_d_cb_trans_done+0x154>)
     872:	0162      	lsls	r2, r4, #5
     874:	320c      	adds	r2, #12
     876:	189a      	adds	r2, r3, r2
     878:	0164      	lsls	r4, r4, #5
     87a:	191c      	adds	r4, r3, r4
     87c:	7860      	ldrb	r0, [r4, #1]
     87e:	2100      	movs	r1, #0
     880:	69e3      	ldr	r3, [r4, #28]
     882:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     884:	2302      	movs	r3, #2
     886:	70a3      	strb	r3, [r4, #2]
     888:	e7ed      	b.n	866 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     88a:	4a3c      	ldr	r2, [pc, #240]	; (97c <_usb_d_cb_trans_done+0x154>)
     88c:	000b      	movs	r3, r1
     88e:	250c      	movs	r5, #12
     890:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     892:	0161      	lsls	r1, r4, #5
     894:	310c      	adds	r1, #12
     896:	1852      	adds	r2, r2, r1
     898:	7858      	ldrb	r0, [r3, #1]
     89a:	69db      	ldr	r3, [r3, #28]
     89c:	2101      	movs	r1, #1
     89e:	4798      	blx	r3
		if (err) {
     8a0:	2800      	cmp	r0, #0
     8a2:	d017      	beq.n	8d4 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     8a4:	0162      	lsls	r2, r4, #5
     8a6:	4b35      	ldr	r3, [pc, #212]	; (97c <_usb_d_cb_trans_done+0x154>)
     8a8:	189b      	adds	r3, r3, r2
     8aa:	2205      	movs	r2, #5
     8ac:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     8ae:	3a03      	subs	r2, #3
     8b0:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     8b2:	2d00      	cmp	r5, #0
     8b4:	db09      	blt.n	8ca <_usb_d_cb_trans_done+0xa2>
     8b6:	0164      	lsls	r4, r4, #5
     8b8:	4b30      	ldr	r3, [pc, #192]	; (97c <_usb_d_cb_trans_done+0x154>)
     8ba:	191c      	adds	r4, r3, r4
     8bc:	7860      	ldrb	r0, [r4, #1]
     8be:	2380      	movs	r3, #128	; 0x80
     8c0:	4318      	orrs	r0, r3
     8c2:	2101      	movs	r1, #1
     8c4:	4b2e      	ldr	r3, [pc, #184]	; (980 <_usb_d_cb_trans_done+0x158>)
     8c6:	4798      	blx	r3
     8c8:	e7cd      	b.n	866 <_usb_d_cb_trans_done+0x3e>
     8ca:	0164      	lsls	r4, r4, #5
     8cc:	4b2b      	ldr	r3, [pc, #172]	; (97c <_usb_d_cb_trans_done+0x154>)
     8ce:	191c      	adds	r4, r3, r4
     8d0:	7860      	ldrb	r0, [r4, #1]
     8d2:	e7f6      	b.n	8c2 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     8d4:	0164      	lsls	r4, r4, #5
     8d6:	4b29      	ldr	r3, [pc, #164]	; (97c <_usb_d_cb_trans_done+0x154>)
     8d8:	191c      	adds	r4, r3, r4
     8da:	2304      	movs	r3, #4
     8dc:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     8de:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     8e0:	2200      	movs	r2, #0
     8e2:	9201      	str	r2, [sp, #4]
     8e4:	9202      	str	r2, [sp, #8]
     8e6:	2d00      	cmp	r5, #0
     8e8:	db08      	blt.n	8fc <_usb_d_cb_trans_done+0xd4>
     8ea:	3280      	adds	r2, #128	; 0x80
     8ec:	4313      	orrs	r3, r2
     8ee:	a801      	add	r0, sp, #4
     8f0:	7203      	strb	r3, [r0, #8]
     8f2:	2301      	movs	r3, #1
     8f4:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     8f6:	4b23      	ldr	r3, [pc, #140]	; (984 <_usb_d_cb_trans_done+0x15c>)
     8f8:	4798      	blx	r3
     8fa:	e7b4      	b.n	866 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     8fc:	220f      	movs	r2, #15
     8fe:	4013      	ands	r3, r2
     900:	e7f5      	b.n	8ee <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     902:	2f01      	cmp	r7, #1
     904:	d00a      	beq.n	91c <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     906:	2f02      	cmp	r7, #2
     908:	d01d      	beq.n	946 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     90a:	2f03      	cmp	r7, #3
     90c:	d02c      	beq.n	968 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     90e:	0142      	lsls	r2, r0, #5
     910:	4b1a      	ldr	r3, [pc, #104]	; (97c <_usb_d_cb_trans_done+0x154>)
     912:	189b      	adds	r3, r3, r2
     914:	2206      	movs	r2, #6
     916:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     918:	70da      	strb	r2, [r3, #3]
     91a:	e79c      	b.n	856 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     91c:	4b17      	ldr	r3, [pc, #92]	; (97c <_usb_d_cb_trans_done+0x154>)
     91e:	0142      	lsls	r2, r0, #5
     920:	1899      	adds	r1, r3, r2
     922:	2002      	movs	r0, #2
     924:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     926:	5cd3      	ldrb	r3, [r2, r3]
     928:	2b00      	cmp	r3, #0
     92a:	d005      	beq.n	938 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     92c:	0162      	lsls	r2, r4, #5
     92e:	4b13      	ldr	r3, [pc, #76]	; (97c <_usb_d_cb_trans_done+0x154>)
     930:	189b      	adds	r3, r3, r2
     932:	2205      	movs	r2, #5
     934:	709a      	strb	r2, [r3, #2]
     936:	e78e      	b.n	856 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     938:	2202      	movs	r2, #2
     93a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     93c:	2100      	movs	r1, #0
     93e:	0028      	movs	r0, r5
     940:	4b0f      	ldr	r3, [pc, #60]	; (980 <_usb_d_cb_trans_done+0x158>)
     942:	4798      	blx	r3
     944:	e787      	b.n	856 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     946:	4b0d      	ldr	r3, [pc, #52]	; (97c <_usb_d_cb_trans_done+0x154>)
     948:	0142      	lsls	r2, r0, #5
     94a:	1899      	adds	r1, r3, r2
     94c:	2004      	movs	r0, #4
     94e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     950:	5cd3      	ldrb	r3, [r2, r3]
     952:	2b00      	cmp	r3, #0
     954:	d005      	beq.n	962 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     956:	0162      	lsls	r2, r4, #5
     958:	4b08      	ldr	r3, [pc, #32]	; (97c <_usb_d_cb_trans_done+0x154>)
     95a:	189b      	adds	r3, r3, r2
     95c:	2201      	movs	r2, #1
     95e:	709a      	strb	r2, [r3, #2]
     960:	e779      	b.n	856 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     962:	2302      	movs	r3, #2
     964:	708b      	strb	r3, [r1, #2]
			return;
     966:	e77e      	b.n	866 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     968:	0142      	lsls	r2, r0, #5
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <_usb_d_cb_trans_done+0x154>)
     96c:	189b      	adds	r3, r3, r2
     96e:	2200      	movs	r2, #0
     970:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     972:	3205      	adds	r2, #5
     974:	70da      	strb	r2, [r3, #3]
     976:	e76e      	b.n	856 <_usb_d_cb_trans_done+0x2e>
     978:	000007a9 	.word	0x000007a9
     97c:	2000001c 	.word	0x2000001c
     980:	00001631 	.word	0x00001631
     984:	00001805 	.word	0x00001805

00000988 <usb_d_cb_trans_setup>:
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	46c6      	mov	lr, r8
     98c:	b500      	push	{lr}
     98e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     990:	4b1d      	ldr	r3, [pc, #116]	; (a08 <usb_d_cb_trans_setup+0x80>)
     992:	4798      	blx	r3
     994:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     996:	0145      	lsls	r5, r0, #5
     998:	350c      	adds	r5, #12
     99a:	4b1c      	ldr	r3, [pc, #112]	; (a0c <usb_d_cb_trans_setup+0x84>)
     99c:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     99e:	0029      	movs	r1, r5
     9a0:	0020      	movs	r0, r4
     9a2:	4b1b      	ldr	r3, [pc, #108]	; (a10 <usb_d_cb_trans_setup+0x88>)
     9a4:	4798      	blx	r3
	if (n != 8) {
     9a6:	b2c0      	uxtb	r0, r0
     9a8:	2808      	cmp	r0, #8
     9aa:	d00a      	beq.n	9c2 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     9ac:	2101      	movs	r1, #1
     9ae:	0020      	movs	r0, r4
     9b0:	4d18      	ldr	r5, [pc, #96]	; (a14 <usb_d_cb_trans_setup+0x8c>)
     9b2:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     9b4:	2080      	movs	r0, #128	; 0x80
     9b6:	4320      	orrs	r0, r4
     9b8:	2101      	movs	r1, #1
     9ba:	47a8      	blx	r5
}
     9bc:	bc04      	pop	{r2}
     9be:	4690      	mov	r8, r2
     9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     9c2:	2100      	movs	r1, #0
     9c4:	0020      	movs	r0, r4
     9c6:	4b13      	ldr	r3, [pc, #76]	; (a14 <usb_d_cb_trans_setup+0x8c>)
     9c8:	4698      	mov	r8, r3
     9ca:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     9cc:	2780      	movs	r7, #128	; 0x80
     9ce:	4327      	orrs	r7, r4
     9d0:	2100      	movs	r1, #0
     9d2:	0038      	movs	r0, r7
     9d4:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     9d6:	0172      	lsls	r2, r6, #5
     9d8:	4b0c      	ldr	r3, [pc, #48]	; (a0c <usb_d_cb_trans_setup+0x84>)
     9da:	189b      	adds	r3, r3, r2
     9dc:	2201      	movs	r2, #1
     9de:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     9e0:	695b      	ldr	r3, [r3, #20]
     9e2:	0029      	movs	r1, r5
     9e4:	0020      	movs	r0, r4
     9e6:	4798      	blx	r3
     9e8:	2800      	cmp	r0, #0
     9ea:	d1e7      	bne.n	9bc <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     9ec:	0176      	lsls	r6, r6, #5
     9ee:	4b07      	ldr	r3, [pc, #28]	; (a0c <usb_d_cb_trans_setup+0x84>)
     9f0:	199e      	adds	r6, r3, r6
     9f2:	2305      	movs	r3, #5
     9f4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     9f6:	2101      	movs	r1, #1
     9f8:	0020      	movs	r0, r4
     9fa:	4c06      	ldr	r4, [pc, #24]	; (a14 <usb_d_cb_trans_setup+0x8c>)
     9fc:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     9fe:	2101      	movs	r1, #1
     a00:	0038      	movs	r0, r7
     a02:	47a0      	blx	r4
     a04:	e7da      	b.n	9bc <usb_d_cb_trans_setup+0x34>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	000007a9 	.word	0x000007a9
     a0c:	2000001c 	.word	0x2000001c
     a10:	00001795 	.word	0x00001795
     a14:	00001631 	.word	0x00001631

00000a18 <usb_d_init>:

int32_t usb_d_init(void)
{
     a18:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     a1a:	4b10      	ldr	r3, [pc, #64]	; (a5c <usb_d_init+0x44>)
     a1c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     a1e:	2800      	cmp	r0, #0
     a20:	db1b      	blt.n	a5a <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     a22:	4c0f      	ldr	r4, [pc, #60]	; (a60 <usb_d_init+0x48>)
     a24:	2280      	movs	r2, #128	; 0x80
     a26:	2100      	movs	r1, #0
     a28:	0020      	movs	r0, r4
     a2a:	4b0e      	ldr	r3, [pc, #56]	; (a64 <usb_d_init+0x4c>)
     a2c:	4798      	blx	r3
     a2e:	0023      	movs	r3, r4
     a30:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     a32:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     a34:	4a0c      	ldr	r2, [pc, #48]	; (a68 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     a36:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     a38:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     a3a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     a3c:	61da      	str	r2, [r3, #28]
     a3e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a40:	42a3      	cmp	r3, r4
     a42:	d1f8      	bne.n	a36 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     a44:	4909      	ldr	r1, [pc, #36]	; (a6c <usb_d_init+0x54>)
     a46:	2000      	movs	r0, #0
     a48:	4c09      	ldr	r4, [pc, #36]	; (a70 <usb_d_init+0x58>)
     a4a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     a4c:	4909      	ldr	r1, [pc, #36]	; (a74 <usb_d_init+0x5c>)
     a4e:	2001      	movs	r0, #1
     a50:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     a52:	4909      	ldr	r1, [pc, #36]	; (a78 <usb_d_init+0x60>)
     a54:	2002      	movs	r0, #2
     a56:	47a0      	blx	r4
	return ERR_NONE;
     a58:	2000      	movs	r0, #0
}
     a5a:	bd10      	pop	{r4, pc}
     a5c:	00001571 	.word	0x00001571
     a60:	2000001c 	.word	0x2000001c
     a64:	00001ce7 	.word	0x00001ce7
     a68:	000007ed 	.word	0x000007ed
     a6c:	00000989 	.word	0x00000989
     a70:	00001a19 	.word	0x00001a19
     a74:	000007f1 	.word	0x000007f1
     a78:	00000829 	.word	0x00000829

00000a7c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a7c:	2800      	cmp	r0, #0
     a7e:	d100      	bne.n	a82 <assert+0x6>
		__asm("BKPT #0");
     a80:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a82:	4770      	bx	lr

00000a84 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a84:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     a86:	4b06      	ldr	r3, [pc, #24]	; (aa0 <_init_chip+0x1c>)
     a88:	685a      	ldr	r2, [r3, #4]
     a8a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <_init_chip+0x20>)
     a8e:	4798      	blx	r3
	_sysctrl_init_sources();
     a90:	4b05      	ldr	r3, [pc, #20]	; (aa8 <_init_chip+0x24>)
     a92:	4798      	blx	r3
	_gclk_init_generators();
     a94:	4b05      	ldr	r3, [pc, #20]	; (aac <_init_chip+0x28>)
     a96:	4798      	blx	r3
	_sysctrl_init_referenced_generators();
     a98:	4b05      	ldr	r3, [pc, #20]	; (ab0 <_init_chip+0x2c>)
     a9a:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     a9c:	bd10      	pop	{r4, pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	41004000 	.word	0x41004000
     aa4:	00000ae9 	.word	0x00000ae9
     aa8:	00000e39 	.word	0x00000e39
     aac:	00000ab5 	.word	0x00000ab5
     ab0:	00000e81 	.word	0x00000e81

00000ab4 <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     ab4:	4b07      	ldr	r3, [pc, #28]	; (ad4 <_gclk_init_generators+0x20>)
     ab6:	2280      	movs	r2, #128	; 0x80
     ab8:	0052      	lsls	r2, r2, #1
     aba:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     abc:	4a06      	ldr	r2, [pc, #24]	; (ad8 <_gclk_init_generators+0x24>)
     abe:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     ac0:	4a06      	ldr	r2, [pc, #24]	; (adc <_gclk_init_generators+0x28>)
     ac2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ac4:	4a06      	ldr	r2, [pc, #24]	; (ae0 <_gclk_init_generators+0x2c>)
     ac6:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     ac8:	2281      	movs	r2, #129	; 0x81
     aca:	0052      	lsls	r2, r2, #1
     acc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ace:	4a05      	ldr	r2, [pc, #20]	; (ae4 <_gclk_init_generators+0x30>)
     ad0:	605a      	str	r2, [r3, #4]
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SRC
	                               | GCLK_GENCTRL_ID(8));
#endif
}
     ad2:	4770      	bx	lr
     ad4:	40000c00 	.word	0x40000c00
     ad8:	00010700 	.word	0x00010700
     adc:	00002001 	.word	0x00002001
     ae0:	00010601 	.word	0x00010601
     ae4:	00010602 	.word	0x00010602

00000ae8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     ae8:	4b06      	ldr	r3, [pc, #24]	; (b04 <_pm_init+0x1c>)
     aea:	7a1a      	ldrb	r2, [r3, #8]
     aec:	b2d2      	uxtb	r2, r2
     aee:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     af0:	7a5a      	ldrb	r2, [r3, #9]
     af2:	b2d2      	uxtb	r2, r2
     af4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     af6:	7a9a      	ldrb	r2, [r3, #10]
     af8:	b2d2      	uxtb	r2, r2
     afa:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     afc:	7ada      	ldrb	r2, [r3, #11]
     afe:	b2d2      	uxtb	r2, r2
     b00:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     b02:	4770      	bx	lr
     b04:	40000400 	.word	0x40000400

00000b08 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     b08:	b510      	push	{r4, lr}
     b0a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     b0c:	4b19      	ldr	r3, [pc, #100]	; (b74 <_usart_init+0x6c>)
     b0e:	18c3      	adds	r3, r0, r3
     b10:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     b12:	b2db      	uxtb	r3, r3
     b14:	2b02      	cmp	r3, #2
     b16:	d005      	beq.n	b24 <_usart_init+0x1c>
	ASSERT(false);
     b18:	2291      	movs	r2, #145	; 0x91
     b1a:	0092      	lsls	r2, r2, #2
     b1c:	4916      	ldr	r1, [pc, #88]	; (b78 <_usart_init+0x70>)
     b1e:	2000      	movs	r0, #0
     b20:	4b16      	ldr	r3, [pc, #88]	; (b7c <_usart_init+0x74>)
     b22:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b24:	2201      	movs	r2, #1
     b26:	69e3      	ldr	r3, [r4, #28]
     b28:	421a      	tst	r2, r3
     b2a:	d1fc      	bne.n	b26 <_usart_init+0x1e>
     b2c:	2203      	movs	r2, #3
     b2e:	69e3      	ldr	r3, [r4, #28]
     b30:	421a      	tst	r2, r3
     b32:	d1fc      	bne.n	b2e <_usart_init+0x26>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b34:	6823      	ldr	r3, [r4, #0]
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
     b36:	079b      	lsls	r3, r3, #30
     b38:	d418      	bmi.n	b6c <_usart_init+0x64>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b3a:	2201      	movs	r2, #1
     b3c:	69e3      	ldr	r3, [r4, #28]
     b3e:	421a      	tst	r2, r3
     b40:	d1fc      	bne.n	b3c <_usart_init+0x34>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
     b42:	6823      	ldr	r3, [r4, #0]
     b44:	2201      	movs	r2, #1
     b46:	4313      	orrs	r3, r2
     b48:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b4a:	69e3      	ldr	r3, [r4, #28]
     b4c:	421a      	tst	r2, r3
     b4e:	d1fc      	bne.n	b4a <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b50:	4b0b      	ldr	r3, [pc, #44]	; (b80 <_usart_init+0x78>)
     b52:	6023      	str	r3, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     b54:	23c0      	movs	r3, #192	; 0xc0
     b56:	029b      	lsls	r3, r3, #10
     b58:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
     b5a:	23d2      	movs	r3, #210	; 0xd2
     b5c:	425b      	negs	r3, r3
     b5e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     b60:	2300      	movs	r3, #0
     b62:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b64:	2230      	movs	r2, #48	; 0x30
     b66:	54a3      	strb	r3, [r4, r2]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
     b68:	2000      	movs	r0, #0
}
     b6a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     b6c:	2011      	movs	r0, #17
     b6e:	4240      	negs	r0, r0
     b70:	e7fb      	b.n	b6a <_usart_init+0x62>
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	bdfff800 	.word	0xbdfff800
     b78:	00001d5c 	.word	0x00001d5c
     b7c:	00000a7d 	.word	0x00000a7d
     b80:	40310004 	.word	0x40310004

00000b84 <_usart_sync_init>:
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	0005      	movs	r5, r0
     b88:	000c      	movs	r4, r1
	ASSERT(device);
     b8a:	1e43      	subs	r3, r0, #1
     b8c:	4198      	sbcs	r0, r3
     b8e:	b2c0      	uxtb	r0, r0
     b90:	22bf      	movs	r2, #191	; 0xbf
     b92:	4904      	ldr	r1, [pc, #16]	; (ba4 <_usart_sync_init+0x20>)
     b94:	4b04      	ldr	r3, [pc, #16]	; (ba8 <_usart_sync_init+0x24>)
     b96:	4798      	blx	r3
	device->hw = hw;
     b98:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     b9a:	0020      	movs	r0, r4
     b9c:	4b03      	ldr	r3, [pc, #12]	; (bac <_usart_sync_init+0x28>)
     b9e:	4798      	blx	r3
}
     ba0:	bd70      	pop	{r4, r5, r6, pc}
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	00001d5c 	.word	0x00001d5c
     ba8:	00000a7d 	.word	0x00000a7d
     bac:	00000b09 	.word	0x00000b09

00000bb0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     bb0:	6803      	ldr	r3, [r0, #0]
     bb2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     bb4:	8519      	strh	r1, [r3, #40]	; 0x28
}
     bb6:	4770      	bx	lr

00000bb8 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     bb8:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     bba:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     bbc:	b2c0      	uxtb	r0, r0
}
     bbe:	4770      	bx	lr

00000bc0 <_usart_sync_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     bc0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     bc2:	7e18      	ldrb	r0, [r3, #24]
     bc4:	2301      	movs	r3, #1
     bc6:	4018      	ands	r0, r3
}
     bc8:	4770      	bx	lr

00000bca <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     bca:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     bcc:	7e18      	ldrb	r0, [r3, #24]
     bce:	0740      	lsls	r0, r0, #29
     bd0:	0fc0      	lsrs	r0, r0, #31
}
     bd2:	4770      	bx	lr

00000bd4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     bd4:	b570      	push	{r4, r5, r6, lr}
     bd6:	0006      	movs	r6, r0
     bd8:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     bda:	4b49      	ldr	r3, [pc, #292]	; (d00 <_spi_m_sync_init+0x12c>)
     bdc:	18cb      	adds	r3, r1, r3
     bde:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     be0:	b2db      	uxtb	r3, r3
     be2:	2b01      	cmp	r3, #1
     be4:	d008      	beq.n	bf8 <_spi_m_sync_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     be6:	2800      	cmp	r0, #0
     be8:	d100      	bne.n	bec <_spi_m_sync_init+0x18>
     bea:	e079      	b.n	ce0 <_spi_m_sync_init+0x10c>
     bec:	2900      	cmp	r1, #0
     bee:	d000      	beq.n	bf2 <_spi_m_sync_init+0x1e>
     bf0:	e07e      	b.n	cf0 <_spi_m_sync_init+0x11c>
	return NULL;
     bf2:	2500      	movs	r5, #0
	ASSERT(dev && hw);
     bf4:	2000      	movs	r0, #0
     bf6:	e006      	b.n	c06 <_spi_m_sync_init+0x32>
     bf8:	2800      	cmp	r0, #0
     bfa:	d04d      	beq.n	c98 <_spi_m_sync_init+0xc4>
     bfc:	2900      	cmp	r1, #0
     bfe:	d048      	beq.n	c92 <_spi_m_sync_init+0xbe>
			return &sercomspi_regs[i];
     c00:	4d40      	ldr	r5, [pc, #256]	; (d04 <_spi_m_sync_init+0x130>)
     c02:	3518      	adds	r5, #24
	ASSERT(dev && hw);
     c04:	2001      	movs	r0, #1
     c06:	4a40      	ldr	r2, [pc, #256]	; (d08 <_spi_m_sync_init+0x134>)
     c08:	4940      	ldr	r1, [pc, #256]	; (d0c <_spi_m_sync_init+0x138>)
     c0a:	4b41      	ldr	r3, [pc, #260]	; (d10 <_spi_m_sync_init+0x13c>)
     c0c:	4798      	blx	r3

	if (regs == NULL) {
     c0e:	2d00      	cmp	r5, #0
     c10:	d060      	beq.n	cd4 <_spi_m_sync_init+0x100>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c12:	2201      	movs	r2, #1
     c14:	69e3      	ldr	r3, [r4, #28]
     c16:	421a      	tst	r2, r3
     c18:	d1fc      	bne.n	c14 <_spi_m_sync_init+0x40>
     c1a:	2203      	movs	r2, #3
     c1c:	69e3      	ldr	r3, [r4, #28]
     c1e:	421a      	tst	r2, r3
     c20:	d1fc      	bne.n	c1c <_spi_m_sync_init+0x48>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     c22:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     c24:	079b      	lsls	r3, r3, #30
     c26:	d458      	bmi.n	cda <_spi_m_sync_init+0x106>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c28:	2201      	movs	r2, #1
     c2a:	69e3      	ldr	r3, [r4, #28]
     c2c:	421a      	tst	r2, r3
     c2e:	d1fc      	bne.n	c2a <_spi_m_sync_init+0x56>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
     c30:	6823      	ldr	r3, [r4, #0]
     c32:	2201      	movs	r2, #1
     c34:	4313      	orrs	r3, r2
     c36:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c38:	69e3      	ldr	r3, [r4, #28]
     c3a:	421a      	tst	r2, r3
     c3c:	d1fc      	bne.n	c38 <_spi_m_sync_init+0x64>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
     c3e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     c40:	231c      	movs	r3, #28
     c42:	682a      	ldr	r2, [r5, #0]
     c44:	4013      	ands	r3, r2
     c46:	2b08      	cmp	r3, #8
     c48:	d029      	beq.n	c9e <_spi_m_sync_init+0xca>
	ASSERT(hw && regs);
     c4a:	0020      	movs	r0, r4
     c4c:	1e43      	subs	r3, r0, #1
     c4e:	4198      	sbcs	r0, r3
     c50:	b2c0      	uxtb	r0, r0
     c52:	228e      	movs	r2, #142	; 0x8e
     c54:	0112      	lsls	r2, r2, #4
     c56:	492d      	ldr	r1, [pc, #180]	; (d0c <_spi_m_sync_init+0x138>)
     c58:	4b2d      	ldr	r3, [pc, #180]	; (d10 <_spi_m_sync_init+0x13c>)
     c5a:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
     c5c:	4b2d      	ldr	r3, [pc, #180]	; (d14 <_spi_m_sync_init+0x140>)
     c5e:	682a      	ldr	r2, [r5, #0]
     c60:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     c62:	6023      	str	r3, [r4, #0]
	        | (SERCOM_SPI_CTRLB_RXEN));
     c64:	4a2c      	ldr	r2, [pc, #176]	; (d18 <_spi_m_sync_init+0x144>)
     c66:	686b      	ldr	r3, [r5, #4]
     c68:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(
     c6a:	2380      	movs	r3, #128	; 0x80
     c6c:	029b      	lsls	r3, r3, #10
     c6e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     c70:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
     c72:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
     c74:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     c76:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     c78:	2330      	movs	r3, #48	; 0x30
     c7a:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     c7c:	2307      	movs	r3, #7
     c7e:	686a      	ldr	r2, [r5, #4]
     c80:	4013      	ands	r3, r2
     c82:	1e5a      	subs	r2, r3, #1
     c84:	4193      	sbcs	r3, r2
     c86:	3301      	adds	r3, #1
     c88:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
     c8a:	89eb      	ldrh	r3, [r5, #14]
     c8c:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
     c8e:	2000      	movs	r0, #0
}
     c90:	bd70      	pop	{r4, r5, r6, pc}
			return &sercomspi_regs[i];
     c92:	4d1c      	ldr	r5, [pc, #112]	; (d04 <_spi_m_sync_init+0x130>)
     c94:	3518      	adds	r5, #24
     c96:	e7ad      	b.n	bf4 <_spi_m_sync_init+0x20>
     c98:	4d1a      	ldr	r5, [pc, #104]	; (d04 <_spi_m_sync_init+0x130>)
     c9a:	3518      	adds	r5, #24
     c9c:	e7aa      	b.n	bf4 <_spi_m_sync_init+0x20>
	ASSERT(hw && regs);
     c9e:	0020      	movs	r0, r4
     ca0:	1e43      	subs	r3, r0, #1
     ca2:	4198      	sbcs	r0, r3
     ca4:	b2c0      	uxtb	r0, r0
     ca6:	4a1d      	ldr	r2, [pc, #116]	; (d1c <_spi_m_sync_init+0x148>)
     ca8:	4918      	ldr	r1, [pc, #96]	; (d0c <_spi_m_sync_init+0x138>)
     caa:	4b19      	ldr	r3, [pc, #100]	; (d10 <_spi_m_sync_init+0x13c>)
     cac:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
     cae:	4b19      	ldr	r3, [pc, #100]	; (d14 <_spi_m_sync_init+0x140>)
     cb0:	682a      	ldr	r2, [r5, #0]
     cb2:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     cb4:	6023      	str	r3, [r4, #0]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     cb6:	4a1a      	ldr	r2, [pc, #104]	; (d20 <_spi_m_sync_init+0x14c>)
     cb8:	686b      	ldr	r3, [r5, #4]
     cba:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(hw,
     cbc:	4b19      	ldr	r3, [pc, #100]	; (d24 <_spi_m_sync_init+0x150>)
     cbe:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     cc0:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
     cc2:	68ab      	ldr	r3, [r5, #8]
     cc4:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     cc6:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     cc8:	2330      	movs	r3, #48	; 0x30
     cca:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     ccc:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
     cce:	2b00      	cmp	r3, #0
     cd0:	d1fc      	bne.n	ccc <_spi_m_sync_init+0xf8>
     cd2:	e7d3      	b.n	c7c <_spi_m_sync_init+0xa8>
		return ERR_INVALID_ARG;
     cd4:	200d      	movs	r0, #13
     cd6:	4240      	negs	r0, r0
     cd8:	e7da      	b.n	c90 <_spi_m_sync_init+0xbc>
		return ERR_DENIED;
     cda:	2011      	movs	r0, #17
     cdc:	4240      	negs	r0, r0
     cde:	e7d7      	b.n	c90 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
     ce0:	4a09      	ldr	r2, [pc, #36]	; (d08 <_spi_m_sync_init+0x134>)
     ce2:	490a      	ldr	r1, [pc, #40]	; (d0c <_spi_m_sync_init+0x138>)
     ce4:	2000      	movs	r0, #0
     ce6:	4b0a      	ldr	r3, [pc, #40]	; (d10 <_spi_m_sync_init+0x13c>)
     ce8:	4798      	blx	r3
		return ERR_INVALID_ARG;
     cea:	200d      	movs	r0, #13
     cec:	4240      	negs	r0, r0
     cee:	e7cf      	b.n	c90 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
     cf0:	4a05      	ldr	r2, [pc, #20]	; (d08 <_spi_m_sync_init+0x134>)
     cf2:	4906      	ldr	r1, [pc, #24]	; (d0c <_spi_m_sync_init+0x138>)
     cf4:	2001      	movs	r0, #1
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <_spi_m_sync_init+0x13c>)
     cf8:	4798      	blx	r3
		return ERR_INVALID_ARG;
     cfa:	200d      	movs	r0, #13
     cfc:	4240      	negs	r0, r0
     cfe:	e7c7      	b.n	c90 <_spi_m_sync_init+0xbc>
     d00:	bdfff800 	.word	0xbdfff800
     d04:	00001d30 	.word	0x00001d30
     d08:	00000916 	.word	0x00000916
     d0c:	00001d5c 	.word	0x00001d5c
     d10:	00000a7d 	.word	0x00000a7d
     d14:	fffffefc 	.word	0xfffffefc
     d18:	fffd1dbf 	.word	0xfffd1dbf
     d1c:	000008f4 	.word	0x000008f4
     d20:	fffdddbf 	.word	0xfffdddbf
     d24:	00020240 	.word	0x00020240

00000d28 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     d28:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2a:	46de      	mov	lr, fp
     d2c:	4657      	mov	r7, sl
     d2e:	464e      	mov	r6, r9
     d30:	4645      	mov	r5, r8
     d32:	b5e0      	push	{r5, r6, r7, lr}
     d34:	b083      	sub	sp, #12
     d36:	4681      	mov	r9, r0
     d38:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
     d3a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     d3c:	680b      	ldr	r3, [r1, #0]
     d3e:	4698      	mov	r8, r3
     d40:	684d      	ldr	r5, [r1, #4]
     d42:	7903      	ldrb	r3, [r0, #4]
     d44:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
     d46:	2800      	cmp	r0, #0
     d48:	d015      	beq.n	d76 <_spi_m_sync_trans+0x4e>
     d4a:	0020      	movs	r0, r4
     d4c:	1e43      	subs	r3, r0, #1
     d4e:	4198      	sbcs	r0, r3
     d50:	b2c0      	uxtb	r0, r0
     d52:	4a36      	ldr	r2, [pc, #216]	; (e2c <_spi_m_sync_trans+0x104>)
     d54:	4936      	ldr	r1, [pc, #216]	; (e30 <_spi_m_sync_trans+0x108>)
     d56:	4b37      	ldr	r3, [pc, #220]	; (e34 <_spi_m_sync_trans+0x10c>)
     d58:	4798      	blx	r3
     d5a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     d5c:	075b      	lsls	r3, r3, #29
     d5e:	d13f      	bne.n	de0 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     d60:	2303      	movs	r3, #3
     d62:	69e0      	ldr	r0, [r4, #28]
     d64:	4018      	ands	r0, r3
     d66:	d1fc      	bne.n	d62 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     d68:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     d6a:	079b      	lsls	r3, r3, #30
     d6c:	d53b      	bpl.n	de6 <_spi_m_sync_trans+0xbe>
     d6e:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     d70:	2301      	movs	r3, #1
     d72:	469c      	mov	ip, r3
     d74:	e009      	b.n	d8a <_spi_m_sync_trans+0x62>
     d76:	2000      	movs	r0, #0
     d78:	e7eb      	b.n	d52 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
     d7a:	3501      	adds	r5, #1
	ctrl->rxcnt++;
     d7c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     d7e:	b25b      	sxtb	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	db16      	blt.n	db2 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     d84:	68b3      	ldr	r3, [r6, #8]
     d86:	4283      	cmp	r3, r0
     d88:	d927      	bls.n	dda <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     d8a:	7e23      	ldrb	r3, [r4, #24]
     d8c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     d8e:	2104      	movs	r1, #4
     d90:	4219      	tst	r1, r3
     d92:	d02b      	beq.n	dec <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
     d94:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     d96:	2d00      	cmp	r5, #0
     d98:	d0f0      	beq.n	d7c <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
     d9a:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
     d9c:	9901      	ldr	r1, [sp, #4]
     d9e:	2901      	cmp	r1, #1
     da0:	d9eb      	bls.n	d7a <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     da2:	0a3f      	lsrs	r7, r7, #8
     da4:	706f      	strb	r7, [r5, #1]
     da6:	3502      	adds	r5, #2
     da8:	e7e8      	b.n	d7c <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
     daa:	2101      	movs	r1, #1
     dac:	468b      	mov	fp, r1
     dae:	44d8      	add	r8, fp
     db0:	e037      	b.n	e22 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     db2:	2301      	movs	r3, #1
     db4:	425b      	negs	r3, r3
     db6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     db8:	3381      	adds	r3, #129	; 0x81
     dba:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
     dbc:	2013      	movs	r0, #19
     dbe:	4240      	negs	r0, r0
	tmp &= mask;
     dc0:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     dc2:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     dc4:	4213      	tst	r3, r2
     dc6:	d0fc      	beq.n	dc2 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     dc8:	2303      	movs	r3, #3
     dca:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     dcc:	b003      	add	sp, #12
     dce:	bc3c      	pop	{r2, r3, r4, r5}
     dd0:	4690      	mov	r8, r2
     dd2:	4699      	mov	r9, r3
     dd4:	46a2      	mov	sl, r4
     dd6:	46ab      	mov	fp, r5
     dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     dda:	4293      	cmp	r3, r2
     ddc:	d8d5      	bhi.n	d8a <_spi_m_sync_trans+0x62>
     dde:	e7ef      	b.n	dc0 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
     de0:	2004      	movs	r0, #4
     de2:	4240      	negs	r0, r0
     de4:	e7f2      	b.n	dcc <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
     de6:	2014      	movs	r0, #20
     de8:	4240      	negs	r0, r0
     dea:	e7ef      	b.n	dcc <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     dec:	4290      	cmp	r0, r2
     dee:	d8c6      	bhi.n	d7e <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     df0:	4667      	mov	r7, ip
     df2:	421f      	tst	r7, r3
     df4:	d0c3      	beq.n	d7e <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     df6:	464f      	mov	r7, r9
     df8:	88ff      	ldrh	r7, [r7, #6]
     dfa:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
     dfc:	4647      	mov	r7, r8
     dfe:	2f00      	cmp	r7, #0
     e00:	d00f      	beq.n	e22 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
     e02:	783f      	ldrb	r7, [r7, #0]
     e04:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
     e06:	9901      	ldr	r1, [sp, #4]
     e08:	2901      	cmp	r1, #1
     e0a:	d9ce      	bls.n	daa <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
     e0c:	4647      	mov	r7, r8
     e0e:	787f      	ldrb	r7, [r7, #1]
     e10:	023f      	lsls	r7, r7, #8
     e12:	46bb      	mov	fp, r7
     e14:	4657      	mov	r7, sl
     e16:	4659      	mov	r1, fp
     e18:	430f      	orrs	r7, r1
     e1a:	46ba      	mov	sl, r7
			ctrl->txbuf++;
     e1c:	2102      	movs	r1, #2
     e1e:	468b      	mov	fp, r1
     e20:	44d8      	add	r8, fp
	ctrl->txcnt++;
     e22:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     e24:	4657      	mov	r7, sl
     e26:	62a7      	str	r7, [r4, #40]	; 0x28
     e28:	e7a9      	b.n	d7e <_spi_m_sync_trans+0x56>
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000a72 	.word	0x00000a72
     e30:	00001d5c 	.word	0x00001d5c
     e34:	00000a7d 	.word	0x00000a7d

00000e38 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
     e38:	b510      	push	{r4, lr}
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     e3a:	4b0e      	ldr	r3, [pc, #56]	; (e74 <_sysctrl_init_sources+0x3c>)
     e3c:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     e3e:	6a18      	ldr	r0, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     e40:	490d      	ldr	r1, [pc, #52]	; (e78 <_sysctrl_init_sources+0x40>)
     e42:	4011      	ands	r1, r2
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     e44:	0f80      	lsrs	r0, r0, #30
     e46:	0780      	lsls	r0, r0, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     e48:	4c0c      	ldr	r4, [pc, #48]	; (e7c <_sysctrl_init_sources+0x44>)
     e4a:	4320      	orrs	r0, r4
     e4c:	4301      	orrs	r1, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     e4e:	6219      	str	r1, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e50:	6999      	ldr	r1, [r3, #24]
     e52:	2002      	movs	r0, #2
     e54:	4301      	orrs	r1, r0
     e56:	6199      	str	r1, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
     e58:	02d2      	lsls	r2, r2, #11
     e5a:	0ed2      	lsrs	r2, r2, #27
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     e5c:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     e5e:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     e60:	2208      	movs	r2, #8
     e62:	68cb      	ldr	r3, [r1, #12]
     e64:	421a      	tst	r2, r3
     e66:	d0fc      	beq.n	e62 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     e68:	4a02      	ldr	r2, [pc, #8]	; (e74 <_sysctrl_init_sources+0x3c>)
     e6a:	6a13      	ldr	r3, [r2, #32]
     e6c:	2180      	movs	r1, #128	; 0x80
     e6e:	430b      	orrs	r3, r1
     e70:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     e72:	bd10      	pop	{r4, pc}
     e74:	40000800 	.word	0x40000800
     e78:	0fff0000 	.word	0x0fff0000
     e7c:	00000302 	.word	0x00000302

00000e80 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     e80:	2202      	movs	r2, #2
     e82:	4b1c      	ldr	r3, [pc, #112]	; (ef4 <_sysctrl_init_referenced_generators+0x74>)
     e84:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     e86:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     e88:	320e      	adds	r2, #14
     e8a:	68cb      	ldr	r3, [r1, #12]
     e8c:	421a      	tst	r2, r3
     e8e:	d0fc      	beq.n	e8a <_sysctrl_init_referenced_generators+0xa>
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     e90:	4a19      	ldr	r2, [pc, #100]	; (ef8 <_sysctrl_init_referenced_generators+0x78>)
     e92:	4b18      	ldr	r3, [pc, #96]	; (ef4 <_sysctrl_init_referenced_generators+0x74>)
     e94:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     e96:	4b19      	ldr	r3, [pc, #100]	; (efc <_sysctrl_init_referenced_generators+0x7c>)
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	0e9b      	lsrs	r3, r3, #26
     e9c:	2b3f      	cmp	r3, #63	; 0x3f
     e9e:	d01f      	beq.n	ee0 <_sysctrl_init_referenced_generators+0x60>
     ea0:	029b      	lsls	r3, r3, #10
     ea2:	2280      	movs	r2, #128	; 0x80
     ea4:	0092      	lsls	r2, r2, #2
     ea6:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     ea8:	4a12      	ldr	r2, [pc, #72]	; (ef4 <_sysctrl_init_referenced_generators+0x74>)
     eaa:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     eac:	2302      	movs	r3, #2
     eae:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     eb0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     eb2:	075b      	lsls	r3, r3, #29
     eb4:	d517      	bpl.n	ee6 <_sysctrl_init_referenced_generators+0x66>
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     eb6:	0011      	movs	r1, r2
	tmp &= mask;
     eb8:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     eba:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     ebc:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     ebe:	2bd0      	cmp	r3, #208	; 0xd0
     ec0:	d1fb      	bne.n	eba <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     ec2:	4a0c      	ldr	r2, [pc, #48]	; (ef4 <_sysctrl_init_referenced_generators+0x74>)
     ec4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     ec6:	2180      	movs	r1, #128	; 0x80
     ec8:	430b      	orrs	r3, r1
     eca:	8493      	strh	r3, [r2, #36]	; 0x24
	return ((Gclk *)hw)->GENDIV.reg;
}

static inline bool hri_gclk_get_STATUS_SYNCBUSY_bit(const void *const hw)
{
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     ecc:	4a0c      	ldr	r2, [pc, #48]	; (f00 <_sysctrl_init_referenced_generators+0x80>)
     ece:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     ed0:	09db      	lsrs	r3, r3, #7
     ed2:	d1fc      	bne.n	ece <_sysctrl_init_referenced_generators+0x4e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     ed4:	4a07      	ldr	r2, [pc, #28]	; (ef4 <_sysctrl_init_referenced_generators+0x74>)
     ed6:	6993      	ldr	r3, [r2, #24]
     ed8:	2102      	movs	r1, #2
     eda:	438b      	bics	r3, r1
     edc:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     ede:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     ee0:	23fc      	movs	r3, #252	; 0xfc
     ee2:	01db      	lsls	r3, r3, #7
     ee4:	e7e0      	b.n	ea8 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     ee6:	4903      	ldr	r1, [pc, #12]	; (ef4 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     ee8:	2210      	movs	r2, #16
     eea:	68cb      	ldr	r3, [r1, #12]
     eec:	421a      	tst	r2, r3
     eee:	d0fc      	beq.n	eea <_sysctrl_init_referenced_generators+0x6a>
     ef0:	e7e7      	b.n	ec2 <_sysctrl_init_referenced_generators+0x42>
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	40000800 	.word	0x40000800
     ef8:	04010000 	.word	0x04010000
     efc:	00806024 	.word	0x00806024
     f00:	40000c00 	.word	0x40000c00

00000f04 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     f04:	2000      	movs	r0, #0
     f06:	4770      	bx	lr

00000f08 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     f08:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     f0a:	7c83      	ldrb	r3, [r0, #18]
     f0c:	220f      	movs	r2, #15
     f0e:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f10:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     f12:	3a08      	subs	r2, #8
     f14:	400a      	ands	r2, r1
     f16:	2a01      	cmp	r2, #1
     f18:	d00b      	beq.n	f32 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f1a:	015a      	lsls	r2, r3, #5
     f1c:	4919      	ldr	r1, [pc, #100]	; (f84 <_usb_d_dev_handle_setup+0x7c>)
     f1e:	468c      	mov	ip, r1
     f20:	4462      	add	r2, ip
     f22:	2110      	movs	r1, #16
     f24:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     f26:	015b      	lsls	r3, r3, #5
     f28:	4a17      	ldr	r2, [pc, #92]	; (f88 <_usb_d_dev_handle_setup+0x80>)
     f2a:	4694      	mov	ip, r2
     f2c:	4463      	add	r3, ip
     f2e:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     f30:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     f32:	064a      	lsls	r2, r1, #25
     f34:	d50e      	bpl.n	f54 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     f36:	7cc2      	ldrb	r2, [r0, #19]
     f38:	2140      	movs	r1, #64	; 0x40
     f3a:	438a      	bics	r2, r1
     f3c:	74c2      	strb	r2, [r0, #19]
     f3e:	015a      	lsls	r2, r3, #5
     f40:	4c12      	ldr	r4, [pc, #72]	; (f8c <_usb_d_dev_handle_setup+0x84>)
     f42:	46a4      	mov	ip, r4
     f44:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     f46:	2580      	movs	r5, #128	; 0x80
     f48:	2482      	movs	r4, #130	; 0x82
     f4a:	0064      	lsls	r4, r4, #1
     f4c:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     f4e:	2406      	movs	r4, #6
     f50:	34ff      	adds	r4, #255	; 0xff
     f52:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     f54:	7cc2      	ldrb	r2, [r0, #19]
     f56:	2108      	movs	r1, #8
     f58:	438a      	bics	r2, r1
     f5a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     f5c:	490c      	ldr	r1, [pc, #48]	; (f90 <_usb_d_dev_handle_setup+0x88>)
     f5e:	015a      	lsls	r2, r3, #5
     f60:	188c      	adds	r4, r1, r2
     f62:	2500      	movs	r5, #0
     f64:	72a5      	strb	r5, [r4, #10]
     f66:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f68:	0013      	movs	r3, r2
     f6a:	4c06      	ldr	r4, [pc, #24]	; (f84 <_usb_d_dev_handle_setup+0x7c>)
     f6c:	46a4      	mov	ip, r4
     f6e:	4463      	add	r3, ip
     f70:	246f      	movs	r4, #111	; 0x6f
     f72:	71dc      	strb	r4, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f74:	4b04      	ldr	r3, [pc, #16]	; (f88 <_usb_d_dev_handle_setup+0x80>)
     f76:	469c      	mov	ip, r3
     f78:	4462      	add	r2, ip
     f7a:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     f7c:	7c80      	ldrb	r0, [r0, #18]
     f7e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     f80:	4798      	blx	r3
     f82:	e7d5      	b.n	f30 <_usb_d_dev_handle_setup+0x28>
     f84:	41005100 	.word	0x41005100
     f88:	41005108 	.word	0x41005108
     f8c:	41005000 	.word	0x41005000
     f90:	2000009c 	.word	0x2000009c

00000f94 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     f94:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     f96:	7c83      	ldrb	r3, [r0, #18]
     f98:	2bff      	cmp	r3, #255	; 0xff
     f9a:	d002      	beq.n	fa2 <_usb_d_dev_trans_done+0xe>
     f9c:	7cc2      	ldrb	r2, [r0, #19]
     f9e:	0652      	lsls	r2, r2, #25
     fa0:	d400      	bmi.n	fa4 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     fa2:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     fa4:	7cc2      	ldrb	r2, [r0, #19]
     fa6:	2440      	movs	r4, #64	; 0x40
     fa8:	43a2      	bics	r2, r4
     faa:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     fac:	6882      	ldr	r2, [r0, #8]
     fae:	4802      	ldr	r0, [pc, #8]	; (fb8 <_usb_d_dev_trans_done+0x24>)
     fb0:	6f04      	ldr	r4, [r0, #112]	; 0x70
     fb2:	0018      	movs	r0, r3
     fb4:	47a0      	blx	r4
     fb6:	e7f4      	b.n	fa2 <_usb_d_dev_trans_done+0xe>
     fb8:	2000009c 	.word	0x2000009c

00000fbc <_usb_d_dev_handle_stall>:
{
     fbc:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     fbe:	2220      	movs	r2, #32
     fc0:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     fc2:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     fc4:	7c81      	ldrb	r1, [r0, #18]
     fc6:	230f      	movs	r3, #15
     fc8:	400b      	ands	r3, r1
     fca:	015b      	lsls	r3, r3, #5
     fcc:	4903      	ldr	r1, [pc, #12]	; (fdc <_usb_d_dev_handle_stall+0x20>)
     fce:	468c      	mov	ip, r1
     fd0:	4463      	add	r3, ip
     fd2:	701a      	strb	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
     fd4:	2101      	movs	r1, #1
     fd6:	4b02      	ldr	r3, [pc, #8]	; (fe0 <_usb_d_dev_handle_stall+0x24>)
     fd8:	4798      	blx	r3
}
     fda:	bd10      	pop	{r4, pc}
     fdc:	41005108 	.word	0x41005108
     fe0:	00000f95 	.word	0x00000f95

00000fe4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     fe4:	b530      	push	{r4, r5, lr}
     fe6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     fe8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     fea:	ac01      	add	r4, sp, #4
     fec:	2525      	movs	r5, #37	; 0x25
     fee:	7025      	strb	r5, [r4, #0]
     ff0:	3525      	adds	r5, #37	; 0x25
     ff2:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     ff4:	2bff      	cmp	r3, #255	; 0xff
     ff6:	d01b      	beq.n	1030 <_usb_d_dev_trans_stop+0x4c>
     ff8:	7cc4      	ldrb	r4, [r0, #19]
     ffa:	0664      	lsls	r4, r4, #25
     ffc:	d518      	bpl.n	1030 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ffe:	240f      	movs	r4, #15
    1000:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1002:	2900      	cmp	r1, #0
    1004:	d016      	beq.n	1034 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1006:	015c      	lsls	r4, r3, #5
    1008:	4d0e      	ldr	r5, [pc, #56]	; (1044 <_usb_d_dev_trans_stop+0x60>)
    100a:	46ac      	mov	ip, r5
    100c:	4464      	add	r4, ip
    100e:	2580      	movs	r5, #128	; 0x80
    1010:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1012:	ac01      	add	r4, sp, #4
    1014:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1016:	0159      	lsls	r1, r3, #5
    1018:	4d0a      	ldr	r5, [pc, #40]	; (1044 <_usb_d_dev_trans_stop+0x60>)
    101a:	46ac      	mov	ip, r5
    101c:	4461      	add	r1, ip
    101e:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1020:	015b      	lsls	r3, r3, #5
    1022:	4909      	ldr	r1, [pc, #36]	; (1048 <_usb_d_dev_trans_stop+0x64>)
    1024:	468c      	mov	ip, r1
    1026:	4463      	add	r3, ip
    1028:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    102a:	0011      	movs	r1, r2
    102c:	4b07      	ldr	r3, [pc, #28]	; (104c <_usb_d_dev_trans_stop+0x68>)
    102e:	4798      	blx	r3
}
    1030:	b003      	add	sp, #12
    1032:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1034:	015c      	lsls	r4, r3, #5
    1036:	4d03      	ldr	r5, [pc, #12]	; (1044 <_usb_d_dev_trans_stop+0x60>)
    1038:	46ac      	mov	ip, r5
    103a:	4464      	add	r4, ip
    103c:	2540      	movs	r5, #64	; 0x40
    103e:	7165      	strb	r5, [r4, #5]
    1040:	e7e7      	b.n	1012 <_usb_d_dev_trans_stop+0x2e>
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	41005100 	.word	0x41005100
    1048:	41005108 	.word	0x41005108
    104c:	00000f95 	.word	0x00000f95

00001050 <_usb_d_dev_handle_trfail>:
{
    1050:	b570      	push	{r4, r5, r6, lr}
    1052:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1054:	7c83      	ldrb	r3, [r0, #18]
    1056:	220f      	movs	r2, #15
    1058:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    105a:	aa01      	add	r2, sp, #4
    105c:	2404      	movs	r4, #4
    105e:	7014      	strb	r4, [r2, #0]
    1060:	3404      	adds	r4, #4
    1062:	7054      	strb	r4, [r2, #1]
    1064:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    1066:	2900      	cmp	r1, #0
    1068:	d031      	beq.n	10ce <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    106a:	001a      	movs	r2, r3
    106c:	3208      	adds	r2, #8
    106e:	0152      	lsls	r2, r2, #5
    1070:	4c32      	ldr	r4, [pc, #200]	; (113c <_usb_d_dev_handle_trfail+0xec>)
    1072:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1074:	0664      	lsls	r4, r4, #25
    1076:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1078:	010a      	lsls	r2, r1, #4
    107a:	1952      	adds	r2, r2, r5
    107c:	4d30      	ldr	r5, [pc, #192]	; (1140 <_usb_d_dev_handle_trfail+0xf0>)
    107e:	18aa      	adds	r2, r5, r2
    1080:	7a95      	ldrb	r5, [r2, #10]
    1082:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1084:	2c02      	cmp	r4, #2
    1086:	d02a      	beq.n	10de <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    1088:	07ac      	lsls	r4, r5, #30
    108a:	d541      	bpl.n	1110 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    108c:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    108e:	7a94      	ldrb	r4, [r2, #10]
    1090:	2602      	movs	r6, #2
    1092:	43b4      	bics	r4, r6
    1094:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1096:	aa01      	add	r2, sp, #4
    1098:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    109a:	015a      	lsls	r2, r3, #5
    109c:	4e29      	ldr	r6, [pc, #164]	; (1144 <_usb_d_dev_handle_trfail+0xf4>)
    109e:	46b4      	mov	ip, r6
    10a0:	4462      	add	r2, ip
    10a2:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10a4:	015b      	lsls	r3, r3, #5
    10a6:	4a28      	ldr	r2, [pc, #160]	; (1148 <_usb_d_dev_handle_trfail+0xf8>)
    10a8:	4694      	mov	ip, r2
    10aa:	4463      	add	r3, ip
    10ac:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    10ae:	2307      	movs	r3, #7
    10b0:	402b      	ands	r3, r5
    10b2:	2b01      	cmp	r3, #1
    10b4:	d13f      	bne.n	1136 <_usb_d_dev_handle_trfail+0xe6>
    10b6:	7cc3      	ldrb	r3, [r0, #19]
    10b8:	065b      	lsls	r3, r3, #25
    10ba:	d53c      	bpl.n	1136 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    10bc:	7cc3      	ldrb	r3, [r0, #19]
    10be:	09db      	lsrs	r3, r3, #7
    10c0:	4299      	cmp	r1, r3
    10c2:	d038      	beq.n	1136 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    10c4:	2200      	movs	r2, #0
    10c6:	0019      	movs	r1, r3
    10c8:	4b20      	ldr	r3, [pc, #128]	; (114c <_usb_d_dev_handle_trfail+0xfc>)
    10ca:	4798      	blx	r3
    10cc:	e033      	b.n	1136 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    10ce:	001a      	movs	r2, r3
    10d0:	3208      	adds	r2, #8
    10d2:	0152      	lsls	r2, r2, #5
    10d4:	4c19      	ldr	r4, [pc, #100]	; (113c <_usb_d_dev_handle_trfail+0xec>)
    10d6:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    10d8:	2207      	movs	r2, #7
    10da:	4014      	ands	r4, r2
    10dc:	e7cc      	b.n	1078 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    10de:	07ec      	lsls	r4, r5, #31
    10e0:	d5d2      	bpl.n	1088 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    10e2:	7a94      	ldrb	r4, [r2, #10]
    10e4:	2501      	movs	r5, #1
    10e6:	43ac      	bics	r4, r5
    10e8:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    10ea:	aa01      	add	r2, sp, #4
    10ec:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10ee:	015a      	lsls	r2, r3, #5
    10f0:	4d14      	ldr	r5, [pc, #80]	; (1144 <_usb_d_dev_handle_trfail+0xf4>)
    10f2:	46ac      	mov	ip, r5
    10f4:	4462      	add	r2, ip
    10f6:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10f8:	015b      	lsls	r3, r3, #5
    10fa:	4a13      	ldr	r2, [pc, #76]	; (1148 <_usb_d_dev_handle_trfail+0xf8>)
    10fc:	4694      	mov	ip, r2
    10fe:	4463      	add	r3, ip
    1100:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1102:	1e4b      	subs	r3, r1, #1
    1104:	4199      	sbcs	r1, r3
    1106:	b2c9      	uxtb	r1, r1
    1108:	2204      	movs	r2, #4
    110a:	4b10      	ldr	r3, [pc, #64]	; (114c <_usb_d_dev_handle_trfail+0xfc>)
    110c:	4798      	blx	r3
    110e:	e012      	b.n	1136 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1110:	005a      	lsls	r2, r3, #1
    1112:	1852      	adds	r2, r2, r1
    1114:	0112      	lsls	r2, r2, #4
    1116:	480a      	ldr	r0, [pc, #40]	; (1140 <_usb_d_dev_handle_trfail+0xf0>)
    1118:	1882      	adds	r2, r0, r2
    111a:	2000      	movs	r0, #0
    111c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    111e:	aa01      	add	r2, sp, #4
    1120:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1122:	015a      	lsls	r2, r3, #5
    1124:	4807      	ldr	r0, [pc, #28]	; (1144 <_usb_d_dev_handle_trfail+0xf4>)
    1126:	4684      	mov	ip, r0
    1128:	4462      	add	r2, ip
    112a:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    112c:	015b      	lsls	r3, r3, #5
    112e:	4a06      	ldr	r2, [pc, #24]	; (1148 <_usb_d_dev_handle_trfail+0xf8>)
    1130:	4694      	mov	ip, r2
    1132:	4463      	add	r3, ip
    1134:	7019      	strb	r1, [r3, #0]
}
    1136:	b002      	add	sp, #8
    1138:	bd70      	pop	{r4, r5, r6, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	41005000 	.word	0x41005000
    1140:	2000009c 	.word	0x2000009c
    1144:	41005100 	.word	0x41005100
    1148:	41005108 	.word	0x41005108
    114c:	00000fe5 	.word	0x00000fe5

00001150 <_usb_d_dev_reset_epts>:
{
    1150:	b5f0      	push	{r4, r5, r6, r7, lr}
    1152:	46c6      	mov	lr, r8
    1154:	b500      	push	{lr}
    1156:	4d0c      	ldr	r5, [pc, #48]	; (1188 <_usb_d_dev_reset_epts+0x38>)
    1158:	002c      	movs	r4, r5
    115a:	3474      	adds	r4, #116	; 0x74
    115c:	3529      	adds	r5, #41	; 0x29
    115e:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1160:	4b0a      	ldr	r3, [pc, #40]	; (118c <_usb_d_dev_reset_epts+0x3c>)
    1162:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1164:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1166:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1168:	2103      	movs	r1, #3
    116a:	0020      	movs	r0, r4
    116c:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    116e:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1170:	74e6      	strb	r6, [r4, #19]
    1172:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1174:	42ac      	cmp	r4, r5
    1176:	d1f7      	bne.n	1168 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1178:	2260      	movs	r2, #96	; 0x60
    117a:	2100      	movs	r1, #0
    117c:	4802      	ldr	r0, [pc, #8]	; (1188 <_usb_d_dev_reset_epts+0x38>)
    117e:	4b04      	ldr	r3, [pc, #16]	; (1190 <_usb_d_dev_reset_epts+0x40>)
    1180:	4798      	blx	r3
}
    1182:	bc04      	pop	{r2}
    1184:	4690      	mov	r8, r2
    1186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1188:	2000009c 	.word	0x2000009c
    118c:	00000f95 	.word	0x00000f95
    1190:	00001ce7 	.word	0x00001ce7

00001194 <_usb_d_dev_in_next>:
{
    1194:	b5f0      	push	{r4, r5, r6, r7, lr}
    1196:	46c6      	mov	lr, r8
    1198:	b500      	push	{lr}
    119a:	0004      	movs	r4, r0
    119c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    119e:	7c83      	ldrb	r3, [r0, #18]
    11a0:	250f      	movs	r5, #15
    11a2:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    11a4:	2900      	cmp	r1, #0
    11a6:	d100      	bne.n	11aa <_usb_d_dev_in_next+0x16>
    11a8:	e0aa      	b.n	1300 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    11aa:	016a      	lsls	r2, r5, #5
    11ac:	4b5a      	ldr	r3, [pc, #360]	; (1318 <_usb_d_dev_in_next+0x184>)
    11ae:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    11b0:	6958      	ldr	r0, [r3, #20]
    11b2:	0480      	lsls	r0, r0, #18
    11b4:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    11b6:	8a23      	ldrh	r3, [r4, #16]
    11b8:	4a58      	ldr	r2, [pc, #352]	; (131c <_usb_d_dev_in_next+0x188>)
    11ba:	4293      	cmp	r3, r2
    11bc:	d100      	bne.n	11c0 <_usb_d_dev_in_next+0x2c>
    11be:	e09a      	b.n	12f6 <_usb_d_dev_in_next+0x162>
    11c0:	3b01      	subs	r3, #1
    11c2:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    11c4:	7ce3      	ldrb	r3, [r4, #19]
    11c6:	2707      	movs	r7, #7
    11c8:	401f      	ands	r7, r3
	if (isr) {
    11ca:	2e00      	cmp	r6, #0
    11cc:	d005      	beq.n	11da <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    11ce:	016b      	lsls	r3, r5, #5
    11d0:	4953      	ldr	r1, [pc, #332]	; (1320 <_usb_d_dev_in_next+0x18c>)
    11d2:	468c      	mov	ip, r1
    11d4:	4463      	add	r3, ip
    11d6:	2102      	movs	r1, #2
    11d8:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    11da:	68a3      	ldr	r3, [r4, #8]
    11dc:	18c1      	adds	r1, r0, r3
    11de:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    11e0:	6863      	ldr	r3, [r4, #4]
    11e2:	4299      	cmp	r1, r3
    11e4:	d24a      	bcs.n	127c <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    11e6:	1a5b      	subs	r3, r3, r1
    11e8:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    11ea:	7ce2      	ldrb	r2, [r4, #19]
    11ec:	0692      	lsls	r2, r2, #26
    11ee:	d535      	bpl.n	125c <_usb_d_dev_in_next+0xc8>
    11f0:	8a22      	ldrh	r2, [r4, #16]
    11f2:	1c10      	adds	r0, r2, #0
    11f4:	b292      	uxth	r2, r2
    11f6:	429a      	cmp	r2, r3
    11f8:	d900      	bls.n	11fc <_usb_d_dev_in_next+0x68>
    11fa:	1c18      	adds	r0, r3, #0
    11fc:	b283      	uxth	r3, r0
    11fe:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1200:	6823      	ldr	r3, [r4, #0]
    1202:	469c      	mov	ip, r3
    1204:	4461      	add	r1, ip
    1206:	4642      	mov	r2, r8
    1208:	68e0      	ldr	r0, [r4, #12]
    120a:	4b46      	ldr	r3, [pc, #280]	; (1324 <_usb_d_dev_in_next+0x190>)
    120c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    120e:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1210:	016a      	lsls	r2, r5, #5
    1212:	4b41      	ldr	r3, [pc, #260]	; (1318 <_usb_d_dev_in_next+0x184>)
    1214:	189b      	adds	r3, r3, r2
    1216:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1218:	016a      	lsls	r2, r5, #5
    121a:	4b3f      	ldr	r3, [pc, #252]	; (1318 <_usb_d_dev_in_next+0x184>)
    121c:	189b      	adds	r3, r3, r2
    121e:	695a      	ldr	r2, [r3, #20]
    1220:	4641      	mov	r1, r8
    1222:	0489      	lsls	r1, r1, #18
    1224:	0c89      	lsrs	r1, r1, #18
    1226:	0b92      	lsrs	r2, r2, #14
    1228:	0392      	lsls	r2, r2, #14
    122a:	430a      	orrs	r2, r1
    122c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    122e:	695a      	ldr	r2, [r3, #20]
    1230:	493d      	ldr	r1, [pc, #244]	; (1328 <_usb_d_dev_in_next+0x194>)
    1232:	400a      	ands	r2, r1
    1234:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1236:	2e00      	cmp	r6, #0
    1238:	d107      	bne.n	124a <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    123a:	2f01      	cmp	r7, #1
    123c:	d059      	beq.n	12f2 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    123e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1240:	016b      	lsls	r3, r5, #5
    1242:	493a      	ldr	r1, [pc, #232]	; (132c <_usb_d_dev_in_next+0x198>)
    1244:	468c      	mov	ip, r1
    1246:	4463      	add	r3, ip
    1248:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    124a:	016d      	lsls	r5, r5, #5
    124c:	4b34      	ldr	r3, [pc, #208]	; (1320 <_usb_d_dev_in_next+0x18c>)
    124e:	469c      	mov	ip, r3
    1250:	4465      	add	r5, ip
    1252:	2380      	movs	r3, #128	; 0x80
    1254:	716b      	strb	r3, [r5, #5]
}
    1256:	bc04      	pop	{r2}
    1258:	4690      	mov	r8, r2
    125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125c:	1c1a      	adds	r2, r3, #0
    125e:	2080      	movs	r0, #128	; 0x80
    1260:	0180      	lsls	r0, r0, #6
    1262:	4283      	cmp	r3, r0
    1264:	d901      	bls.n	126a <_usb_d_dev_in_next+0xd6>
    1266:	4b32      	ldr	r3, [pc, #200]	; (1330 <_usb_d_dev_in_next+0x19c>)
    1268:	881a      	ldrh	r2, [r3, #0]
    126a:	b293      	uxth	r3, r2
    126c:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    126e:	6823      	ldr	r3, [r4, #0]
    1270:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1272:	016a      	lsls	r2, r5, #5
    1274:	4b28      	ldr	r3, [pc, #160]	; (1318 <_usb_d_dev_in_next+0x184>)
    1276:	189b      	adds	r3, r3, r2
    1278:	6119      	str	r1, [r3, #16]
    127a:	e7cd      	b.n	1218 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    127c:	7ce3      	ldrb	r3, [r4, #19]
    127e:	06db      	lsls	r3, r3, #27
    1280:	d50f      	bpl.n	12a2 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1282:	7ce3      	ldrb	r3, [r4, #19]
    1284:	2210      	movs	r2, #16
    1286:	4393      	bics	r3, r2
    1288:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    128a:	016a      	lsls	r2, r5, #5
    128c:	4b22      	ldr	r3, [pc, #136]	; (1318 <_usb_d_dev_in_next+0x184>)
    128e:	189b      	adds	r3, r3, r2
    1290:	695a      	ldr	r2, [r3, #20]
    1292:	0b92      	lsrs	r2, r2, #14
    1294:	0392      	lsls	r2, r2, #14
    1296:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1298:	695a      	ldr	r2, [r3, #20]
    129a:	4923      	ldr	r1, [pc, #140]	; (1328 <_usb_d_dev_in_next+0x194>)
    129c:	400a      	ands	r2, r1
    129e:	615a      	str	r2, [r3, #20]
    12a0:	e7c9      	b.n	1236 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    12a2:	2f01      	cmp	r7, #1
    12a4:	d00e      	beq.n	12c4 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12a6:	016d      	lsls	r5, r5, #5
    12a8:	4b22      	ldr	r3, [pc, #136]	; (1334 <_usb_d_dev_in_next+0x1a0>)
    12aa:	469c      	mov	ip, r3
    12ac:	4465      	add	r5, ip
    12ae:	234a      	movs	r3, #74	; 0x4a
    12b0:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    12b2:	8a21      	ldrh	r1, [r4, #16]
    12b4:	4002      	ands	r2, r0
    12b6:	4291      	cmp	r1, r2
    12b8:	d00b      	beq.n	12d2 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    12ba:	2100      	movs	r1, #0
    12bc:	0020      	movs	r0, r4
    12be:	4b1e      	ldr	r3, [pc, #120]	; (1338 <_usb_d_dev_in_next+0x1a4>)
    12c0:	4798      	blx	r3
	return;
    12c2:	e7c8      	b.n	1256 <_usb_d_dev_in_next+0xc2>
    12c4:	016d      	lsls	r5, r5, #5
    12c6:	4b1b      	ldr	r3, [pc, #108]	; (1334 <_usb_d_dev_in_next+0x1a0>)
    12c8:	469c      	mov	ip, r3
    12ca:	4465      	add	r5, ip
    12cc:	234b      	movs	r3, #75	; 0x4b
    12ce:	702b      	strb	r3, [r5, #0]
    12d0:	e7ef      	b.n	12b2 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    12d2:	7ce3      	ldrb	r3, [r4, #19]
    12d4:	2240      	movs	r2, #64	; 0x40
    12d6:	4393      	bics	r3, r2
    12d8:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    12da:	7ca0      	ldrb	r0, [r4, #18]
    12dc:	4b0e      	ldr	r3, [pc, #56]	; (1318 <_usb_d_dev_in_next+0x184>)
    12de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    12e0:	68a1      	ldr	r1, [r4, #8]
    12e2:	4798      	blx	r3
    12e4:	2800      	cmp	r0, #0
    12e6:	d1b6      	bne.n	1256 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    12e8:	7ce3      	ldrb	r3, [r4, #19]
    12ea:	2240      	movs	r2, #64	; 0x40
    12ec:	4313      	orrs	r3, r2
    12ee:	74e3      	strb	r3, [r4, #19]
    12f0:	e7e3      	b.n	12ba <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    12f2:	224e      	movs	r2, #78	; 0x4e
    12f4:	e7a4      	b.n	1240 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    12f6:	7ce7      	ldrb	r7, [r4, #19]
    12f8:	2307      	movs	r3, #7
    12fa:	401f      	ands	r7, r3
    12fc:	4a07      	ldr	r2, [pc, #28]	; (131c <_usb_d_dev_in_next+0x188>)
    12fe:	e766      	b.n	11ce <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1300:	8a03      	ldrh	r3, [r0, #16]
    1302:	4a06      	ldr	r2, [pc, #24]	; (131c <_usb_d_dev_in_next+0x188>)
    1304:	2000      	movs	r0, #0
    1306:	4293      	cmp	r3, r2
    1308:	d000      	beq.n	130c <_usb_d_dev_in_next+0x178>
    130a:	e759      	b.n	11c0 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    130c:	7ce3      	ldrb	r3, [r4, #19]
    130e:	2707      	movs	r7, #7
    1310:	401f      	ands	r7, r3
    1312:	2000      	movs	r0, #0
    1314:	4a01      	ldr	r2, [pc, #4]	; (131c <_usb_d_dev_in_next+0x188>)
    1316:	e760      	b.n	11da <_usb_d_dev_in_next+0x46>
    1318:	2000009c 	.word	0x2000009c
    131c:	000003ff 	.word	0x000003ff
    1320:	41005100 	.word	0x41005100
    1324:	00001cd5 	.word	0x00001cd5
    1328:	f0003fff 	.word	0xf0003fff
    132c:	41005109 	.word	0x41005109
    1330:	00001d78 	.word	0x00001d78
    1334:	41005108 	.word	0x41005108
    1338:	00000f95 	.word	0x00000f95

0000133c <_usb_d_dev_out_next>:
{
    133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    133e:	46de      	mov	lr, fp
    1340:	4657      	mov	r7, sl
    1342:	464e      	mov	r6, r9
    1344:	4645      	mov	r5, r8
    1346:	b5e0      	push	{r5, r6, r7, lr}
    1348:	0004      	movs	r4, r0
    134a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    134c:	7c83      	ldrb	r3, [r0, #18]
    134e:	250f      	movs	r5, #15
    1350:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1352:	2900      	cmp	r1, #0
    1354:	d057      	beq.n	1406 <_usb_d_dev_out_next+0xca>
    1356:	016a      	lsls	r2, r5, #5
    1358:	4b7d      	ldr	r3, [pc, #500]	; (1550 <_usb_d_dev_out_next+0x214>)
    135a:	189b      	adds	r3, r3, r2
    135c:	685a      	ldr	r2, [r3, #4]
    135e:	0112      	lsls	r2, r2, #4
    1360:	0c92      	lsrs	r2, r2, #18
    1362:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1364:	685f      	ldr	r7, [r3, #4]
    1366:	04bf      	lsls	r7, r7, #18
    1368:	0cbf      	lsrs	r7, r7, #18
    136a:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    136c:	8a06      	ldrh	r6, [r0, #16]
    136e:	4b79      	ldr	r3, [pc, #484]	; (1554 <_usb_d_dev_out_next+0x218>)
    1370:	429e      	cmp	r6, r3
    1372:	d100      	bne.n	1376 <_usb_d_dev_out_next+0x3a>
    1374:	e0cd      	b.n	1512 <_usb_d_dev_out_next+0x1d6>
    1376:	3e01      	subs	r6, #1
    1378:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    137a:	465f      	mov	r7, fp
    137c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    137e:	7ce3      	ldrb	r3, [r4, #19]
    1380:	2207      	movs	r2, #7
    1382:	401a      	ands	r2, r3
    1384:	4691      	mov	r9, r2
	if (isr) {
    1386:	4643      	mov	r3, r8
    1388:	2b00      	cmp	r3, #0
    138a:	d005      	beq.n	1398 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    138c:	016b      	lsls	r3, r5, #5
    138e:	4a72      	ldr	r2, [pc, #456]	; (1558 <_usb_d_dev_out_next+0x21c>)
    1390:	4694      	mov	ip, r2
    1392:	4463      	add	r3, ip
    1394:	2201      	movs	r2, #1
    1396:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1398:	7ce3      	ldrb	r3, [r4, #19]
    139a:	069b      	lsls	r3, r3, #26
    139c:	d50f      	bpl.n	13be <_usb_d_dev_out_next+0x82>
    139e:	6863      	ldr	r3, [r4, #4]
    13a0:	2b00      	cmp	r3, #0
    13a2:	d039      	beq.n	1418 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    13a4:	68a0      	ldr	r0, [r4, #8]
    13a6:	1a1b      	subs	r3, r3, r0
    13a8:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    13aa:	6822      	ldr	r2, [r4, #0]
    13ac:	4694      	mov	ip, r2
    13ae:	4460      	add	r0, ip
    13b0:	68e1      	ldr	r1, [r4, #12]
    13b2:	001a      	movs	r2, r3
    13b4:	42bb      	cmp	r3, r7
    13b6:	d900      	bls.n	13ba <_usb_d_dev_out_next+0x7e>
    13b8:	003a      	movs	r2, r7
    13ba:	4b68      	ldr	r3, [pc, #416]	; (155c <_usb_d_dev_out_next+0x220>)
    13bc:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    13be:	6863      	ldr	r3, [r4, #4]
    13c0:	2b00      	cmp	r3, #0
    13c2:	d029      	beq.n	1418 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    13c4:	4642      	mov	r2, r8
    13c6:	2a00      	cmp	r2, #0
    13c8:	d042      	beq.n	1450 <_usb_d_dev_out_next+0x114>
    13ca:	8a22      	ldrh	r2, [r4, #16]
    13cc:	42ba      	cmp	r2, r7
    13ce:	d93f      	bls.n	1450 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    13d0:	7ce3      	ldrb	r3, [r4, #19]
    13d2:	2210      	movs	r2, #16
    13d4:	4393      	bics	r3, r2
    13d6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    13d8:	68a3      	ldr	r3, [r4, #8]
    13da:	445b      	add	r3, fp
    13dc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    13de:	464b      	mov	r3, r9
    13e0:	2b01      	cmp	r3, #1
    13e2:	d100      	bne.n	13e6 <_usb_d_dev_out_next+0xaa>
    13e4:	e087      	b.n	14f6 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13e6:	016b      	lsls	r3, r5, #5
    13e8:	4a5d      	ldr	r2, [pc, #372]	; (1560 <_usb_d_dev_out_next+0x224>)
    13ea:	4694      	mov	ip, r2
    13ec:	4463      	add	r3, ip
    13ee:	2225      	movs	r2, #37	; 0x25
    13f0:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    13f2:	2d00      	cmp	r5, #0
    13f4:	d102      	bne.n	13fc <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    13f6:	4b56      	ldr	r3, [pc, #344]	; (1550 <_usb_d_dev_out_next+0x214>)
    13f8:	68e2      	ldr	r2, [r4, #12]
    13fa:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    13fc:	2100      	movs	r1, #0
    13fe:	0020      	movs	r0, r4
    1400:	4b58      	ldr	r3, [pc, #352]	; (1564 <_usb_d_dev_out_next+0x228>)
    1402:	4798      	blx	r3
	return;
    1404:	e059      	b.n	14ba <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1406:	8a06      	ldrh	r6, [r0, #16]
    1408:	4b52      	ldr	r3, [pc, #328]	; (1554 <_usb_d_dev_out_next+0x218>)
    140a:	429e      	cmp	r6, r3
    140c:	d100      	bne.n	1410 <_usb_d_dev_out_next+0xd4>
    140e:	e08e      	b.n	152e <_usb_d_dev_out_next+0x1f2>
    1410:	2300      	movs	r3, #0
    1412:	469b      	mov	fp, r3
    1414:	469a      	mov	sl, r3
    1416:	e7ae      	b.n	1376 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1418:	7ce3      	ldrb	r3, [r4, #19]
    141a:	06db      	lsls	r3, r3, #27
    141c:	d400      	bmi.n	1420 <_usb_d_dev_out_next+0xe4>
    141e:	e07f      	b.n	1520 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    1420:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1422:	2210      	movs	r2, #16
    1424:	4393      	bics	r3, r2
    1426:	2220      	movs	r2, #32
    1428:	4313      	orrs	r3, r2
    142a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    142c:	4a48      	ldr	r2, [pc, #288]	; (1550 <_usb_d_dev_out_next+0x214>)
    142e:	016b      	lsls	r3, r5, #5
    1430:	68e1      	ldr	r1, [r4, #12]
    1432:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1434:	8a21      	ldrh	r1, [r4, #16]
    1436:	18d3      	adds	r3, r2, r3
    1438:	685a      	ldr	r2, [r3, #4]
    143a:	0489      	lsls	r1, r1, #18
    143c:	0909      	lsrs	r1, r1, #4
    143e:	484a      	ldr	r0, [pc, #296]	; (1568 <_usb_d_dev_out_next+0x22c>)
    1440:	4002      	ands	r2, r0
    1442:	430a      	orrs	r2, r1
    1444:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1446:	685a      	ldr	r2, [r3, #4]
    1448:	0b92      	lsrs	r2, r2, #14
    144a:	0392      	lsls	r2, r2, #14
    144c:	605a      	str	r2, [r3, #4]
    144e:	e022      	b.n	1496 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    1450:	68a2      	ldr	r2, [r4, #8]
    1452:	4452      	add	r2, sl
    1454:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1456:	4293      	cmp	r3, r2
    1458:	d9c1      	bls.n	13de <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    145a:	1a9b      	subs	r3, r3, r2
    145c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    145e:	7ce1      	ldrb	r1, [r4, #19]
    1460:	0689      	lsls	r1, r1, #26
    1462:	d530      	bpl.n	14c6 <_usb_d_dev_out_next+0x18a>
    1464:	8a22      	ldrh	r2, [r4, #16]
    1466:	1c11      	adds	r1, r2, #0
    1468:	b292      	uxth	r2, r2
    146a:	429a      	cmp	r2, r3
    146c:	d900      	bls.n	1470 <_usb_d_dev_out_next+0x134>
    146e:	1c19      	adds	r1, r3, #0
    1470:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1472:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1474:	016a      	lsls	r2, r5, #5
    1476:	4936      	ldr	r1, [pc, #216]	; (1550 <_usb_d_dev_out_next+0x214>)
    1478:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    147a:	016a      	lsls	r2, r5, #5
    147c:	4934      	ldr	r1, [pc, #208]	; (1550 <_usb_d_dev_out_next+0x214>)
    147e:	1889      	adds	r1, r1, r2
    1480:	684a      	ldr	r2, [r1, #4]
    1482:	049b      	lsls	r3, r3, #18
    1484:	091b      	lsrs	r3, r3, #4
    1486:	4838      	ldr	r0, [pc, #224]	; (1568 <_usb_d_dev_out_next+0x22c>)
    1488:	4002      	ands	r2, r0
    148a:	4313      	orrs	r3, r2
    148c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    148e:	684b      	ldr	r3, [r1, #4]
    1490:	0b9b      	lsrs	r3, r3, #14
    1492:	039b      	lsls	r3, r3, #14
    1494:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1496:	4643      	mov	r3, r8
    1498:	2b00      	cmp	r3, #0
    149a:	d108      	bne.n	14ae <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    149c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    149e:	464b      	mov	r3, r9
    14a0:	2b01      	cmp	r3, #1
    14a2:	d02f      	beq.n	1504 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    14a4:	016b      	lsls	r3, r5, #5
    14a6:	4931      	ldr	r1, [pc, #196]	; (156c <_usb_d_dev_out_next+0x230>)
    14a8:	468c      	mov	ip, r1
    14aa:	4463      	add	r3, ip
    14ac:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    14ae:	016d      	lsls	r5, r5, #5
    14b0:	4b29      	ldr	r3, [pc, #164]	; (1558 <_usb_d_dev_out_next+0x21c>)
    14b2:	469c      	mov	ip, r3
    14b4:	4465      	add	r5, ip
    14b6:	2340      	movs	r3, #64	; 0x40
    14b8:	712b      	strb	r3, [r5, #4]
}
    14ba:	bc3c      	pop	{r2, r3, r4, r5}
    14bc:	4690      	mov	r8, r2
    14be:	4699      	mov	r9, r3
    14c0:	46a2      	mov	sl, r4
    14c2:	46ab      	mov	fp, r5
    14c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    14c6:	8a21      	ldrh	r1, [r4, #16]
    14c8:	428b      	cmp	r3, r1
    14ca:	d90a      	bls.n	14e2 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    14cc:	2180      	movs	r1, #128	; 0x80
    14ce:	0189      	lsls	r1, r1, #6
    14d0:	428b      	cmp	r3, r1
    14d2:	d80d      	bhi.n	14f0 <_usb_d_dev_out_next+0x1b4>
    14d4:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    14d6:	6821      	ldr	r1, [r4, #0]
    14d8:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    14da:	0169      	lsls	r1, r5, #5
    14dc:	481c      	ldr	r0, [pc, #112]	; (1550 <_usb_d_dev_out_next+0x214>)
    14de:	500a      	str	r2, [r1, r0]
    14e0:	e7cb      	b.n	147a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    14e2:	428b      	cmp	r3, r1
    14e4:	d2f7      	bcs.n	14d6 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    14e6:	7ce1      	ldrb	r1, [r4, #19]
    14e8:	2020      	movs	r0, #32
    14ea:	4301      	orrs	r1, r0
    14ec:	74e1      	strb	r1, [r4, #19]
    14ee:	e7f2      	b.n	14d6 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    14f0:	2380      	movs	r3, #128	; 0x80
    14f2:	019b      	lsls	r3, r3, #6
    14f4:	e7ef      	b.n	14d6 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    14f6:	016b      	lsls	r3, r5, #5
    14f8:	4a19      	ldr	r2, [pc, #100]	; (1560 <_usb_d_dev_out_next+0x224>)
    14fa:	4694      	mov	ip, r2
    14fc:	4463      	add	r3, ip
    14fe:	222d      	movs	r2, #45	; 0x2d
    1500:	701a      	strb	r2, [r3, #0]
    1502:	e776      	b.n	13f2 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1504:	016a      	lsls	r2, r5, #5
    1506:	4b12      	ldr	r3, [pc, #72]	; (1550 <_usb_d_dev_out_next+0x214>)
    1508:	189b      	adds	r3, r3, r2
    150a:	2200      	movs	r2, #0
    150c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    150e:	322d      	adds	r2, #45	; 0x2d
    1510:	e7c8      	b.n	14a4 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1512:	05bf      	lsls	r7, r7, #22
    1514:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1516:	7cc3      	ldrb	r3, [r0, #19]
    1518:	2207      	movs	r2, #7
    151a:	401a      	ands	r2, r3
    151c:	4691      	mov	r9, r2
    151e:	e735      	b.n	138c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1520:	4643      	mov	r3, r8
    1522:	2b00      	cmp	r3, #0
    1524:	d10c      	bne.n	1540 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    1526:	68a3      	ldr	r3, [r4, #8]
    1528:	4453      	add	r3, sl
    152a:	60a3      	str	r3, [r4, #8]
    152c:	e757      	b.n	13de <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    152e:	7cc3      	ldrb	r3, [r0, #19]
    1530:	2207      	movs	r2, #7
    1532:	401a      	ands	r2, r3
    1534:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    1536:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1538:	2300      	movs	r3, #0
    153a:	469b      	mov	fp, r3
    153c:	469a      	mov	sl, r3
    153e:	e72b      	b.n	1398 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1540:	8a23      	ldrh	r3, [r4, #16]
    1542:	42bb      	cmp	r3, r7
    1544:	d900      	bls.n	1548 <_usb_d_dev_out_next+0x20c>
    1546:	e743      	b.n	13d0 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    1548:	68a3      	ldr	r3, [r4, #8]
    154a:	4453      	add	r3, sl
    154c:	60a3      	str	r3, [r4, #8]
    154e:	e746      	b.n	13de <_usb_d_dev_out_next+0xa2>
    1550:	2000009c 	.word	0x2000009c
    1554:	000003ff 	.word	0x000003ff
    1558:	41005100 	.word	0x41005100
    155c:	00001cd5 	.word	0x00001cd5
    1560:	41005108 	.word	0x41005108
    1564:	00000f95 	.word	0x00000f95
    1568:	f0003fff 	.word	0xf0003fff
    156c:	41005109 	.word	0x41005109

00001570 <_usb_d_dev_init>:
{
    1570:	b510      	push	{r4, lr}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1572:	492a      	ldr	r1, [pc, #168]	; (161c <_usb_d_dev_init+0xac>)
    1574:	2201      	movs	r2, #1
    1576:	788b      	ldrb	r3, [r1, #2]
    1578:	4213      	tst	r3, r2
    157a:	d1fc      	bne.n	1576 <_usb_d_dev_init+0x6>
    157c:	4927      	ldr	r1, [pc, #156]	; (161c <_usb_d_dev_init+0xac>)
    157e:	2203      	movs	r2, #3
    1580:	788b      	ldrb	r3, [r1, #2]
    1582:	4213      	tst	r3, r2
    1584:	d1fc      	bne.n	1580 <_usb_d_dev_init+0x10>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    1586:	4b25      	ldr	r3, [pc, #148]	; (161c <_usb_d_dev_init+0xac>)
    1588:	781b      	ldrb	r3, [r3, #0]
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
    158a:	079b      	lsls	r3, r3, #30
    158c:	d442      	bmi.n	1614 <_usb_d_dev_init+0xa4>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    158e:	4923      	ldr	r1, [pc, #140]	; (161c <_usb_d_dev_init+0xac>)
    1590:	2201      	movs	r2, #1
    1592:	788b      	ldrb	r3, [r1, #2]
    1594:	4213      	tst	r3, r2
    1596:	d1fc      	bne.n	1592 <_usb_d_dev_init+0x22>
	((Usb *)hw)->DEVICE.CTRLA.reg |= USB_CTRLA_SWRST;
    1598:	4a20      	ldr	r2, [pc, #128]	; (161c <_usb_d_dev_init+0xac>)
    159a:	7813      	ldrb	r3, [r2, #0]
    159c:	2101      	movs	r1, #1
    159e:	430b      	orrs	r3, r1
    15a0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    15a2:	0011      	movs	r1, r2
    15a4:	2201      	movs	r2, #1
    15a6:	788b      	ldrb	r3, [r1, #2]
    15a8:	4213      	tst	r3, r2
    15aa:	d1fc      	bne.n	15a6 <_usb_d_dev_init+0x36>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    15ac:	4b1c      	ldr	r3, [pc, #112]	; (1620 <_usb_d_dev_init+0xb0>)
    15ae:	4a1d      	ldr	r2, [pc, #116]	; (1624 <_usb_d_dev_init+0xb4>)
    15b0:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    15b2:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    15b4:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    15b6:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    15b8:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    15ba:	4b1b      	ldr	r3, [pc, #108]	; (1628 <_usb_d_dev_init+0xb8>)
    15bc:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    15be:	4b1b      	ldr	r3, [pc, #108]	; (162c <_usb_d_dev_init+0xbc>)
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    15c4:	211f      	movs	r1, #31
    15c6:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    15c8:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    15ca:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    15cc:	019b      	lsls	r3, r3, #6
    15ce:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    15d0:	2a1f      	cmp	r2, #31
    15d2:	d019      	beq.n	1608 <_usb_d_dev_init+0x98>
	if (pad_transp == 0x1F) {
    15d4:	291f      	cmp	r1, #31
    15d6:	d019      	beq.n	160c <_usb_d_dev_init+0x9c>
	if (pad_trim == 0x7) {
    15d8:	2b07      	cmp	r3, #7
    15da:	d019      	beq.n	1610 <_usb_d_dev_init+0xa0>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    15dc:	0192      	lsls	r2, r2, #6
    15de:	430a      	orrs	r2, r1
    15e0:	031b      	lsls	r3, r3, #12
    15e2:	4313      	orrs	r3, r2
    15e4:	4a0d      	ldr	r2, [pc, #52]	; (161c <_usb_d_dev_init+0xac>)
    15e6:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    15e8:	78d3      	ldrb	r3, [r2, #3]
    15ea:	2103      	movs	r1, #3
    15ec:	430b      	orrs	r3, r1
    15ee:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    15f0:	78d3      	ldrb	r3, [r2, #3]
    15f2:	210c      	movs	r1, #12
    15f4:	430b      	orrs	r3, r1
    15f6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    15f8:	2304      	movs	r3, #4
    15fa:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    15fc:	4b08      	ldr	r3, [pc, #32]	; (1620 <_usb_d_dev_init+0xb0>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    15fe:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1600:	2301      	movs	r3, #1
    1602:	8113      	strh	r3, [r2, #8]
	return ERR_NONE;
    1604:	2000      	movs	r0, #0
}
    1606:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1608:	3a1a      	subs	r2, #26
    160a:	e7e3      	b.n	15d4 <_usb_d_dev_init+0x64>
		pad_transp = 29;
    160c:	3902      	subs	r1, #2
    160e:	e7e3      	b.n	15d8 <_usb_d_dev_init+0x68>
		pad_trim = 5;
    1610:	3b02      	subs	r3, #2
    1612:	e7e3      	b.n	15dc <_usb_d_dev_init+0x6c>
		return ERR_DENIED;
    1614:	2011      	movs	r0, #17
    1616:	4240      	negs	r0, r0
    1618:	e7f5      	b.n	1606 <_usb_d_dev_init+0x96>
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	41005000 	.word	0x41005000
    1620:	2000009c 	.word	0x2000009c
    1624:	00000f05 	.word	0x00000f05
    1628:	00001151 	.word	0x00001151
    162c:	00806024 	.word	0x00806024

00001630 <_usb_d_dev_ep_stall>:
{
    1630:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1632:	230f      	movs	r3, #15
    1634:	4003      	ands	r3, r0
    1636:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1638:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    163a:	2b00      	cmp	r3, #0
    163c:	d009      	beq.n	1652 <_usb_d_dev_ep_stall+0x22>
    163e:	001a      	movs	r2, r3
    1640:	2800      	cmp	r0, #0
    1642:	db04      	blt.n	164e <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    1644:	2b02      	cmp	r3, #2
    1646:	d905      	bls.n	1654 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    1648:	2012      	movs	r0, #18
    164a:	4240      	negs	r0, r0
    164c:	e019      	b.n	1682 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    164e:	1c9a      	adds	r2, r3, #2
    1650:	e7f8      	b.n	1644 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    1652:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1654:	2901      	cmp	r1, #1
    1656:	d015      	beq.n	1684 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1658:	2900      	cmp	r1, #0
    165a:	d036      	beq.n	16ca <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    165c:	0093      	lsls	r3, r2, #2
    165e:	189b      	adds	r3, r3, r2
    1660:	009b      	lsls	r3, r3, #2
    1662:	4a47      	ldr	r2, [pc, #284]	; (1780 <_usb_d_dev_ep_stall+0x150>)
    1664:	18d2      	adds	r2, r2, r3
    1666:	3286      	adds	r2, #134	; 0x86
    1668:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    166a:	230f      	movs	r3, #15
    166c:	4013      	ands	r3, r2
    166e:	015b      	lsls	r3, r3, #5
    1670:	4a44      	ldr	r2, [pc, #272]	; (1784 <_usb_d_dev_ep_stall+0x154>)
    1672:	4694      	mov	ip, r2
    1674:	4463      	add	r3, ip
    1676:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1678:	2310      	movs	r3, #16
    167a:	40a3      	lsls	r3, r4
    167c:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    167e:	1e43      	subs	r3, r0, #1
    1680:	4198      	sbcs	r0, r3
}
    1682:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1684:	2510      	movs	r5, #16
    1686:	40a5      	lsls	r5, r4
    1688:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    168a:	493d      	ldr	r1, [pc, #244]	; (1780 <_usb_d_dev_ep_stall+0x150>)
    168c:	0090      	lsls	r0, r2, #2
    168e:	1883      	adds	r3, r0, r2
    1690:	009b      	lsls	r3, r3, #2
    1692:	18cb      	adds	r3, r1, r3
    1694:	3386      	adds	r3, #134	; 0x86
    1696:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1698:	230f      	movs	r3, #15
    169a:	4033      	ands	r3, r6
    169c:	015e      	lsls	r6, r3, #5
    169e:	4f39      	ldr	r7, [pc, #228]	; (1784 <_usb_d_dev_ep_stall+0x154>)
    16a0:	46bc      	mov	ip, r7
    16a2:	4466      	add	r6, ip
    16a4:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    16a6:	2520      	movs	r5, #32
    16a8:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    16aa:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    16ac:	015b      	lsls	r3, r3, #5
    16ae:	4d36      	ldr	r5, [pc, #216]	; (1788 <_usb_d_dev_ep_stall+0x158>)
    16b0:	46ac      	mov	ip, r5
    16b2:	4463      	add	r3, ip
    16b4:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    16b6:	1882      	adds	r2, r0, r2
    16b8:	0092      	lsls	r2, r2, #2
    16ba:	188a      	adds	r2, r1, r2
    16bc:	3280      	adds	r2, #128	; 0x80
    16be:	79d3      	ldrb	r3, [r2, #7]
    16c0:	2108      	movs	r1, #8
    16c2:	430b      	orrs	r3, r1
    16c4:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    16c6:	2000      	movs	r0, #0
    16c8:	e7db      	b.n	1682 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    16ca:	0093      	lsls	r3, r2, #2
    16cc:	189b      	adds	r3, r3, r2
    16ce:	0099      	lsls	r1, r3, #2
    16d0:	4b2b      	ldr	r3, [pc, #172]	; (1780 <_usb_d_dev_ep_stall+0x150>)
    16d2:	185b      	adds	r3, r3, r1
    16d4:	3386      	adds	r3, #134	; 0x86
    16d6:	781b      	ldrb	r3, [r3, #0]
    16d8:	210f      	movs	r1, #15
    16da:	400b      	ands	r3, r1
    16dc:	015d      	lsls	r5, r3, #5
    16de:	492b      	ldr	r1, [pc, #172]	; (178c <_usb_d_dev_ep_stall+0x15c>)
    16e0:	468c      	mov	ip, r1
    16e2:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    16e4:	2183      	movs	r1, #131	; 0x83
    16e6:	0049      	lsls	r1, r1, #1
    16e8:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    16ea:	39f6      	subs	r1, #246	; 0xf6
    16ec:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    16ee:	2000      	movs	r0, #0
	if (!is_stalled) {
    16f0:	420e      	tst	r6, r1
    16f2:	d0c6      	beq.n	1682 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    16f4:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    16f6:	3005      	adds	r0, #5
    16f8:	30ff      	adds	r0, #255	; 0xff
    16fa:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    16fc:	2120      	movs	r1, #32
    16fe:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1700:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1702:	015b      	lsls	r3, r3, #5
    1704:	4e22      	ldr	r6, [pc, #136]	; (1790 <_usb_d_dev_ep_stall+0x160>)
    1706:	46b4      	mov	ip, r6
    1708:	4463      	add	r3, ip
    170a:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    170c:	2308      	movs	r3, #8
    170e:	33ff      	adds	r3, #255	; 0xff
    1710:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1712:	420b      	tst	r3, r1
    1714:	d009      	beq.n	172a <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1716:	2308      	movs	r3, #8
    1718:	33ff      	adds	r3, #255	; 0xff
    171a:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    171c:	3b07      	subs	r3, #7
    171e:	3bff      	subs	r3, #255	; 0xff
    1720:	40a3      	lsls	r3, r4
    1722:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1724:	2182      	movs	r1, #130	; 0x82
    1726:	0049      	lsls	r1, r1, #1
    1728:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    172a:	0093      	lsls	r3, r2, #2
    172c:	189b      	adds	r3, r3, r2
    172e:	0099      	lsls	r1, r3, #2
    1730:	4b13      	ldr	r3, [pc, #76]	; (1780 <_usb_d_dev_ep_stall+0x150>)
    1732:	185b      	adds	r3, r3, r1
    1734:	3370      	adds	r3, #112	; 0x70
    1736:	7dd9      	ldrb	r1, [r3, #23]
    1738:	2307      	movs	r3, #7
    173a:	400b      	ands	r3, r1
    173c:	2b01      	cmp	r3, #1
    173e:	d00b      	beq.n	1758 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    1740:	0093      	lsls	r3, r2, #2
    1742:	189a      	adds	r2, r3, r2
    1744:	0092      	lsls	r2, r2, #2
    1746:	4b0e      	ldr	r3, [pc, #56]	; (1780 <_usb_d_dev_ep_stall+0x150>)
    1748:	189b      	adds	r3, r3, r2
    174a:	3380      	adds	r3, #128	; 0x80
    174c:	79da      	ldrb	r2, [r3, #7]
    174e:	2108      	movs	r1, #8
    1750:	438a      	bics	r2, r1
    1752:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1754:	2000      	movs	r0, #0
    1756:	e794      	b.n	1682 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1758:	3306      	adds	r3, #6
    175a:	33ff      	adds	r3, #255	; 0xff
    175c:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    175e:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1760:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1762:	4219      	tst	r1, r3
    1764:	d000      	beq.n	1768 <_usb_d_dev_ep_stall+0x138>
    1766:	e78c      	b.n	1682 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1768:	0093      	lsls	r3, r2, #2
    176a:	189a      	adds	r2, r3, r2
    176c:	0092      	lsls	r2, r2, #2
    176e:	4b04      	ldr	r3, [pc, #16]	; (1780 <_usb_d_dev_ep_stall+0x150>)
    1770:	189b      	adds	r3, r3, r2
    1772:	3380      	adds	r3, #128	; 0x80
    1774:	79da      	ldrb	r2, [r3, #7]
    1776:	2108      	movs	r1, #8
    1778:	438a      	bics	r2, r1
    177a:	71da      	strb	r2, [r3, #7]
    177c:	e781      	b.n	1682 <_usb_d_dev_ep_stall+0x52>
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	2000009c 	.word	0x2000009c
    1784:	41005100 	.word	0x41005100
    1788:	41005109 	.word	0x41005109
    178c:	41005000 	.word	0x41005000
    1790:	41005108 	.word	0x41005108

00001794 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1794:	b570      	push	{r4, r5, r6, lr}
    1796:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1798:	230f      	movs	r3, #15
    179a:	4018      	ands	r0, r3
    179c:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    179e:	4b16      	ldr	r3, [pc, #88]	; (17f8 <_usb_d_dev_ep_read_req+0x64>)
    17a0:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    17a2:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    17a4:	685b      	ldr	r3, [r3, #4]
    17a6:	049b      	lsls	r3, r3, #18
    17a8:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    17aa:	2802      	cmp	r0, #2
    17ac:	d81a      	bhi.n	17e4 <_usb_d_dev_ep_read_req+0x50>
    17ae:	2d00      	cmp	r5, #0
    17b0:	d01b      	beq.n	17ea <_usb_d_dev_ep_read_req+0x56>
    17b2:	4b12      	ldr	r3, [pc, #72]	; (17fc <_usb_d_dev_ep_read_req+0x68>)
    17b4:	469c      	mov	ip, r3
    17b6:	4464      	add	r4, ip
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17b8:	2380      	movs	r3, #128	; 0x80
    17ba:	005b      	lsls	r3, r3, #1
    17bc:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    17be:	2b11      	cmp	r3, #17
    17c0:	d116      	bne.n	17f0 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    17c2:	2308      	movs	r3, #8
    17c4:	33ff      	adds	r3, #255	; 0xff
    17c6:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    17c8:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    17ca:	06db      	lsls	r3, r3, #27
    17cc:	d400      	bmi.n	17d0 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    17ce:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    17d0:	2208      	movs	r2, #8
    17d2:	0028      	movs	r0, r5
    17d4:	4b0a      	ldr	r3, [pc, #40]	; (1800 <_usb_d_dev_ep_read_req+0x6c>)
    17d6:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17d8:	2210      	movs	r2, #16
    17da:	2308      	movs	r3, #8
    17dc:	33ff      	adds	r3, #255	; 0xff
    17de:	54e2      	strb	r2, [r4, r3]
	return bytes;
    17e0:	0030      	movs	r0, r6
    17e2:	e7f4      	b.n	17ce <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    17e4:	2012      	movs	r0, #18
    17e6:	4240      	negs	r0, r0
    17e8:	e7f1      	b.n	17ce <_usb_d_dev_ep_read_req+0x3a>
    17ea:	2012      	movs	r0, #18
    17ec:	4240      	negs	r0, r0
    17ee:	e7ee      	b.n	17ce <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    17f0:	2013      	movs	r0, #19
    17f2:	4240      	negs	r0, r0
    17f4:	e7eb      	b.n	17ce <_usb_d_dev_ep_read_req+0x3a>
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	2000009c 	.word	0x2000009c
    17fc:	41005000 	.word	0x41005000
    1800:	00001cd5 	.word	0x00001cd5

00001804 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1804:	b5f0      	push	{r4, r5, r6, r7, lr}
    1806:	46de      	mov	lr, fp
    1808:	4657      	mov	r7, sl
    180a:	464e      	mov	r6, r9
    180c:	4645      	mov	r5, r8
    180e:	b5e0      	push	{r5, r6, r7, lr}
    1810:	b085      	sub	sp, #20
    1812:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1814:	7a06      	ldrb	r6, [r0, #8]
    1816:	230f      	movs	r3, #15
    1818:	4033      	ands	r3, r6
    181a:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    181c:	2b00      	cmp	r3, #0
    181e:	d100      	bne.n	1822 <_usb_d_dev_ep_trans+0x1e>
    1820:	e0d3      	b.n	19ca <_usb_d_dev_ep_trans+0x1c6>
    1822:	0018      	movs	r0, r3
    1824:	2e00      	cmp	r6, #0
    1826:	db39      	blt.n	189c <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    1828:	0004      	movs	r4, r0
    182a:	4a73      	ldr	r2, [pc, #460]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    182c:	3260      	adds	r2, #96	; 0x60
    182e:	1c41      	adds	r1, r0, #1
    1830:	008d      	lsls	r5, r1, #2
    1832:	186d      	adds	r5, r5, r1
    1834:	00ad      	lsls	r5, r5, #2
    1836:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1838:	0081      	lsls	r1, r0, #2
    183a:	1809      	adds	r1, r1, r0
    183c:	0089      	lsls	r1, r1, #2
    183e:	1852      	adds	r2, r2, r1
    1840:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1842:	4a6e      	ldr	r2, [pc, #440]	; (19fc <_usb_d_dev_ep_trans+0x1f8>)
    1844:	4291      	cmp	r1, r2
    1846:	d02b      	beq.n	18a0 <_usb_d_dev_ep_trans+0x9c>
    1848:	1e4f      	subs	r7, r1, #1
    184a:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    184c:	4642      	mov	r2, r8
    184e:	6852      	ldr	r2, [r2, #4]
    1850:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1852:	2b02      	cmp	r3, #2
    1854:	d900      	bls.n	1858 <_usb_d_dev_ep_trans+0x54>
    1856:	e0a4      	b.n	19a2 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1858:	4643      	mov	r3, r8
    185a:	681b      	ldr	r3, [r3, #0]
    185c:	4868      	ldr	r0, [pc, #416]	; (1a00 <_usb_d_dev_ep_trans+0x1fc>)
    185e:	4283      	cmp	r3, r0
    1860:	d920      	bls.n	18a4 <_usb_d_dev_ep_trans+0xa0>
    1862:	1898      	adds	r0, r3, r2
    1864:	9001      	str	r0, [sp, #4]
    1866:	4867      	ldr	r0, [pc, #412]	; (1a04 <_usb_d_dev_ep_trans+0x200>)
    1868:	4684      	mov	ip, r0
    186a:	9801      	ldr	r0, [sp, #4]
    186c:	4560      	cmp	r0, ip
    186e:	d819      	bhi.n	18a4 <_usb_d_dev_ep_trans+0xa0>
    1870:	079b      	lsls	r3, r3, #30
    1872:	d117      	bne.n	18a4 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1874:	2e00      	cmp	r6, #0
    1876:	db32      	blt.n	18de <_usb_d_dev_ep_trans+0xda>
    1878:	4291      	cmp	r1, r2
    187a:	d900      	bls.n	187e <_usb_d_dev_ep_trans+0x7a>
    187c:	e0af      	b.n	19de <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    187e:	2f00      	cmp	r7, #0
    1880:	d030      	beq.n	18e4 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    1882:	00a3      	lsls	r3, r4, #2
    1884:	191b      	adds	r3, r3, r4
    1886:	009a      	lsls	r2, r3, #2
    1888:	4b5b      	ldr	r3, [pc, #364]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    188a:	189b      	adds	r3, r3, r2
    188c:	3380      	adds	r3, #128	; 0x80
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	2b00      	cmp	r3, #0
    1892:	d100      	bne.n	1896 <_usb_d_dev_ep_trans+0x92>
    1894:	e08b      	b.n	19ae <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    1896:	2300      	movs	r3, #0
    1898:	4699      	mov	r9, r3
    189a:	e00f      	b.n	18bc <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    189c:	1c98      	adds	r0, r3, #2
    189e:	e7c3      	b.n	1828 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    18a0:	000f      	movs	r7, r1
    18a2:	e7d3      	b.n	184c <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    18a4:	00a3      	lsls	r3, r4, #2
    18a6:	191b      	adds	r3, r3, r4
    18a8:	009a      	lsls	r2, r3, #2
    18aa:	4b53      	ldr	r3, [pc, #332]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    18ac:	189b      	adds	r3, r3, r2
    18ae:	3380      	adds	r3, #128	; 0x80
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d100      	bne.n	18b8 <_usb_d_dev_ep_trans+0xb4>
    18b6:	e077      	b.n	19a8 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    18b8:	2301      	movs	r3, #1
    18ba:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    18bc:	00a3      	lsls	r3, r4, #2
    18be:	191b      	adds	r3, r3, r4
    18c0:	009a      	lsls	r2, r3, #2
    18c2:	4b4d      	ldr	r3, [pc, #308]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    18c4:	189b      	adds	r3, r3, r2
    18c6:	3370      	adds	r3, #112	; 0x70
    18c8:	7ddb      	ldrb	r3, [r3, #23]
		return USB_HALTED;
    18ca:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    18cc:	071b      	lsls	r3, r3, #28
    18ce:	d50c      	bpl.n	18ea <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    18d0:	b005      	add	sp, #20
    18d2:	bc3c      	pop	{r2, r3, r4, r5}
    18d4:	4690      	mov	r8, r2
    18d6:	4699      	mov	r9, r3
    18d8:	46a2      	mov	sl, r4
    18da:	46ab      	mov	fp, r5
    18dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    18de:	2300      	movs	r3, #0
    18e0:	4699      	mov	r9, r3
    18e2:	e7eb      	b.n	18bc <_usb_d_dev_ep_trans+0xb8>
    18e4:	2300      	movs	r3, #0
    18e6:	4699      	mov	r9, r3
    18e8:	e7e8      	b.n	18bc <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    18ea:	a803      	add	r0, sp, #12
    18ec:	4b46      	ldr	r3, [pc, #280]	; (1a08 <_usb_d_dev_ep_trans+0x204>)
    18ee:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    18f0:	00a3      	lsls	r3, r4, #2
    18f2:	191b      	adds	r3, r3, r4
    18f4:	009a      	lsls	r2, r3, #2
    18f6:	4b40      	ldr	r3, [pc, #256]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    18f8:	189b      	adds	r3, r3, r2
    18fa:	3370      	adds	r3, #112	; 0x70
    18fc:	7ddb      	ldrb	r3, [r3, #23]
    18fe:	065b      	lsls	r3, r3, #25
    1900:	d444      	bmi.n	198c <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    1902:	00a3      	lsls	r3, r4, #2
    1904:	191b      	adds	r3, r3, r4
    1906:	009b      	lsls	r3, r3, #2
    1908:	4a3b      	ldr	r2, [pc, #236]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    190a:	4693      	mov	fp, r2
    190c:	449b      	add	fp, r3
    190e:	2380      	movs	r3, #128	; 0x80
    1910:	445b      	add	r3, fp
    1912:	469a      	mov	sl, r3
    1914:	79db      	ldrb	r3, [r3, #7]
    1916:	2240      	movs	r2, #64	; 0x40
    1918:	4313      	orrs	r3, r2
    191a:	4652      	mov	r2, sl
    191c:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    191e:	a803      	add	r0, sp, #12
    1920:	4b3a      	ldr	r3, [pc, #232]	; (1a0c <_usb_d_dev_ep_trans+0x208>)
    1922:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1924:	465b      	mov	r3, fp
    1926:	4642      	mov	r2, r8
    1928:	6812      	ldr	r2, [r2, #0]
    192a:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    192c:	4642      	mov	r2, r8
    192e:	6852      	ldr	r2, [r2, #4]
    1930:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1932:	2300      	movs	r3, #0
    1934:	465a      	mov	r2, fp
    1936:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1938:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    193a:	01d2      	lsls	r2, r2, #7
    193c:	4653      	mov	r3, sl
    193e:	79d9      	ldrb	r1, [r3, #7]
    1940:	237f      	movs	r3, #127	; 0x7f
    1942:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1944:	4649      	mov	r1, r9
    1946:	0149      	lsls	r1, r1, #5
    1948:	4313      	orrs	r3, r2
    194a:	2220      	movs	r2, #32
    194c:	4393      	bics	r3, r2
    194e:	430b      	orrs	r3, r1
    1950:	4652      	mov	r2, sl
    1952:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1954:	4643      	mov	r3, r8
    1956:	7a5b      	ldrb	r3, [r3, #9]
    1958:	2200      	movs	r2, #0
    195a:	2b00      	cmp	r3, #0
    195c:	d002      	beq.n	1964 <_usb_d_dev_ep_trans+0x160>
    195e:	427a      	negs	r2, r7
    1960:	417a      	adcs	r2, r7
    1962:	b2d2      	uxtb	r2, r2
    1964:	00a3      	lsls	r3, r4, #2
    1966:	191c      	adds	r4, r3, r4
    1968:	00a4      	lsls	r4, r4, #2
    196a:	4b23      	ldr	r3, [pc, #140]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    196c:	191b      	adds	r3, r3, r4
    196e:	3380      	adds	r3, #128	; 0x80
    1970:	0112      	lsls	r2, r2, #4
    1972:	79df      	ldrb	r7, [r3, #7]
    1974:	2110      	movs	r1, #16
    1976:	438f      	bics	r7, r1
    1978:	4317      	orrs	r7, r2
    197a:	71df      	strb	r7, [r3, #7]
	if (dir) {
    197c:	2e00      	cmp	r6, #0
    197e:	db0a      	blt.n	1996 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1980:	2100      	movs	r1, #0
    1982:	0028      	movs	r0, r5
    1984:	4b22      	ldr	r3, [pc, #136]	; (1a10 <_usb_d_dev_ep_trans+0x20c>)
    1986:	4798      	blx	r3
	return ERR_NONE;
    1988:	2000      	movs	r0, #0
    198a:	e7a1      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    198c:	a803      	add	r0, sp, #12
    198e:	4b1f      	ldr	r3, [pc, #124]	; (1a0c <_usb_d_dev_ep_trans+0x208>)
    1990:	4798      	blx	r3
		return USB_BUSY;
    1992:	2001      	movs	r0, #1
    1994:	e79c      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1996:	2100      	movs	r1, #0
    1998:	0028      	movs	r0, r5
    199a:	4b1e      	ldr	r3, [pc, #120]	; (1a14 <_usb_d_dev_ep_trans+0x210>)
    199c:	4798      	blx	r3
	return ERR_NONE;
    199e:	2000      	movs	r0, #0
    19a0:	e796      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    19a2:	2012      	movs	r0, #18
    19a4:	4240      	negs	r0, r0
    19a6:	e793      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    19a8:	2013      	movs	r0, #19
    19aa:	4240      	negs	r0, r0
    19ac:	e790      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    19ae:	2012      	movs	r0, #18
    19b0:	4240      	negs	r0, r0
    19b2:	e78d      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    19b4:	2013      	movs	r0, #19
    19b6:	4240      	negs	r0, r0
    19b8:	e78a      	b.n	18d0 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    19ba:	4643      	mov	r3, r8
    19bc:	685a      	ldr	r2, [r3, #4]
    19be:	0597      	lsls	r7, r2, #22
    19c0:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    19c2:	4d0d      	ldr	r5, [pc, #52]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    19c4:	3574      	adds	r5, #116	; 0x74
    19c6:	2400      	movs	r4, #0
    19c8:	e746      	b.n	1858 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    19ca:	4a0b      	ldr	r2, [pc, #44]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    19cc:	3260      	adds	r2, #96	; 0x60
    19ce:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    19d0:	4a0a      	ldr	r2, [pc, #40]	; (19fc <_usb_d_dev_ep_trans+0x1f8>)
    19d2:	4291      	cmp	r1, r2
    19d4:	d0f1      	beq.n	19ba <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    19d6:	4d08      	ldr	r5, [pc, #32]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    19d8:	3574      	adds	r5, #116	; 0x74
    19da:	2400      	movs	r4, #0
    19dc:	e734      	b.n	1848 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    19de:	00a3      	lsls	r3, r4, #2
    19e0:	191b      	adds	r3, r3, r4
    19e2:	009a      	lsls	r2, r3, #2
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <_usb_d_dev_ep_trans+0x1f4>)
    19e6:	189b      	adds	r3, r3, r2
    19e8:	3380      	adds	r3, #128	; 0x80
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d0e1      	beq.n	19b4 <_usb_d_dev_ep_trans+0x1b0>
    19f0:	2301      	movs	r3, #1
    19f2:	4699      	mov	r9, r3
    19f4:	e762      	b.n	18bc <_usb_d_dev_ep_trans+0xb8>
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	2000009c 	.word	0x2000009c
    19fc:	000003ff 	.word	0x000003ff
    1a00:	1fffffff 	.word	0x1fffffff
    1a04:	20007fff 	.word	0x20007fff
    1a08:	00000555 	.word	0x00000555
    1a0c:	00000563 	.word	0x00000563
    1a10:	0000133d 	.word	0x0000133d
    1a14:	00001195 	.word	0x00001195

00001a18 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1a18:	1e0b      	subs	r3, r1, #0
    1a1a:	d008      	beq.n	1a2e <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d008      	beq.n	1a32 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1a20:	2801      	cmp	r0, #1
    1a22:	d009      	beq.n	1a38 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1a24:	2802      	cmp	r0, #2
    1a26:	d106      	bne.n	1a36 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1a28:	4a05      	ldr	r2, [pc, #20]	; (1a40 <_usb_d_dev_register_ep_callback+0x28>)
    1a2a:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1a2c:	e003      	b.n	1a36 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1a2e:	4b05      	ldr	r3, [pc, #20]	; (1a44 <_usb_d_dev_register_ep_callback+0x2c>)
    1a30:	e7f4      	b.n	1a1c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1a32:	4a03      	ldr	r2, [pc, #12]	; (1a40 <_usb_d_dev_register_ep_callback+0x28>)
    1a34:	6693      	str	r3, [r2, #104]	; 0x68
}
    1a36:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1a38:	4a01      	ldr	r2, [pc, #4]	; (1a40 <_usb_d_dev_register_ep_callback+0x28>)
    1a3a:	66d3      	str	r3, [r2, #108]	; 0x6c
    1a3c:	e7fb      	b.n	1a36 <_usb_d_dev_register_ep_callback+0x1e>
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	2000009c 	.word	0x2000009c
    1a44:	00000f05 	.word	0x00000f05

00001a48 <USB_Handler>:

/**
* \brief USB interrupt handler
*/
void USB_Handler(void)
{
    1a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1a4a:	4b81      	ldr	r3, [pc, #516]	; (1c50 <USB_Handler+0x208>)
    1a4c:	8c1e      	ldrh	r6, [r3, #32]
    1a4e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1a50:	2e00      	cmp	r6, #0
    1a52:	d003      	beq.n	1a5c <USB_Handler+0x14>
    1a54:	4c7f      	ldr	r4, [pc, #508]	; (1c54 <USB_Handler+0x20c>)
    1a56:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1a58:	2500      	movs	r5, #0
    1a5a:	e0b9      	b.n	1bd0 <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1a5c:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1a5e:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1a60:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1a62:	075a      	lsls	r2, r3, #29
    1a64:	d417      	bmi.n	1a96 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1a66:	059a      	lsls	r2, r3, #22
    1a68:	d41c      	bmi.n	1aa4 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1a6a:	061a      	lsls	r2, r3, #24
    1a6c:	d43e      	bmi.n	1aec <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1a6e:	2270      	movs	r2, #112	; 0x70
    1a70:	421a      	tst	r2, r3
    1a72:	d144      	bne.n	1afe <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1a74:	071a      	lsls	r2, r3, #28
    1a76:	d45e      	bmi.n	1b36 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1a78:	07db      	lsls	r3, r3, #31
    1a7a:	d5eb      	bpl.n	1a54 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a7c:	4b74      	ldr	r3, [pc, #464]	; (1c50 <USB_Handler+0x208>)
    1a7e:	4a76      	ldr	r2, [pc, #472]	; (1c58 <USB_Handler+0x210>)
    1a80:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1a82:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1a84:	3a92      	subs	r2, #146	; 0x92
    1a86:	3aff      	subs	r2, #255	; 0xff
    1a88:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1a8a:	4b72      	ldr	r3, [pc, #456]	; (1c54 <USB_Handler+0x20c>)
    1a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a8e:	2100      	movs	r1, #0
    1a90:	2004      	movs	r0, #4
    1a92:	4798      	blx	r3
    1a94:	e005      	b.n	1aa2 <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a96:	2204      	movs	r2, #4
    1a98:	4b6d      	ldr	r3, [pc, #436]	; (1c50 <USB_Handler+0x208>)
    1a9a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1a9c:	4b6d      	ldr	r3, [pc, #436]	; (1c54 <USB_Handler+0x20c>)
    1a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1aa0:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aa4:	4b6a      	ldr	r3, [pc, #424]	; (1c50 <USB_Handler+0x208>)
    1aa6:	4a6c      	ldr	r2, [pc, #432]	; (1c58 <USB_Handler+0x210>)
    1aa8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1aaa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1aac:	3a92      	subs	r2, #146	; 0x92
    1aae:	3aff      	subs	r2, #255	; 0xff
    1ab0:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1ab2:	4b68      	ldr	r3, [pc, #416]	; (1c54 <USB_Handler+0x20c>)
    1ab4:	891b      	ldrh	r3, [r3, #8]
    1ab6:	071b      	lsls	r3, r3, #28
    1ab8:	0f1b      	lsrs	r3, r3, #28
    1aba:	2b03      	cmp	r3, #3
    1abc:	d00c      	beq.n	1ad8 <USB_Handler+0x90>
    1abe:	4b65      	ldr	r3, [pc, #404]	; (1c54 <USB_Handler+0x20c>)
    1ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1ac2:	071b      	lsls	r3, r3, #28
    1ac4:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1ac6:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1ac8:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1aca:	2b03      	cmp	r3, #3
    1acc:	d005      	beq.n	1ada <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1ace:	4b61      	ldr	r3, [pc, #388]	; (1c54 <USB_Handler+0x20c>)
    1ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1ad2:	2003      	movs	r0, #3
    1ad4:	4798      	blx	r3
    1ad6:	e7e4      	b.n	1aa2 <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1ad8:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1ada:	0152      	lsls	r2, r2, #5
    1adc:	4b5d      	ldr	r3, [pc, #372]	; (1c54 <USB_Handler+0x20c>)
    1ade:	189b      	adds	r3, r3, r2
    1ae0:	8919      	ldrh	r1, [r3, #8]
    1ae2:	0449      	lsls	r1, r1, #17
    1ae4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1ae6:	2200      	movs	r2, #0
    1ae8:	811a      	strh	r2, [r3, #8]
    1aea:	e7f0      	b.n	1ace <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1aec:	2280      	movs	r2, #128	; 0x80
    1aee:	4b58      	ldr	r3, [pc, #352]	; (1c50 <USB_Handler+0x208>)
    1af0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1af2:	4b58      	ldr	r3, [pc, #352]	; (1c54 <USB_Handler+0x20c>)
    1af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1af6:	2100      	movs	r1, #0
    1af8:	2005      	movs	r0, #5
    1afa:	4798      	blx	r3
    1afc:	e7d1      	b.n	1aa2 <USB_Handler+0x5a>
    1afe:	4b54      	ldr	r3, [pc, #336]	; (1c50 <USB_Handler+0x208>)
    1b00:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b02:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b04:	4a54      	ldr	r2, [pc, #336]	; (1c58 <USB_Handler+0x210>)
    1b06:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1b08:	4b54      	ldr	r3, [pc, #336]	; (1c5c <USB_Handler+0x214>)
    1b0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1b0c:	069b      	lsls	r3, r3, #26
    1b0e:	d40c      	bmi.n	1b2a <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1b10:	4952      	ldr	r1, [pc, #328]	; (1c5c <USB_Handler+0x214>)
	tmp &= mask;
    1b12:	3a32      	subs	r2, #50	; 0x32
    1b14:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1b16:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1b18:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    1b1a:	2bd0      	cmp	r3, #208	; 0xd0
    1b1c:	d1fb      	bne.n	1b16 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1b1e:	4b4d      	ldr	r3, [pc, #308]	; (1c54 <USB_Handler+0x20c>)
    1b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b22:	2100      	movs	r1, #0
    1b24:	2002      	movs	r0, #2
    1b26:	4798      	blx	r3
    1b28:	e7bb      	b.n	1aa2 <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1b2a:	494c      	ldr	r1, [pc, #304]	; (1c5c <USB_Handler+0x214>)
	tmp &= mask;
    1b2c:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1b2e:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    1b30:	421a      	tst	r2, r3
    1b32:	d0fc      	beq.n	1b2e <USB_Handler+0xe6>
    1b34:	e7f3      	b.n	1b1e <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1b36:	4b46      	ldr	r3, [pc, #280]	; (1c50 <USB_Handler+0x208>)
    1b38:	2100      	movs	r1, #0
    1b3a:	2280      	movs	r2, #128	; 0x80
    1b3c:	0052      	lsls	r2, r2, #1
    1b3e:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1b40:	3af8      	subs	r2, #248	; 0xf8
    1b42:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b44:	3268      	adds	r2, #104	; 0x68
    1b46:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b48:	4a43      	ldr	r2, [pc, #268]	; (1c58 <USB_Handler+0x210>)
    1b4a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1b4c:	4b44      	ldr	r3, [pc, #272]	; (1c60 <USB_Handler+0x218>)
    1b4e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1b50:	4b40      	ldr	r3, [pc, #256]	; (1c54 <USB_Handler+0x20c>)
    1b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b54:	2100      	movs	r1, #0
    1b56:	2001      	movs	r0, #1
    1b58:	4798      	blx	r3
    1b5a:	e7a2      	b.n	1aa2 <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1b5c:	06cb      	lsls	r3, r1, #27
    1b5e:	d407      	bmi.n	1b70 <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1b60:	064b      	lsls	r3, r1, #25
    1b62:	d408      	bmi.n	1b76 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1b64:	068b      	lsls	r3, r1, #26
    1b66:	d52e      	bpl.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1b68:	2100      	movs	r1, #0
    1b6a:	4b3e      	ldr	r3, [pc, #248]	; (1c64 <USB_Handler+0x21c>)
    1b6c:	4798      	blx	r3
    1b6e:	e02a      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    1b70:	4b3d      	ldr	r3, [pc, #244]	; (1c68 <USB_Handler+0x220>)
    1b72:	4798      	blx	r3
    1b74:	e027      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1b76:	2101      	movs	r1, #1
    1b78:	4b3a      	ldr	r3, [pc, #232]	; (1c64 <USB_Handler+0x21c>)
    1b7a:	4798      	blx	r3
    1b7c:	e023      	b.n	1bc6 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1b7e:	064a      	lsls	r2, r1, #25
    1b80:	d40e      	bmi.n	1ba0 <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1b82:	070a      	lsls	r2, r1, #28
    1b84:	d410      	bmi.n	1ba8 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1b86:	078a      	lsls	r2, r1, #30
    1b88:	d412      	bmi.n	1bb0 <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1b8a:	2207      	movs	r2, #7
    1b8c:	4013      	ands	r3, r2
    1b8e:	2b01      	cmp	r3, #1
    1b90:	d119      	bne.n	1bc6 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1b92:	074b      	lsls	r3, r1, #29
    1b94:	d410      	bmi.n	1bb8 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1b96:	06cb      	lsls	r3, r1, #27
    1b98:	d515      	bpl.n	1bc6 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1b9a:	4b33      	ldr	r3, [pc, #204]	; (1c68 <USB_Handler+0x220>)
    1b9c:	4798      	blx	r3
    1b9e:	e012      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1ba0:	2101      	movs	r1, #1
    1ba2:	4b30      	ldr	r3, [pc, #192]	; (1c64 <USB_Handler+0x21c>)
    1ba4:	4798      	blx	r3
    1ba6:	e00e      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    1ba8:	2101      	movs	r1, #1
    1baa:	4b30      	ldr	r3, [pc, #192]	; (1c6c <USB_Handler+0x224>)
    1bac:	4798      	blx	r3
    1bae:	e00a      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    1bb0:	2101      	movs	r1, #1
    1bb2:	4b2f      	ldr	r3, [pc, #188]	; (1c70 <USB_Handler+0x228>)
    1bb4:	4798      	blx	r3
    1bb6:	e006      	b.n	1bc6 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    1bb8:	2100      	movs	r1, #0
    1bba:	4b2c      	ldr	r3, [pc, #176]	; (1c6c <USB_Handler+0x224>)
    1bbc:	4798      	blx	r3
    1bbe:	e002      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1bc0:	2100      	movs	r1, #0
    1bc2:	4b28      	ldr	r3, [pc, #160]	; (1c64 <USB_Handler+0x21c>)
    1bc4:	4798      	blx	r3
    1bc6:	3501      	adds	r5, #1
    1bc8:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1bca:	2d09      	cmp	r5, #9
    1bcc:	d100      	bne.n	1bd0 <USB_Handler+0x188>
    1bce:	e768      	b.n	1aa2 <USB_Handler+0x5a>
    1bd0:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1bd2:	7ca1      	ldrb	r1, [r4, #18]
    1bd4:	29ff      	cmp	r1, #255	; 0xff
    1bd6:	d0f6      	beq.n	1bc6 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    1bd8:	230f      	movs	r3, #15
    1bda:	400b      	ands	r3, r1
    1bdc:	2101      	movs	r1, #1
    1bde:	4099      	lsls	r1, r3
    1be0:	420e      	tst	r6, r1
    1be2:	d0f0      	beq.n	1bc6 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1be4:	0159      	lsls	r1, r3, #5
    1be6:	4f23      	ldr	r7, [pc, #140]	; (1c74 <USB_Handler+0x22c>)
    1be8:	46bc      	mov	ip, r7
    1bea:	4461      	add	r1, ip
    1bec:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1bee:	015b      	lsls	r3, r3, #5
    1bf0:	4f21      	ldr	r7, [pc, #132]	; (1c78 <USB_Handler+0x230>)
    1bf2:	46bc      	mov	ip, r7
    1bf4:	4463      	add	r3, ip
    1bf6:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1bf8:	4019      	ands	r1, r3
	if (flags) {
    1bfa:	d0e4      	beq.n	1bc6 <USB_Handler+0x17e>
		if (!_usb_d_dev_ep_is_busy(ept)) {
    1bfc:	00ab      	lsls	r3, r5, #2
    1bfe:	195a      	adds	r2, r3, r5
    1c00:	0092      	lsls	r2, r2, #2
    1c02:	4b14      	ldr	r3, [pc, #80]	; (1c54 <USB_Handler+0x20c>)
    1c04:	469c      	mov	ip, r3
    1c06:	4462      	add	r2, ip
    1c08:	3270      	adds	r2, #112	; 0x70
    1c0a:	7dd3      	ldrb	r3, [r2, #23]
    1c0c:	065a      	lsls	r2, r3, #25
    1c0e:	d5a5      	bpl.n	1b5c <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1c10:	b25a      	sxtb	r2, r3
    1c12:	2a00      	cmp	r2, #0
    1c14:	dbb3      	blt.n	1b7e <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1c16:	068a      	lsls	r2, r1, #26
    1c18:	d4d2      	bmi.n	1bc0 <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1c1a:	074a      	lsls	r2, r1, #29
    1c1c:	d40c      	bmi.n	1c38 <USB_Handler+0x1f0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1c1e:	07ca      	lsls	r2, r1, #31
    1c20:	d40e      	bmi.n	1c40 <USB_Handler+0x1f8>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1c22:	2207      	movs	r2, #7
    1c24:	4013      	ands	r3, r2
    1c26:	2b01      	cmp	r3, #1
    1c28:	d1cd      	bne.n	1bc6 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1c2a:	070b      	lsls	r3, r1, #28
    1c2c:	d40c      	bmi.n	1c48 <USB_Handler+0x200>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c2e:	06cb      	lsls	r3, r1, #27
    1c30:	d5c9      	bpl.n	1bc6 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1c32:	4b0d      	ldr	r3, [pc, #52]	; (1c68 <USB_Handler+0x220>)
    1c34:	4798      	blx	r3
    1c36:	e7c6      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    1c38:	2100      	movs	r1, #0
    1c3a:	4b0c      	ldr	r3, [pc, #48]	; (1c6c <USB_Handler+0x224>)
    1c3c:	4798      	blx	r3
    1c3e:	e7c2      	b.n	1bc6 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    1c40:	2101      	movs	r1, #1
    1c42:	4b0e      	ldr	r3, [pc, #56]	; (1c7c <USB_Handler+0x234>)
    1c44:	4798      	blx	r3
    1c46:	e7be      	b.n	1bc6 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    1c48:	2101      	movs	r1, #1
    1c4a:	4b08      	ldr	r3, [pc, #32]	; (1c6c <USB_Handler+0x224>)
    1c4c:	4798      	blx	r3
    1c4e:	e7ba      	b.n	1bc6 <USB_Handler+0x17e>
    1c50:	41005000 	.word	0x41005000
    1c54:	2000009c 	.word	0x2000009c
    1c58:	00000201 	.word	0x00000201
    1c5c:	40000800 	.word	0x40000800
    1c60:	00001151 	.word	0x00001151
    1c64:	00000fbd 	.word	0x00000fbd
    1c68:	00000f09 	.word	0x00000f09
    1c6c:	00001051 	.word	0x00001051
    1c70:	00001195 	.word	0x00001195
    1c74:	41005100 	.word	0x41005100
    1c78:	41005109 	.word	0x41005109
    1c7c:	0000133d 	.word	0x0000133d

00001c80 <main>:
#include <atmel_start.h>

int main(void)
{
    1c80:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1c82:	4b01      	ldr	r3, [pc, #4]	; (1c88 <main+0x8>)
    1c84:	4798      	blx	r3
    1c86:	e7fe      	b.n	1c86 <main+0x6>
    1c88:	00000115 	.word	0x00000115

00001c8c <__libc_init_array>:
    1c8c:	b570      	push	{r4, r5, r6, lr}
    1c8e:	2600      	movs	r6, #0
    1c90:	4d0c      	ldr	r5, [pc, #48]	; (1cc4 <__libc_init_array+0x38>)
    1c92:	4c0d      	ldr	r4, [pc, #52]	; (1cc8 <__libc_init_array+0x3c>)
    1c94:	1b64      	subs	r4, r4, r5
    1c96:	10a4      	asrs	r4, r4, #2
    1c98:	42a6      	cmp	r6, r4
    1c9a:	d109      	bne.n	1cb0 <__libc_init_array+0x24>
    1c9c:	2600      	movs	r6, #0
    1c9e:	f000 f86d 	bl	1d7c <_init>
    1ca2:	4d0a      	ldr	r5, [pc, #40]	; (1ccc <__libc_init_array+0x40>)
    1ca4:	4c0a      	ldr	r4, [pc, #40]	; (1cd0 <__libc_init_array+0x44>)
    1ca6:	1b64      	subs	r4, r4, r5
    1ca8:	10a4      	asrs	r4, r4, #2
    1caa:	42a6      	cmp	r6, r4
    1cac:	d105      	bne.n	1cba <__libc_init_array+0x2e>
    1cae:	bd70      	pop	{r4, r5, r6, pc}
    1cb0:	00b3      	lsls	r3, r6, #2
    1cb2:	58eb      	ldr	r3, [r5, r3]
    1cb4:	4798      	blx	r3
    1cb6:	3601      	adds	r6, #1
    1cb8:	e7ee      	b.n	1c98 <__libc_init_array+0xc>
    1cba:	00b3      	lsls	r3, r6, #2
    1cbc:	58eb      	ldr	r3, [r5, r3]
    1cbe:	4798      	blx	r3
    1cc0:	3601      	adds	r6, #1
    1cc2:	e7f2      	b.n	1caa <__libc_init_array+0x1e>
    1cc4:	00001d88 	.word	0x00001d88
    1cc8:	00001d88 	.word	0x00001d88
    1ccc:	00001d88 	.word	0x00001d88
    1cd0:	00001d8c 	.word	0x00001d8c

00001cd4 <memcpy>:
    1cd4:	2300      	movs	r3, #0
    1cd6:	b510      	push	{r4, lr}
    1cd8:	429a      	cmp	r2, r3
    1cda:	d100      	bne.n	1cde <memcpy+0xa>
    1cdc:	bd10      	pop	{r4, pc}
    1cde:	5ccc      	ldrb	r4, [r1, r3]
    1ce0:	54c4      	strb	r4, [r0, r3]
    1ce2:	3301      	adds	r3, #1
    1ce4:	e7f8      	b.n	1cd8 <memcpy+0x4>

00001ce6 <memset>:
    1ce6:	0003      	movs	r3, r0
    1ce8:	1882      	adds	r2, r0, r2
    1cea:	4293      	cmp	r3, r2
    1cec:	d100      	bne.n	1cf0 <memset+0xa>
    1cee:	4770      	bx	lr
    1cf0:	7019      	strb	r1, [r3, #0]
    1cf2:	3301      	adds	r3, #1
    1cf4:	e7f9      	b.n	1cea <memset+0x4>
    1cf6:	0000      	movs	r0, r0
    1cf8:	682f2e2e 	.word	0x682f2e2e
    1cfc:	732f6c61 	.word	0x732f6c61
    1d00:	682f6372 	.word	0x682f6372
    1d04:	735f6c61 	.word	0x735f6c61
    1d08:	6d5f6970 	.word	0x6d5f6970
    1d0c:	6e79735f 	.word	0x6e79735f
    1d10:	00632e63 	.word	0x00632e63
    1d14:	682f2e2e 	.word	0x682f2e2e
    1d18:	732f6c61 	.word	0x732f6c61
    1d1c:	682f6372 	.word	0x682f6372
    1d20:	755f6c61 	.word	0x755f6c61
    1d24:	74726173 	.word	0x74726173
    1d28:	6e79735f 	.word	0x6e79735f
    1d2c:	00632e63 	.word	0x00632e63

00001d30 <_i2cms>:
	...

00001d48 <sercomspi_regs>:
    1d48:	0030000c 00020000 00000000 01ff0017     ..0.............
    1d58:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    1d68:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    1d78:	00002000                                . ..

00001d7c <_init>:
    1d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d82:	bc08      	pop	{r3}
    1d84:	469e      	mov	lr, r3
    1d86:	4770      	bx	lr

00001d88 <__init_array_start>:
    1d88:	000000dd 	.word	0x000000dd

00001d8c <_fini>:
    1d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d92:	bc08      	pop	{r3}
    1d94:	469e      	mov	lr, r3
    1d96:	4770      	bx	lr

00001d98 <__fini_array_start>:
    1d98:	000000b5 	.word	0x000000b5
