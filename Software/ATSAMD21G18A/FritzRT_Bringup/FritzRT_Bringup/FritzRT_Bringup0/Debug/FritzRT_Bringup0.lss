
FritzRT_Bringup0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  0001105c  2**0
                  CONTENTS
  2 .bss          00000064  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002004  20000064  20000064  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001105c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020d4a  00000000  00000000  000110dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000250b  00000000  00000000  00031e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000aaa1  00000000  00000000  00034332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0003edd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d58  00000000  00000000  0003f6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005bc9  00000000  00000000  0004041b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cb00  00000000  00000000  00045fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00077bc4  00000000  00000000  00052ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001700  00000000  00000000  000ca6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     h . %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	05 0f 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 c1 0e 00 00     !...!...!.......
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	0000105c 	.word	0x0000105c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	0000105c 	.word	0x0000105c
     10c:	0000105c 	.word	0x0000105c
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	0000039d 	.word	0x0000039d

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	0000105c 	.word	0x0000105c
     1d4:	20000000 	.word	0x20000000
     1d8:	20000000 	.word	0x20000000
     1dc:	20000004 	.word	0x20000004
     1e0:	20000000 	.word	0x20000000
     1e4:	20000064 	.word	0x20000064
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00000f15 	.word	0x00000f15
     204:	00000ee1 	.word	0x00000ee1

00000208 <CTRL_SPI_PORT_init>:
struct timer_descriptor      TIMER_0;

struct usart_sync_descriptor USART_0;

void CTRL_SPI_PORT_init(void)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     20a:	24c0      	movs	r4, #192	; 0xc0
     20c:	05e4      	lsls	r4, r4, #23
     20e:	2280      	movs	r2, #128	; 0x80
     210:	0252      	lsls	r2, r2, #9
     212:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     214:	4b22      	ldr	r3, [pc, #136]	; (2a0 <CTRL_SPI_PORT_init+0x98>)
     216:	2080      	movs	r0, #128	; 0x80
     218:	05c0      	lsls	r0, r0, #23
     21a:	6298      	str	r0, [r3, #40]	; 0x28
     21c:	4921      	ldr	r1, [pc, #132]	; (2a4 <CTRL_SPI_PORT_init+0x9c>)
     21e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     220:	6162      	str	r2, [r4, #20]
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     222:	2150      	movs	r1, #80	; 0x50
     224:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     226:	2501      	movs	r5, #1
     228:	46ac      	mov	ip, r5
     22a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     22c:	2701      	movs	r7, #1
     22e:	433a      	orrs	r2, r7
     230:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     232:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     234:	3918      	subs	r1, #24
     236:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     238:	350e      	adds	r5, #14
     23a:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     23c:	3d0d      	subs	r5, #13
     23e:	432a      	orrs	r2, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     240:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     242:	2280      	movs	r2, #128	; 0x80
     244:	0292      	lsls	r2, r2, #10
     246:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     248:	6298      	str	r0, [r3, #40]	; 0x28
     24a:	4817      	ldr	r0, [pc, #92]	; (2a8 <CTRL_SPI_PORT_init+0xa0>)
     24c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     24e:	6162      	str	r2, [r4, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     250:	2051      	movs	r0, #81	; 0x51
     252:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     254:	4665      	mov	r5, ip
     256:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     258:	433a      	orrs	r2, r7
     25a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     25c:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     25e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     260:	260f      	movs	r6, #15
     262:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     264:	2520      	movs	r5, #32
     266:	4328      	orrs	r0, r5
     268:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26a:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	0312      	lsls	r2, r2, #12
     270:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     272:	4a0e      	ldr	r2, [pc, #56]	; (2ac <CTRL_SPI_PORT_init+0xa4>)
     274:	629a      	str	r2, [r3, #40]	; 0x28
     276:	4a0e      	ldr	r2, [pc, #56]	; (2b0 <CTRL_SPI_PORT_init+0xa8>)
     278:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     27a:	2253      	movs	r2, #83	; 0x53
     27c:	5c99      	ldrb	r1, [r3, r2]
     27e:	2004      	movs	r0, #4
     280:	4381      	bics	r1, r0
     282:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     284:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     286:	4660      	mov	r0, ip
     288:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     28a:	4339      	orrs	r1, r7
     28c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     28e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     290:	2139      	movs	r1, #57	; 0x39
     292:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     294:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     296:	432a      	orrs	r2, r5
     298:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29a:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PIN_SPI_CTRL_MISO, PINMUX_PA19C_SERCOM1_PAD3);
}
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	41004400 	.word	0x41004400
     2a4:	c0000001 	.word	0xc0000001
     2a8:	c0000002 	.word	0xc0000002
     2ac:	40020000 	.word	0x40020000
     2b0:	c0020008 	.word	0xc0020008

000002b4 <CTRL_SPI_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2b4:	4a04      	ldr	r2, [pc, #16]	; (2c8 <CTRL_SPI_CLOCK_init+0x14>)
     2b6:	6a13      	ldr	r3, [r2, #32]
     2b8:	2108      	movs	r1, #8
     2ba:	430b      	orrs	r3, r1
     2bc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2be:	4a03      	ldr	r2, [pc, #12]	; (2cc <CTRL_SPI_CLOCK_init+0x18>)
     2c0:	4b03      	ldr	r3, [pc, #12]	; (2d0 <CTRL_SPI_CLOCK_init+0x1c>)
     2c2:	805a      	strh	r2, [r3, #2]

void CTRL_SPI_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
}
     2c4:	4770      	bx	lr
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	40000400 	.word	0x40000400
     2cc:	00004015 	.word	0x00004015
     2d0:	40000c00 	.word	0x40000c00

000002d4 <CTRL_SPI_init>:

void CTRL_SPI_init(void)
{
     2d4:	b510      	push	{r4, lr}
	CTRL_SPI_CLOCK_init();
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <CTRL_SPI_init+0x14>)
     2d8:	4798      	blx	r3
	spi_m_sync_init(&CTRL_SPI, SERCOM1);
     2da:	4904      	ldr	r1, [pc, #16]	; (2ec <CTRL_SPI_init+0x18>)
     2dc:	4804      	ldr	r0, [pc, #16]	; (2f0 <CTRL_SPI_init+0x1c>)
     2de:	4b05      	ldr	r3, [pc, #20]	; (2f4 <CTRL_SPI_init+0x20>)
     2e0:	4798      	blx	r3
	CTRL_SPI_PORT_init();
     2e2:	4b05      	ldr	r3, [pc, #20]	; (2f8 <CTRL_SPI_init+0x24>)
     2e4:	4798      	blx	r3
}
     2e6:	bd10      	pop	{r4, pc}
     2e8:	000002b5 	.word	0x000002b5
     2ec:	42000c00 	.word	0x42000c00
     2f0:	20000028 	.word	0x20000028
     2f4:	0000053d 	.word	0x0000053d
     2f8:	00000209 	.word	0x00000209

000002fc <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     2fc:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2fe:	4b0e      	ldr	r3, [pc, #56]	; (338 <USART_0_PORT_init+0x3c>)
     300:	224a      	movs	r2, #74	; 0x4a
     302:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     304:	2501      	movs	r5, #1
     306:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	2401      	movs	r4, #1
     30a:	4321      	orrs	r1, r4
     30c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     310:	2035      	movs	r0, #53	; 0x35
     312:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     314:	3a3b      	subs	r2, #59	; 0x3b
     316:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     318:	3a0c      	subs	r2, #12
     31a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     31e:	214b      	movs	r1, #75	; 0x4b
     320:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     322:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     324:	4322      	orrs	r2, r4
     326:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     328:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     32a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     32c:	393c      	subs	r1, #60	; 0x3c
     32e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     330:	3121      	adds	r1, #33	; 0x21
     332:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     334:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PIN_UART_TX, PINMUX_PA10D_SERCOM2_PAD2);

	gpio_set_pin_function(PIN_UART_RX, PINMUX_PA11D_SERCOM2_PAD3);
}
     336:	bd30      	pop	{r4, r5, pc}
     338:	41004400 	.word	0x41004400

0000033c <USART_0_CLOCK_init>:
     33c:	4a04      	ldr	r2, [pc, #16]	; (350 <USART_0_CLOCK_init+0x14>)
     33e:	6a13      	ldr	r3, [r2, #32]
     340:	2110      	movs	r1, #16
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
     346:	4a03      	ldr	r2, [pc, #12]	; (354 <USART_0_CLOCK_init+0x18>)
     348:	4b03      	ldr	r3, [pc, #12]	; (358 <USART_0_CLOCK_init+0x1c>)
     34a:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     34c:	4770      	bx	lr
     34e:	46c0      	nop			; (mov r8, r8)
     350:	40000400 	.word	0x40000400
     354:	00004016 	.word	0x00004016
     358:	40000c00 	.word	0x40000c00

0000035c <USART_0_init>:

void USART_0_init(void)
{
     35c:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     35e:	4b05      	ldr	r3, [pc, #20]	; (374 <USART_0_init+0x18>)
     360:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     362:	2200      	movs	r2, #0
     364:	4904      	ldr	r1, [pc, #16]	; (378 <USART_0_init+0x1c>)
     366:	4805      	ldr	r0, [pc, #20]	; (37c <USART_0_init+0x20>)
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <USART_0_init+0x24>)
     36a:	4798      	blx	r3
	USART_0_PORT_init();
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <USART_0_init+0x28>)
     36e:	4798      	blx	r3
}
     370:	bd10      	pop	{r4, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	0000033d 	.word	0x0000033d
     378:	42001000 	.word	0x42001000
     37c:	2000003c 	.word	0x2000003c
     380:	00000869 	.word	0x00000869
     384:	000002fd 	.word	0x000002fd

00000388 <delay_driver_init>:

void delay_driver_init(void)
{
     388:	b510      	push	{r4, lr}
	delay_init(SysTick);
     38a:	4802      	ldr	r0, [pc, #8]	; (394 <delay_driver_init+0xc>)
     38c:	4b02      	ldr	r3, [pc, #8]	; (398 <delay_driver_init+0x10>)
     38e:	4798      	blx	r3
}
     390:	bd10      	pop	{r4, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	e000e010 	.word	0xe000e010
     398:	00000529 	.word	0x00000529

0000039c <system_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void system_init(void)
{
     39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     39e:	4b4c      	ldr	r3, [pc, #304]	; (4d0 <system_init+0x134>)
     3a0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a2:	22c0      	movs	r2, #192	; 0xc0
     3a4:	05d2      	lsls	r2, r2, #23
     3a6:	2540      	movs	r5, #64	; 0x40
     3a8:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3aa:	4b4a      	ldr	r3, [pc, #296]	; (4d4 <system_init+0x138>)
     3ac:	494a      	ldr	r1, [pc, #296]	; (4d8 <system_init+0x13c>)
     3ae:	6299      	str	r1, [r3, #40]	; 0x28
     3b0:	4e4a      	ldr	r6, [pc, #296]	; (4dc <system_init+0x140>)
     3b2:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b4:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3b6:	2046      	movs	r0, #70	; 0x46
     3b8:	5c19      	ldrb	r1, [r3, r0]
     3ba:	2404      	movs	r4, #4
     3bc:	4321      	orrs	r1, r4
     3be:	b2c9      	uxtb	r1, r1
     3c0:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3c2:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c4:	5c1d      	ldrb	r5, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c6:	2101      	movs	r1, #1
     3c8:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ca:	541d      	strb	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3cc:	2780      	movs	r7, #128	; 0x80
     3ce:	007f      	lsls	r7, r7, #1
     3d0:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d2:	4843      	ldr	r0, [pc, #268]	; (4e0 <system_init+0x144>)
     3d4:	6298      	str	r0, [r3, #40]	; 0x28
     3d6:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3d8:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3da:	2548      	movs	r5, #72	; 0x48
     3dc:	5d58      	ldrb	r0, [r3, r5]
     3de:	4320      	orrs	r0, r4
     3e0:	b2c0      	uxtb	r0, r0
     3e2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3e4:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e6:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e8:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ea:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ec:	3701      	adds	r7, #1
     3ee:	37ff      	adds	r7, #255	; 0xff
     3f0:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f2:	483c      	ldr	r0, [pc, #240]	; (4e4 <system_init+0x148>)
     3f4:	6298      	str	r0, [r3, #40]	; 0x28
     3f6:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3f8:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3fa:	3501      	adds	r5, #1
     3fc:	5d58      	ldrb	r0, [r3, r5]
     3fe:	4320      	orrs	r0, r4
     400:	b2c0      	uxtb	r0, r0
     402:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     404:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     406:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     408:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     40c:	2080      	movs	r0, #128	; 0x80
     40e:	02c0      	lsls	r0, r0, #11
     410:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     412:	2680      	movs	r6, #128	; 0x80
     414:	05f6      	lsls	r6, r6, #23
     416:	629e      	str	r6, [r3, #40]	; 0x28
     418:	4d33      	ldr	r5, [pc, #204]	; (4e8 <system_init+0x14c>)
     41a:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     41c:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     41e:	2552      	movs	r5, #82	; 0x52
     420:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     422:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     424:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     426:	2780      	movs	r7, #128	; 0x80
     428:	037f      	lsls	r7, r7, #13
     42a:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42c:	482f      	ldr	r0, [pc, #188]	; (4ec <system_init+0x150>)
     42e:	4684      	mov	ip, r0
     430:	6298      	str	r0, [r3, #40]	; 0x28
     432:	482f      	ldr	r0, [pc, #188]	; (4f0 <system_init+0x154>)
     434:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     436:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     438:	3502      	adds	r5, #2
     43a:	5d58      	ldrb	r0, [r3, r5]
     43c:	4320      	orrs	r0, r4
     43e:	b2c0      	uxtb	r0, r0
     440:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     442:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     444:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     448:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44a:	2780      	movs	r7, #128	; 0x80
     44c:	03bf      	lsls	r7, r7, #14
     44e:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	4660      	mov	r0, ip
     452:	6298      	str	r0, [r3, #40]	; 0x28
     454:	4827      	ldr	r0, [pc, #156]	; (4f4 <system_init+0x158>)
     456:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     458:	6057      	str	r7, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     45a:	3501      	adds	r5, #1
     45c:	5d58      	ldrb	r0, [r3, r5]
     45e:	4320      	orrs	r0, r4
     460:	b2c0      	uxtb	r0, r0
     462:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     464:	6197      	str	r7, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     466:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     468:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46a:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     46c:	2080      	movs	r0, #128	; 0x80
     46e:	0500      	lsls	r0, r0, #20
     470:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     472:	629e      	str	r6, [r3, #40]	; 0x28
     474:	4c20      	ldr	r4, [pc, #128]	; (4f8 <system_init+0x15c>)
     476:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     478:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	245b      	movs	r4, #91	; 0x5b
     47c:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     480:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     482:	2008      	movs	r0, #8
     484:	342d      	adds	r4, #45	; 0x2d
     486:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     488:	3420      	adds	r4, #32
     48a:	4d1c      	ldr	r5, [pc, #112]	; (4fc <system_init+0x160>)
     48c:	511d      	str	r5, [r3, r4]
     48e:	25c0      	movs	r5, #192	; 0xc0
     490:	062d      	lsls	r5, r5, #24
     492:	511d      	str	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     494:	3c10      	subs	r4, #16
     496:	5110      	str	r0, [r2, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	30bb      	adds	r0, #187	; 0xbb
     49a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49e:	541a      	strb	r2, [r3, r0]
	                   // <true"> High
	                   true);

	gpio_set_pin_function(PIN_LED_RX, GPIO_PIN_FUNCTION_OFF);

	CTRL_SPI_init();
     4a0:	4b17      	ldr	r3, [pc, #92]	; (500 <system_init+0x164>)
     4a2:	4798      	blx	r3

	USART_0_init();
     4a4:	4b17      	ldr	r3, [pc, #92]	; (504 <system_init+0x168>)
     4a6:	4798      	blx	r3

	delay_driver_init();
     4a8:	4b17      	ldr	r3, [pc, #92]	; (508 <system_init+0x16c>)
     4aa:	4798      	blx	r3
     4ac:	4a17      	ldr	r2, [pc, #92]	; (50c <system_init+0x170>)
     4ae:	6a11      	ldr	r1, [r2, #32]
     4b0:	2380      	movs	r3, #128	; 0x80
     4b2:	011b      	lsls	r3, r3, #4
     4b4:	430b      	orrs	r3, r1
     4b6:	6213      	str	r3, [r2, #32]
     4b8:	4a15      	ldr	r2, [pc, #84]	; (510 <system_init+0x174>)
     4ba:	4b16      	ldr	r3, [pc, #88]	; (514 <system_init+0x178>)
     4bc:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     4be:	4b16      	ldr	r3, [pc, #88]	; (518 <system_init+0x17c>)
     4c0:	4798      	blx	r3
     4c2:	0002      	movs	r2, r0
     4c4:	4915      	ldr	r1, [pc, #84]	; (51c <system_init+0x180>)
     4c6:	4816      	ldr	r0, [pc, #88]	; (520 <system_init+0x184>)
     4c8:	4b16      	ldr	r3, [pc, #88]	; (524 <system_init+0x188>)
     4ca:	4798      	blx	r3

	TIMER_0_init();
}
     4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000925 	.word	0x00000925
     4d4:	41004400 	.word	0x41004400
     4d8:	40020040 	.word	0x40020040
     4dc:	c0020000 	.word	0xc0020000
     4e0:	40020100 	.word	0x40020100
     4e4:	40020200 	.word	0x40020200
     4e8:	c0000004 	.word	0xc0000004
     4ec:	40020000 	.word	0x40020000
     4f0:	c0020010 	.word	0xc0020010
     4f4:	c0020020 	.word	0xc0020020
     4f8:	c0000800 	.word	0xc0000800
     4fc:	40000008 	.word	0x40000008
     500:	000002d5 	.word	0x000002d5
     504:	0000035d 	.word	0x0000035d
     508:	00000389 	.word	0x00000389
     50c:	40000400 	.word	0x40000400
     510:	0000421b 	.word	0x0000421b
     514:	40000c00 	.word	0x40000c00
     518:	00000ebd 	.word	0x00000ebd
     51c:	42002c00 	.word	0x42002c00
     520:	20000048 	.word	0x20000048
     524:	0000074d 	.word	0x0000074d

00000528 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     528:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     52a:	4b02      	ldr	r3, [pc, #8]	; (534 <delay_init+0xc>)
     52c:	6018      	str	r0, [r3, #0]
     52e:	4b02      	ldr	r3, [pc, #8]	; (538 <delay_init+0x10>)
     530:	4798      	blx	r3
}
     532:	bd10      	pop	{r4, pc}
     534:	2000001c 	.word	0x2000001c
     538:	00000da5 	.word	0x00000da5

0000053c <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     53c:	b570      	push	{r4, r5, r6, lr}
     53e:	0004      	movs	r4, r0
     540:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
     542:	2800      	cmp	r0, #0
     544:	d016      	beq.n	574 <spi_m_sync_init+0x38>
     546:	0008      	movs	r0, r1
     548:	1e43      	subs	r3, r0, #1
     54a:	4198      	sbcs	r0, r3
     54c:	b2c0      	uxtb	r0, r0
     54e:	2242      	movs	r2, #66	; 0x42
     550:	4909      	ldr	r1, [pc, #36]	; (578 <spi_m_sync_init+0x3c>)
     552:	4b0a      	ldr	r3, [pc, #40]	; (57c <spi_m_sync_init+0x40>)
     554:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
     556:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
     558:	0029      	movs	r1, r5
     55a:	0020      	movs	r0, r4
     55c:	4b08      	ldr	r3, [pc, #32]	; (580 <spi_m_sync_init+0x44>)
     55e:	4798      	blx	r3
	if (rc < 0) {
     560:	2800      	cmp	r0, #0
     562:	db06      	blt.n	572 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     564:	4b07      	ldr	r3, [pc, #28]	; (584 <spi_m_sync_init+0x48>)
     566:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
     568:	4b07      	ldr	r3, [pc, #28]	; (588 <spi_m_sync_init+0x4c>)
     56a:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
     56c:	4b07      	ldr	r3, [pc, #28]	; (58c <spi_m_sync_init+0x50>)
     56e:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
     570:	2000      	movs	r0, #0
}
     572:	bd70      	pop	{r4, r5, r6, pc}
     574:	2000      	movs	r0, #0
     576:	e7ea      	b.n	54e <spi_m_sync_init+0x12>
     578:	00000f5c 	.word	0x00000f5c
     57c:	000008b5 	.word	0x000008b5
     580:	00000a75 	.word	0x00000a75
     584:	ffff8000 	.word	0xffff8000
     588:	00000615 	.word	0x00000615
     58c:	000005d9 	.word	0x000005d9

00000590 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     590:	b530      	push	{r4, r5, lr}
     592:	b087      	sub	sp, #28
     594:	0004      	movs	r4, r0
     596:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     598:	2800      	cmp	r0, #0
     59a:	d014      	beq.n	5c6 <spi_m_sync_transfer+0x36>
     59c:	0008      	movs	r0, r1
     59e:	1e43      	subs	r3, r0, #1
     5a0:	4198      	sbcs	r0, r3
     5a2:	b2c0      	uxtb	r0, r0
     5a4:	22bd      	movs	r2, #189	; 0xbd
     5a6:	4909      	ldr	r1, [pc, #36]	; (5cc <spi_m_sync_transfer+0x3c>)
     5a8:	4b09      	ldr	r3, [pc, #36]	; (5d0 <spi_m_sync_transfer+0x40>)
     5aa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     5ac:	682b      	ldr	r3, [r5, #0]
     5ae:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     5b0:	686b      	ldr	r3, [r5, #4]
     5b2:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     5b4:	68ab      	ldr	r3, [r5, #8]
     5b6:	9301      	str	r3, [sp, #4]
     5b8:	9305      	str	r3, [sp, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
     5ba:	a903      	add	r1, sp, #12
     5bc:	0020      	movs	r0, r4
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <spi_m_sync_transfer+0x44>)
     5c0:	4798      	blx	r3
}
     5c2:	b007      	add	sp, #28
     5c4:	bd30      	pop	{r4, r5, pc}
     5c6:	2000      	movs	r0, #0
     5c8:	e7ec      	b.n	5a4 <spi_m_sync_transfer+0x14>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	00000f5c 	.word	0x00000f5c
     5d0:	000008b5 	.word	0x000008b5
     5d4:	00000bc9 	.word	0x00000bc9

000005d8 <_spi_m_sync_io_write>:
{
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	b084      	sub	sp, #16
     5dc:	0004      	movs	r4, r0
     5de:	000e      	movs	r6, r1
     5e0:	0015      	movs	r5, r2
	ASSERT(io);
     5e2:	1e43      	subs	r3, r0, #1
     5e4:	4198      	sbcs	r0, r3
     5e6:	b2c0      	uxtb	r0, r0
     5e8:	22ad      	movs	r2, #173	; 0xad
     5ea:	4907      	ldr	r1, [pc, #28]	; (608 <_spi_m_sync_io_write+0x30>)
     5ec:	4b07      	ldr	r3, [pc, #28]	; (60c <_spi_m_sync_io_write+0x34>)
     5ee:	4798      	blx	r3
	xfer.rxbuf = 0;
     5f0:	2300      	movs	r3, #0
     5f2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     5f4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     5f6:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5f8:	0020      	movs	r0, r4
     5fa:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     5fc:	a901      	add	r1, sp, #4
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <_spi_m_sync_io_write+0x38>)
     600:	4798      	blx	r3
}
     602:	b004      	add	sp, #16
     604:	bd70      	pop	{r4, r5, r6, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00000f5c 	.word	0x00000f5c
     60c:	000008b5 	.word	0x000008b5
     610:	00000591 	.word	0x00000591

00000614 <_spi_m_sync_io_read>:
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b084      	sub	sp, #16
     618:	0004      	movs	r4, r0
     61a:	000e      	movs	r6, r1
     61c:	0015      	movs	r5, r2
	ASSERT(io);
     61e:	1e43      	subs	r3, r0, #1
     620:	4198      	sbcs	r0, r3
     622:	b2c0      	uxtb	r0, r0
     624:	2291      	movs	r2, #145	; 0x91
     626:	4907      	ldr	r1, [pc, #28]	; (644 <_spi_m_sync_io_read+0x30>)
     628:	4b07      	ldr	r3, [pc, #28]	; (648 <_spi_m_sync_io_read+0x34>)
     62a:	4798      	blx	r3
	xfer.rxbuf = buf;
     62c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     62e:	2300      	movs	r3, #0
     630:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     632:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     634:	0020      	movs	r0, r4
     636:	3808      	subs	r0, #8
	return spi_m_sync_transfer(spi, &xfer);
     638:	a901      	add	r1, sp, #4
     63a:	4b04      	ldr	r3, [pc, #16]	; (64c <_spi_m_sync_io_read+0x38>)
     63c:	4798      	blx	r3
}
     63e:	b004      	add	sp, #16
     640:	bd70      	pop	{r4, r5, r6, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	00000f5c 	.word	0x00000f5c
     648:	000008b5 	.word	0x000008b5
     64c:	00000591 	.word	0x00000591

00000650 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     652:	46ce      	mov	lr, r9
     654:	4647      	mov	r7, r8
     656:	b580      	push	{r7, lr}
     658:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     65a:	6803      	ldr	r3, [r0, #0]
     65c:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     65e:	2b00      	cmp	r3, #0
     660:	d005      	beq.n	66e <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     662:	688e      	ldr	r6, [r1, #8]
     664:	001c      	movs	r4, r3
     666:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     668:	2701      	movs	r7, #1
     66a:	1abf      	subs	r7, r7, r2
     66c:	e00d      	b.n	68a <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     66e:	4b12      	ldr	r3, [pc, #72]	; (6b8 <timer_add_timer_task+0x68>)
     670:	4798      	blx	r3
		return;
     672:	e018      	b.n	6a6 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     674:	18fb      	adds	r3, r7, r3
     676:	68a0      	ldr	r0, [r4, #8]
     678:	4680      	mov	r8, r0
     67a:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     67c:	42b3      	cmp	r3, r6
     67e:	d20c      	bcs.n	69a <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     680:	6823      	ldr	r3, [r4, #0]
     682:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     684:	2b00      	cmp	r3, #0
     686:	d00b      	beq.n	6a0 <timer_add_timer_task+0x50>
     688:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     68a:	6863      	ldr	r3, [r4, #4]
     68c:	4293      	cmp	r3, r2
     68e:	d8f1      	bhi.n	674 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     690:	68a0      	ldr	r0, [r4, #8]
     692:	4680      	mov	r8, r0
     694:	4443      	add	r3, r8
     696:	1a9b      	subs	r3, r3, r2
     698:	e7f0      	b.n	67c <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     69a:	45a4      	cmp	ip, r4
     69c:	d007      	beq.n	6ae <timer_add_timer_task+0x5e>
     69e:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     6a0:	0020      	movs	r0, r4
     6a2:	4b06      	ldr	r3, [pc, #24]	; (6bc <timer_add_timer_task+0x6c>)
     6a4:	4798      	blx	r3
	}
}
     6a6:	bc0c      	pop	{r2, r3}
     6a8:	4690      	mov	r8, r2
     6aa:	4699      	mov	r9, r3
     6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     6ae:	4648      	mov	r0, r9
     6b0:	4b01      	ldr	r3, [pc, #4]	; (6b8 <timer_add_timer_task+0x68>)
     6b2:	4798      	blx	r3
     6b4:	e7f7      	b.n	6a6 <timer_add_timer_task+0x56>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	000008e1 	.word	0x000008e1
     6bc:	0000090d 	.word	0x0000090d

000006c0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c2:	46c6      	mov	lr, r8
     6c4:	b500      	push	{lr}
     6c6:	b082      	sub	sp, #8
     6c8:	0007      	movs	r7, r0
	return (void *)list->head;
     6ca:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     6cc:	6903      	ldr	r3, [r0, #16]
     6ce:	3301      	adds	r3, #1
     6d0:	4698      	mov	r8, r3
     6d2:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     6d4:	7e03      	ldrb	r3, [r0, #24]
     6d6:	07db      	lsls	r3, r3, #31
     6d8:	d411      	bmi.n	6fe <timer_process_counted+0x3e>
     6da:	7e03      	ldrb	r3, [r0, #24]
     6dc:	079b      	lsls	r3, r3, #30
     6de:	d40e      	bmi.n	6fe <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     6e0:	2c00      	cmp	r4, #0
     6e2:	d010      	beq.n	706 <timer_process_counted+0x46>
     6e4:	4643      	mov	r3, r8
     6e6:	6862      	ldr	r2, [r4, #4]
     6e8:	1a9b      	subs	r3, r3, r2
     6ea:	68a2      	ldr	r2, [r4, #8]
     6ec:	4293      	cmp	r3, r2
     6ee:	d30a      	bcc.n	706 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     6f0:	2314      	movs	r3, #20
     6f2:	469c      	mov	ip, r3
     6f4:	4484      	add	ip, r0
     6f6:	4663      	mov	r3, ip
     6f8:	9301      	str	r3, [sp, #4]
     6fa:	4e12      	ldr	r6, [pc, #72]	; (744 <timer_process_counted+0x84>)
     6fc:	e014      	b.n	728 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     6fe:	7e3b      	ldrb	r3, [r7, #24]
     700:	2202      	movs	r2, #2
     702:	4313      	orrs	r3, r2
     704:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     706:	b002      	add	sp, #8
     708:	bc04      	pop	{r2}
     70a:	4690      	mov	r8, r2
     70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     70e:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     710:	68e3      	ldr	r3, [r4, #12]
     712:	0020      	movs	r0, r4
     714:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     716:	2d00      	cmp	r5, #0
     718:	d0f5      	beq.n	706 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     71a:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     71c:	4643      	mov	r3, r8
     71e:	686a      	ldr	r2, [r5, #4]
     720:	1a9b      	subs	r3, r3, r2
     722:	68aa      	ldr	r2, [r5, #8]
     724:	4293      	cmp	r3, r2
     726:	d3ee      	bcc.n	706 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     728:	9801      	ldr	r0, [sp, #4]
     72a:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     72c:	7c23      	ldrb	r3, [r4, #16]
     72e:	2b01      	cmp	r3, #1
     730:	d1ed      	bne.n	70e <timer_process_counted+0x4e>
			tmp->time_label = time;
     732:	4643      	mov	r3, r8
     734:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     736:	4642      	mov	r2, r8
     738:	0021      	movs	r1, r4
     73a:	9801      	ldr	r0, [sp, #4]
     73c:	4b02      	ldr	r3, [pc, #8]	; (748 <timer_process_counted+0x88>)
     73e:	4798      	blx	r3
     740:	e7e5      	b.n	70e <timer_process_counted+0x4e>
     742:	46c0      	nop			; (mov r8, r8)
     744:	00000915 	.word	0x00000915
     748:	00000651 	.word	0x00000651

0000074c <timer_init>:
{
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	0005      	movs	r5, r0
     750:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     752:	2800      	cmp	r0, #0
     754:	d011      	beq.n	77a <timer_init+0x2e>
     756:	0008      	movs	r0, r1
     758:	1e43      	subs	r3, r0, #1
     75a:	4198      	sbcs	r0, r3
     75c:	b2c0      	uxtb	r0, r0
     75e:	2245      	movs	r2, #69	; 0x45
     760:	4907      	ldr	r1, [pc, #28]	; (780 <timer_init+0x34>)
     762:	4b08      	ldr	r3, [pc, #32]	; (784 <timer_init+0x38>)
     764:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     766:	0021      	movs	r1, r4
     768:	0028      	movs	r0, r5
     76a:	4b07      	ldr	r3, [pc, #28]	; (788 <timer_init+0x3c>)
     76c:	4798      	blx	r3
	descr->time                           = 0;
     76e:	2300      	movs	r3, #0
     770:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     772:	4b06      	ldr	r3, [pc, #24]	; (78c <timer_init+0x40>)
     774:	602b      	str	r3, [r5, #0]
}
     776:	2000      	movs	r0, #0
     778:	bd70      	pop	{r4, r5, r6, pc}
     77a:	2000      	movs	r0, #0
     77c:	e7ef      	b.n	75e <timer_init+0x12>
     77e:	46c0      	nop			; (mov r8, r8)
     780:	00000f78 	.word	0x00000f78
     784:	000008b5 	.word	0x000008b5
     788:	00000db9 	.word	0x00000db9
     78c:	000006c1 	.word	0x000006c1

00000790 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     792:	46ce      	mov	lr, r9
     794:	4647      	mov	r7, r8
     796:	b580      	push	{r7, lr}
     798:	0004      	movs	r4, r0
     79a:	000f      	movs	r7, r1
     79c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     79e:	2800      	cmp	r0, #0
     7a0:	d021      	beq.n	7e6 <usart_sync_write+0x56>
     7a2:	2900      	cmp	r1, #0
     7a4:	d021      	beq.n	7ea <usart_sync_write+0x5a>
     7a6:	0010      	movs	r0, r2
     7a8:	1e43      	subs	r3, r0, #1
     7aa:	4198      	sbcs	r0, r3
     7ac:	22fb      	movs	r2, #251	; 0xfb
     7ae:	4910      	ldr	r1, [pc, #64]	; (7f0 <usart_sync_write+0x60>)
     7b0:	4b10      	ldr	r3, [pc, #64]	; (7f4 <usart_sync_write+0x64>)
     7b2:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
     7b4:	3408      	adds	r4, #8
     7b6:	4d10      	ldr	r5, [pc, #64]	; (7f8 <usart_sync_write+0x68>)
     7b8:	0020      	movs	r0, r4
     7ba:	47a8      	blx	r5
     7bc:	2800      	cmp	r0, #0
     7be:	d0fb      	beq.n	7b8 <usart_sync_write+0x28>
     7c0:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7c2:	4b0e      	ldr	r3, [pc, #56]	; (7fc <usart_sync_write+0x6c>)
     7c4:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_sent(&descr->device))
     7c6:	4d0c      	ldr	r5, [pc, #48]	; (7f8 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7c8:	5db9      	ldrb	r1, [r7, r6]
     7ca:	0020      	movs	r0, r4
     7cc:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device))
     7ce:	0020      	movs	r0, r4
     7d0:	47a8      	blx	r5
     7d2:	2800      	cmp	r0, #0
     7d4:	d0fb      	beq.n	7ce <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     7d6:	3601      	adds	r6, #1
     7d8:	4546      	cmp	r6, r8
     7da:	d3f5      	bcc.n	7c8 <usart_sync_write+0x38>

	return (int32_t)offset;
}
     7dc:	0030      	movs	r0, r6
     7de:	bc0c      	pop	{r2, r3}
     7e0:	4690      	mov	r8, r2
     7e2:	4699      	mov	r9, r3
     7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7e6:	2000      	movs	r0, #0
     7e8:	e7e0      	b.n	7ac <usart_sync_write+0x1c>
     7ea:	2000      	movs	r0, #0
     7ec:	e7de      	b.n	7ac <usart_sync_write+0x1c>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00000f90 	.word	0x00000f90
     7f4:	000008b5 	.word	0x000008b5
     7f8:	00000a61 	.word	0x00000a61
     7fc:	00000a51 	.word	0x00000a51

00000800 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     802:	46ce      	mov	lr, r9
     804:	4647      	mov	r7, r8
     806:	b580      	push	{r7, lr}
     808:	0004      	movs	r4, r0
     80a:	000f      	movs	r7, r1
     80c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     80e:	2800      	cmp	r0, #0
     810:	d01d      	beq.n	84e <usart_sync_read+0x4e>
     812:	2900      	cmp	r1, #0
     814:	d01d      	beq.n	852 <usart_sync_read+0x52>
     816:	0010      	movs	r0, r2
     818:	1e43      	subs	r3, r0, #1
     81a:	4198      	sbcs	r0, r3
     81c:	2216      	movs	r2, #22
     81e:	32ff      	adds	r2, #255	; 0xff
     820:	490d      	ldr	r1, [pc, #52]	; (858 <usart_sync_read+0x58>)
     822:	4b0e      	ldr	r3, [pc, #56]	; (85c <usart_sync_read+0x5c>)
     824:	4798      	blx	r3
	uint32_t                      offset = 0;
     826:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     828:	3408      	adds	r4, #8
     82a:	4d0d      	ldr	r5, [pc, #52]	; (860 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     82c:	4b0d      	ldr	r3, [pc, #52]	; (864 <usart_sync_read+0x64>)
     82e:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     830:	0020      	movs	r0, r4
     832:	47a8      	blx	r5
     834:	2800      	cmp	r0, #0
     836:	d0fb      	beq.n	830 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     838:	0020      	movs	r0, r4
     83a:	47c8      	blx	r9
     83c:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     83e:	3601      	adds	r6, #1
     840:	4546      	cmp	r6, r8
     842:	d3f5      	bcc.n	830 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     844:	0030      	movs	r0, r6
     846:	bc0c      	pop	{r2, r3}
     848:	4690      	mov	r8, r2
     84a:	4699      	mov	r9, r3
     84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     84e:	2000      	movs	r0, #0
     850:	e7e4      	b.n	81c <usart_sync_read+0x1c>
     852:	2000      	movs	r0, #0
     854:	e7e2      	b.n	81c <usart_sync_read+0x1c>
     856:	46c0      	nop			; (mov r8, r8)
     858:	00000f90 	.word	0x00000f90
     85c:	000008b5 	.word	0x000008b5
     860:	00000a6b 	.word	0x00000a6b
     864:	00000a59 	.word	0x00000a59

00000868 <usart_sync_init>:
{
     868:	b570      	push	{r4, r5, r6, lr}
     86a:	0005      	movs	r5, r0
     86c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     86e:	2800      	cmp	r0, #0
     870:	d013      	beq.n	89a <usart_sync_init+0x32>
     872:	0008      	movs	r0, r1
     874:	1e43      	subs	r3, r0, #1
     876:	4198      	sbcs	r0, r3
     878:	b2c0      	uxtb	r0, r0
     87a:	223e      	movs	r2, #62	; 0x3e
     87c:	4908      	ldr	r1, [pc, #32]	; (8a0 <usart_sync_init+0x38>)
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <usart_sync_init+0x3c>)
     880:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     882:	0028      	movs	r0, r5
     884:	3008      	adds	r0, #8
     886:	0021      	movs	r1, r4
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <usart_sync_init+0x40>)
     88a:	4798      	blx	r3
	if (init_status) {
     88c:	2800      	cmp	r0, #0
     88e:	d103      	bne.n	898 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     890:	4b06      	ldr	r3, [pc, #24]	; (8ac <usart_sync_init+0x44>)
     892:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     894:	4b06      	ldr	r3, [pc, #24]	; (8b0 <usart_sync_init+0x48>)
     896:	602b      	str	r3, [r5, #0]
}
     898:	bd70      	pop	{r4, r5, r6, pc}
     89a:	2000      	movs	r0, #0
     89c:	e7ed      	b.n	87a <usart_sync_init+0x12>
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000f90 	.word	0x00000f90
     8a4:	000008b5 	.word	0x000008b5
     8a8:	00000a25 	.word	0x00000a25
     8ac:	00000801 	.word	0x00000801
     8b0:	00000791 	.word	0x00000791

000008b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8b4:	2800      	cmp	r0, #0
     8b6:	d100      	bne.n	8ba <assert+0x6>
		__asm("BKPT #0");
     8b8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8ba:	4770      	bx	lr

000008bc <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8bc:	6803      	ldr	r3, [r0, #0]
     8be:	2b00      	cmp	r3, #0
     8c0:	d00a      	beq.n	8d8 <is_list_element+0x1c>
		if (it == element) {
     8c2:	428b      	cmp	r3, r1
     8c4:	d00a      	beq.n	8dc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d003      	beq.n	8d4 <is_list_element+0x18>
		if (it == element) {
     8cc:	4299      	cmp	r1, r3
     8ce:	d1fa      	bne.n	8c6 <is_list_element+0xa>
			return true;
     8d0:	2001      	movs	r0, #1
     8d2:	e000      	b.n	8d6 <is_list_element+0x1a>
		}
	}

	return false;
     8d4:	2000      	movs	r0, #0
}
     8d6:	4770      	bx	lr
	return false;
     8d8:	2000      	movs	r0, #0
     8da:	e7fc      	b.n	8d6 <is_list_element+0x1a>
			return true;
     8dc:	2001      	movs	r0, #1
     8de:	e7fa      	b.n	8d6 <is_list_element+0x1a>

000008e0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     8e0:	b570      	push	{r4, r5, r6, lr}
     8e2:	0004      	movs	r4, r0
     8e4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <list_insert_as_head+0x20>)
     8e8:	4798      	blx	r3
     8ea:	2301      	movs	r3, #1
     8ec:	4058      	eors	r0, r3
     8ee:	b2c0      	uxtb	r0, r0
     8f0:	2243      	movs	r2, #67	; 0x43
     8f2:	4904      	ldr	r1, [pc, #16]	; (904 <list_insert_as_head+0x24>)
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <list_insert_as_head+0x28>)
     8f6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     8f8:	6823      	ldr	r3, [r4, #0]
     8fa:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     8fc:	6025      	str	r5, [r4, #0]
}
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	000008bd 	.word	0x000008bd
     904:	00000fac 	.word	0x00000fac
     908:	000008b5 	.word	0x000008b5

0000090c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     90c:	6803      	ldr	r3, [r0, #0]
     90e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     910:	6001      	str	r1, [r0, #0]
}
     912:	4770      	bx	lr

00000914 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     914:	6803      	ldr	r3, [r0, #0]
     916:	2b00      	cmp	r3, #0
     918:	d001      	beq.n	91e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     91a:	681a      	ldr	r2, [r3, #0]
     91c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     91e:	0018      	movs	r0, r3
     920:	4770      	bx	lr
	...

00000924 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     924:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     926:	4b06      	ldr	r3, [pc, #24]	; (940 <_init_chip+0x1c>)
     928:	685a      	ldr	r2, [r3, #4]
     92a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     92c:	4b05      	ldr	r3, [pc, #20]	; (944 <_init_chip+0x20>)
     92e:	4798      	blx	r3
	_sysctrl_init_sources();
     930:	4b05      	ldr	r3, [pc, #20]	; (948 <_init_chip+0x24>)
     932:	4798      	blx	r3
	_gclk_init_generators();
     934:	4b05      	ldr	r3, [pc, #20]	; (94c <_init_chip+0x28>)
     936:	4798      	blx	r3
	_sysctrl_init_referenced_generators();
     938:	4b05      	ldr	r3, [pc, #20]	; (950 <_init_chip+0x2c>)
     93a:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     93c:	bd10      	pop	{r4, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	41004000 	.word	0x41004000
     944:	00000989 	.word	0x00000989
     948:	00000cd9 	.word	0x00000cd9
     94c:	00000955 	.word	0x00000955
     950:	00000d21 	.word	0x00000d21

00000954 <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     954:	4b07      	ldr	r3, [pc, #28]	; (974 <_gclk_init_generators+0x20>)
     956:	2280      	movs	r2, #128	; 0x80
     958:	0052      	lsls	r2, r2, #1
     95a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     95c:	4a06      	ldr	r2, [pc, #24]	; (978 <_gclk_init_generators+0x24>)
     95e:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     960:	4a06      	ldr	r2, [pc, #24]	; (97c <_gclk_init_generators+0x28>)
     962:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     964:	4a06      	ldr	r2, [pc, #24]	; (980 <_gclk_init_generators+0x2c>)
     966:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     968:	2281      	movs	r2, #129	; 0x81
     96a:	0052      	lsls	r2, r2, #1
     96c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     96e:	4a05      	ldr	r2, [pc, #20]	; (984 <_gclk_init_generators+0x30>)
     970:	605a      	str	r2, [r3, #4]
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SRC
	                               | GCLK_GENCTRL_ID(8));
#endif
}
     972:	4770      	bx	lr
     974:	40000c00 	.word	0x40000c00
     978:	00010700 	.word	0x00010700
     97c:	00002001 	.word	0x00002001
     980:	00010601 	.word	0x00010601
     984:	00010602 	.word	0x00010602

00000988 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     988:	4b06      	ldr	r3, [pc, #24]	; (9a4 <_pm_init+0x1c>)
     98a:	7a1a      	ldrb	r2, [r3, #8]
     98c:	b2d2      	uxtb	r2, r2
     98e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     990:	7a5a      	ldrb	r2, [r3, #9]
     992:	b2d2      	uxtb	r2, r2
     994:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     996:	7a9a      	ldrb	r2, [r3, #10]
     998:	b2d2      	uxtb	r2, r2
     99a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     99c:	7ada      	ldrb	r2, [r3, #11]
     99e:	b2d2      	uxtb	r2, r2
     9a0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     9a2:	4770      	bx	lr
     9a4:	40000400 	.word	0x40000400

000009a8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     9a8:	b510      	push	{r4, lr}
     9aa:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     9ac:	4b19      	ldr	r3, [pc, #100]	; (a14 <_usart_init+0x6c>)
     9ae:	18c3      	adds	r3, r0, r3
     9b0:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     9b2:	b2db      	uxtb	r3, r3
     9b4:	2b02      	cmp	r3, #2
     9b6:	d005      	beq.n	9c4 <_usart_init+0x1c>
	ASSERT(false);
     9b8:	2291      	movs	r2, #145	; 0x91
     9ba:	0092      	lsls	r2, r2, #2
     9bc:	4916      	ldr	r1, [pc, #88]	; (a18 <_usart_init+0x70>)
     9be:	2000      	movs	r0, #0
     9c0:	4b16      	ldr	r3, [pc, #88]	; (a1c <_usart_init+0x74>)
     9c2:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9c4:	2201      	movs	r2, #1
     9c6:	69e3      	ldr	r3, [r4, #28]
     9c8:	421a      	tst	r2, r3
     9ca:	d1fc      	bne.n	9c6 <_usart_init+0x1e>
     9cc:	2203      	movs	r2, #3
     9ce:	69e3      	ldr	r3, [r4, #28]
     9d0:	421a      	tst	r2, r3
     9d2:	d1fc      	bne.n	9ce <_usart_init+0x26>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     9d4:	6823      	ldr	r3, [r4, #0]
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
     9d6:	079b      	lsls	r3, r3, #30
     9d8:	d418      	bmi.n	a0c <_usart_init+0x64>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9da:	2201      	movs	r2, #1
     9dc:	69e3      	ldr	r3, [r4, #28]
     9de:	421a      	tst	r2, r3
     9e0:	d1fc      	bne.n	9dc <_usart_init+0x34>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
     9e2:	6823      	ldr	r3, [r4, #0]
     9e4:	2201      	movs	r2, #1
     9e6:	4313      	orrs	r3, r2
     9e8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9ea:	69e3      	ldr	r3, [r4, #28]
     9ec:	421a      	tst	r2, r3
     9ee:	d1fc      	bne.n	9ea <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     9f0:	4b0b      	ldr	r3, [pc, #44]	; (a20 <_usart_init+0x78>)
     9f2:	6023      	str	r3, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     9f4:	23c0      	movs	r3, #192	; 0xc0
     9f6:	029b      	lsls	r3, r3, #10
     9f8:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
     9fa:	23d2      	movs	r3, #210	; 0xd2
     9fc:	425b      	negs	r3, r3
     9fe:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     a00:	2300      	movs	r3, #0
     a02:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     a04:	2230      	movs	r2, #48	; 0x30
     a06:	54a3      	strb	r3, [r4, r2]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
     a08:	2000      	movs	r0, #0
}
     a0a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a0c:	2011      	movs	r0, #17
     a0e:	4240      	negs	r0, r0
     a10:	e7fb      	b.n	a0a <_usart_init+0x62>
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	bdfff800 	.word	0xbdfff800
     a18:	00000ff8 	.word	0x00000ff8
     a1c:	000008b5 	.word	0x000008b5
     a20:	40310004 	.word	0x40310004

00000a24 <_usart_sync_init>:
{
     a24:	b570      	push	{r4, r5, r6, lr}
     a26:	0005      	movs	r5, r0
     a28:	000c      	movs	r4, r1
	ASSERT(device);
     a2a:	1e43      	subs	r3, r0, #1
     a2c:	4198      	sbcs	r0, r3
     a2e:	b2c0      	uxtb	r0, r0
     a30:	22bf      	movs	r2, #191	; 0xbf
     a32:	4904      	ldr	r1, [pc, #16]	; (a44 <_usart_sync_init+0x20>)
     a34:	4b04      	ldr	r3, [pc, #16]	; (a48 <_usart_sync_init+0x24>)
     a36:	4798      	blx	r3
	device->hw = hw;
     a38:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     a3a:	0020      	movs	r0, r4
     a3c:	4b03      	ldr	r3, [pc, #12]	; (a4c <_usart_sync_init+0x28>)
     a3e:	4798      	blx	r3
}
     a40:	bd70      	pop	{r4, r5, r6, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	00000ff8 	.word	0x00000ff8
     a48:	000008b5 	.word	0x000008b5
     a4c:	000009a9 	.word	0x000009a9

00000a50 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     a50:	6803      	ldr	r3, [r0, #0]
     a52:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     a54:	8519      	strh	r1, [r3, #40]	; 0x28
}
     a56:	4770      	bx	lr

00000a58 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     a58:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     a5a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     a5c:	b2c0      	uxtb	r0, r0
}
     a5e:	4770      	bx	lr

00000a60 <_usart_sync_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     a60:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     a62:	7e18      	ldrb	r0, [r3, #24]
     a64:	2301      	movs	r3, #1
     a66:	4018      	ands	r0, r3
}
     a68:	4770      	bx	lr

00000a6a <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     a6a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     a6c:	7e18      	ldrb	r0, [r3, #24]
     a6e:	0740      	lsls	r0, r0, #29
     a70:	0fc0      	lsrs	r0, r0, #31
}
     a72:	4770      	bx	lr

00000a74 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	0006      	movs	r6, r0
     a78:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     a7a:	4b49      	ldr	r3, [pc, #292]	; (ba0 <_spi_m_sync_init+0x12c>)
     a7c:	18cb      	adds	r3, r1, r3
     a7e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     a80:	b2db      	uxtb	r3, r3
     a82:	2b01      	cmp	r3, #1
     a84:	d008      	beq.n	a98 <_spi_m_sync_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     a86:	2800      	cmp	r0, #0
     a88:	d100      	bne.n	a8c <_spi_m_sync_init+0x18>
     a8a:	e079      	b.n	b80 <_spi_m_sync_init+0x10c>
     a8c:	2900      	cmp	r1, #0
     a8e:	d000      	beq.n	a92 <_spi_m_sync_init+0x1e>
     a90:	e07e      	b.n	b90 <_spi_m_sync_init+0x11c>
	return NULL;
     a92:	2500      	movs	r5, #0
	ASSERT(dev && hw);
     a94:	2000      	movs	r0, #0
     a96:	e006      	b.n	aa6 <_spi_m_sync_init+0x32>
     a98:	2800      	cmp	r0, #0
     a9a:	d04d      	beq.n	b38 <_spi_m_sync_init+0xc4>
     a9c:	2900      	cmp	r1, #0
     a9e:	d048      	beq.n	b32 <_spi_m_sync_init+0xbe>
			return &sercomspi_regs[i];
     aa0:	4d40      	ldr	r5, [pc, #256]	; (ba4 <_spi_m_sync_init+0x130>)
     aa2:	3518      	adds	r5, #24
	ASSERT(dev && hw);
     aa4:	2001      	movs	r0, #1
     aa6:	4a40      	ldr	r2, [pc, #256]	; (ba8 <_spi_m_sync_init+0x134>)
     aa8:	4940      	ldr	r1, [pc, #256]	; (bac <_spi_m_sync_init+0x138>)
     aaa:	4b41      	ldr	r3, [pc, #260]	; (bb0 <_spi_m_sync_init+0x13c>)
     aac:	4798      	blx	r3

	if (regs == NULL) {
     aae:	2d00      	cmp	r5, #0
     ab0:	d060      	beq.n	b74 <_spi_m_sync_init+0x100>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ab2:	2201      	movs	r2, #1
     ab4:	69e3      	ldr	r3, [r4, #28]
     ab6:	421a      	tst	r2, r3
     ab8:	d1fc      	bne.n	ab4 <_spi_m_sync_init+0x40>
     aba:	2203      	movs	r2, #3
     abc:	69e3      	ldr	r3, [r4, #28]
     abe:	421a      	tst	r2, r3
     ac0:	d1fc      	bne.n	abc <_spi_m_sync_init+0x48>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     ac2:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     ac4:	079b      	lsls	r3, r3, #30
     ac6:	d458      	bmi.n	b7a <_spi_m_sync_init+0x106>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ac8:	2201      	movs	r2, #1
     aca:	69e3      	ldr	r3, [r4, #28]
     acc:	421a      	tst	r2, r3
     ace:	d1fc      	bne.n	aca <_spi_m_sync_init+0x56>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
     ad0:	6823      	ldr	r3, [r4, #0]
     ad2:	2201      	movs	r2, #1
     ad4:	4313      	orrs	r3, r2
     ad6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     ad8:	69e3      	ldr	r3, [r4, #28]
     ada:	421a      	tst	r2, r3
     adc:	d1fc      	bne.n	ad8 <_spi_m_sync_init+0x64>
		return ERR_DENIED;
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;
     ade:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     ae0:	231c      	movs	r3, #28
     ae2:	682a      	ldr	r2, [r5, #0]
     ae4:	4013      	ands	r3, r2
     ae6:	2b08      	cmp	r3, #8
     ae8:	d029      	beq.n	b3e <_spi_m_sync_init+0xca>
	ASSERT(hw && regs);
     aea:	0020      	movs	r0, r4
     aec:	1e43      	subs	r3, r0, #1
     aee:	4198      	sbcs	r0, r3
     af0:	b2c0      	uxtb	r0, r0
     af2:	228e      	movs	r2, #142	; 0x8e
     af4:	0112      	lsls	r2, r2, #4
     af6:	492d      	ldr	r1, [pc, #180]	; (bac <_spi_m_sync_init+0x138>)
     af8:	4b2d      	ldr	r3, [pc, #180]	; (bb0 <_spi_m_sync_init+0x13c>)
     afa:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
     afc:	4b2d      	ldr	r3, [pc, #180]	; (bb4 <_spi_m_sync_init+0x140>)
     afe:	682a      	ldr	r2, [r5, #0]
     b00:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     b02:	6023      	str	r3, [r4, #0]
	        | (SERCOM_SPI_CTRLB_RXEN));
     b04:	4a2c      	ldr	r2, [pc, #176]	; (bb8 <_spi_m_sync_init+0x144>)
     b06:	686b      	ldr	r3, [r5, #4]
     b08:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(
     b0a:	2380      	movs	r3, #128	; 0x80
     b0c:	029b      	lsls	r3, r3, #10
     b0e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     b10:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
     b12:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
     b14:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     b16:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     b18:	2330      	movs	r3, #48	; 0x30
     b1a:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     b1c:	2307      	movs	r3, #7
     b1e:	686a      	ldr	r2, [r5, #4]
     b20:	4013      	ands	r3, r2
     b22:	1e5a      	subs	r2, r3, #1
     b24:	4193      	sbcs	r3, r2
     b26:	3301      	adds	r3, #1
     b28:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
     b2a:	89eb      	ldrh	r3, [r5, #14]
     b2c:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
     b2e:	2000      	movs	r0, #0
}
     b30:	bd70      	pop	{r4, r5, r6, pc}
			return &sercomspi_regs[i];
     b32:	4d1c      	ldr	r5, [pc, #112]	; (ba4 <_spi_m_sync_init+0x130>)
     b34:	3518      	adds	r5, #24
     b36:	e7ad      	b.n	a94 <_spi_m_sync_init+0x20>
     b38:	4d1a      	ldr	r5, [pc, #104]	; (ba4 <_spi_m_sync_init+0x130>)
     b3a:	3518      	adds	r5, #24
     b3c:	e7aa      	b.n	a94 <_spi_m_sync_init+0x20>
	ASSERT(hw && regs);
     b3e:	0020      	movs	r0, r4
     b40:	1e43      	subs	r3, r0, #1
     b42:	4198      	sbcs	r0, r3
     b44:	b2c0      	uxtb	r0, r0
     b46:	4a1d      	ldr	r2, [pc, #116]	; (bbc <_spi_m_sync_init+0x148>)
     b48:	4918      	ldr	r1, [pc, #96]	; (bac <_spi_m_sync_init+0x138>)
     b4a:	4b19      	ldr	r3, [pc, #100]	; (bb0 <_spi_m_sync_init+0x13c>)
     b4c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
     b4e:	4b19      	ldr	r3, [pc, #100]	; (bb4 <_spi_m_sync_init+0x140>)
     b50:	682a      	ldr	r2, [r5, #0]
     b52:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     b54:	6023      	str	r3, [r4, #0]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     b56:	4a1a      	ldr	r2, [pc, #104]	; (bc0 <_spi_m_sync_init+0x14c>)
     b58:	686b      	ldr	r3, [r5, #4]
     b5a:	401a      	ands	r2, r3
	hri_sercomspi_write_CTRLB_reg(hw,
     b5c:	4b19      	ldr	r3, [pc, #100]	; (bc4 <_spi_m_sync_init+0x150>)
     b5e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     b60:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
     b62:	68ab      	ldr	r3, [r5, #8]
     b64:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     b66:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     b68:	2330      	movs	r3, #48	; 0x30
     b6a:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     b6c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
     b6e:	2b00      	cmp	r3, #0
     b70:	d1fc      	bne.n	b6c <_spi_m_sync_init+0xf8>
     b72:	e7d3      	b.n	b1c <_spi_m_sync_init+0xa8>
		return ERR_INVALID_ARG;
     b74:	200d      	movs	r0, #13
     b76:	4240      	negs	r0, r0
     b78:	e7da      	b.n	b30 <_spi_m_sync_init+0xbc>
		return ERR_DENIED;
     b7a:	2011      	movs	r0, #17
     b7c:	4240      	negs	r0, r0
     b7e:	e7d7      	b.n	b30 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
     b80:	4a09      	ldr	r2, [pc, #36]	; (ba8 <_spi_m_sync_init+0x134>)
     b82:	490a      	ldr	r1, [pc, #40]	; (bac <_spi_m_sync_init+0x138>)
     b84:	2000      	movs	r0, #0
     b86:	4b0a      	ldr	r3, [pc, #40]	; (bb0 <_spi_m_sync_init+0x13c>)
     b88:	4798      	blx	r3
		return ERR_INVALID_ARG;
     b8a:	200d      	movs	r0, #13
     b8c:	4240      	negs	r0, r0
     b8e:	e7cf      	b.n	b30 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
     b90:	4a05      	ldr	r2, [pc, #20]	; (ba8 <_spi_m_sync_init+0x134>)
     b92:	4906      	ldr	r1, [pc, #24]	; (bac <_spi_m_sync_init+0x138>)
     b94:	2001      	movs	r0, #1
     b96:	4b06      	ldr	r3, [pc, #24]	; (bb0 <_spi_m_sync_init+0x13c>)
     b98:	4798      	blx	r3
		return ERR_INVALID_ARG;
     b9a:	200d      	movs	r0, #13
     b9c:	4240      	negs	r0, r0
     b9e:	e7c7      	b.n	b30 <_spi_m_sync_init+0xbc>
     ba0:	bdfff800 	.word	0xbdfff800
     ba4:	00000fcc 	.word	0x00000fcc
     ba8:	00000916 	.word	0x00000916
     bac:	00000ff8 	.word	0x00000ff8
     bb0:	000008b5 	.word	0x000008b5
     bb4:	fffffefc 	.word	0xfffffefc
     bb8:	fffd1dbf 	.word	0xfffd1dbf
     bbc:	000008f4 	.word	0x000008f4
     bc0:	fffdddbf 	.word	0xfffdddbf
     bc4:	00020240 	.word	0x00020240

00000bc8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bca:	46de      	mov	lr, fp
     bcc:	4657      	mov	r7, sl
     bce:	464e      	mov	r6, r9
     bd0:	4645      	mov	r5, r8
     bd2:	b5e0      	push	{r5, r6, r7, lr}
     bd4:	b083      	sub	sp, #12
     bd6:	4681      	mov	r9, r0
     bd8:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
     bda:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     bdc:	680b      	ldr	r3, [r1, #0]
     bde:	4698      	mov	r8, r3
     be0:	684d      	ldr	r5, [r1, #4]
     be2:	7903      	ldrb	r3, [r0, #4]
     be4:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
     be6:	2800      	cmp	r0, #0
     be8:	d015      	beq.n	c16 <_spi_m_sync_trans+0x4e>
     bea:	0020      	movs	r0, r4
     bec:	1e43      	subs	r3, r0, #1
     bee:	4198      	sbcs	r0, r3
     bf0:	b2c0      	uxtb	r0, r0
     bf2:	4a36      	ldr	r2, [pc, #216]	; (ccc <_spi_m_sync_trans+0x104>)
     bf4:	4936      	ldr	r1, [pc, #216]	; (cd0 <_spi_m_sync_trans+0x108>)
     bf6:	4b37      	ldr	r3, [pc, #220]	; (cd4 <_spi_m_sync_trans+0x10c>)
     bf8:	4798      	blx	r3
     bfa:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     bfc:	075b      	lsls	r3, r3, #29
     bfe:	d13f      	bne.n	c80 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c00:	2303      	movs	r3, #3
     c02:	69e0      	ldr	r0, [r4, #28]
     c04:	4018      	ands	r0, r3
     c06:	d1fc      	bne.n	c02 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     c08:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     c0a:	079b      	lsls	r3, r3, #30
     c0c:	d53b      	bpl.n	c86 <_spi_m_sync_trans+0xbe>
     c0e:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     c10:	2301      	movs	r3, #1
     c12:	469c      	mov	ip, r3
     c14:	e009      	b.n	c2a <_spi_m_sync_trans+0x62>
     c16:	2000      	movs	r0, #0
     c18:	e7eb      	b.n	bf2 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
     c1a:	3501      	adds	r5, #1
	ctrl->rxcnt++;
     c1c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     c1e:	b25b      	sxtb	r3, r3
     c20:	2b00      	cmp	r3, #0
     c22:	db16      	blt.n	c52 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     c24:	68b3      	ldr	r3, [r6, #8]
     c26:	4283      	cmp	r3, r0
     c28:	d927      	bls.n	c7a <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     c2a:	7e23      	ldrb	r3, [r4, #24]
     c2c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     c2e:	2104      	movs	r1, #4
     c30:	4219      	tst	r1, r3
     c32:	d02b      	beq.n	c8c <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
     c34:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     c36:	2d00      	cmp	r5, #0
     c38:	d0f0      	beq.n	c1c <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
     c3a:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
     c3c:	9901      	ldr	r1, [sp, #4]
     c3e:	2901      	cmp	r1, #1
     c40:	d9eb      	bls.n	c1a <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     c42:	0a3f      	lsrs	r7, r7, #8
     c44:	706f      	strb	r7, [r5, #1]
     c46:	3502      	adds	r5, #2
     c48:	e7e8      	b.n	c1c <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
     c4a:	2101      	movs	r1, #1
     c4c:	468b      	mov	fp, r1
     c4e:	44d8      	add	r8, fp
     c50:	e037      	b.n	cc2 <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     c52:	2301      	movs	r3, #1
     c54:	425b      	negs	r3, r3
     c56:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     c58:	3381      	adds	r3, #129	; 0x81
     c5a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
     c5c:	2013      	movs	r0, #19
     c5e:	4240      	negs	r0, r0
	tmp &= mask;
     c60:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     c62:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     c64:	4213      	tst	r3, r2
     c66:	d0fc      	beq.n	c62 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     c68:	2303      	movs	r3, #3
     c6a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     c6c:	b003      	add	sp, #12
     c6e:	bc3c      	pop	{r2, r3, r4, r5}
     c70:	4690      	mov	r8, r2
     c72:	4699      	mov	r9, r3
     c74:	46a2      	mov	sl, r4
     c76:	46ab      	mov	fp, r5
     c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     c7a:	4293      	cmp	r3, r2
     c7c:	d8d5      	bhi.n	c2a <_spi_m_sync_trans+0x62>
     c7e:	e7ef      	b.n	c60 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
     c80:	2004      	movs	r0, #4
     c82:	4240      	negs	r0, r0
     c84:	e7f2      	b.n	c6c <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
     c86:	2014      	movs	r0, #20
     c88:	4240      	negs	r0, r0
     c8a:	e7ef      	b.n	c6c <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     c8c:	4290      	cmp	r0, r2
     c8e:	d8c6      	bhi.n	c1e <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     c90:	4667      	mov	r7, ip
     c92:	421f      	tst	r7, r3
     c94:	d0c3      	beq.n	c1e <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     c96:	464f      	mov	r7, r9
     c98:	88ff      	ldrh	r7, [r7, #6]
     c9a:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
     c9c:	4647      	mov	r7, r8
     c9e:	2f00      	cmp	r7, #0
     ca0:	d00f      	beq.n	cc2 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
     ca2:	783f      	ldrb	r7, [r7, #0]
     ca4:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
     ca6:	9901      	ldr	r1, [sp, #4]
     ca8:	2901      	cmp	r1, #1
     caa:	d9ce      	bls.n	c4a <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
     cac:	4647      	mov	r7, r8
     cae:	787f      	ldrb	r7, [r7, #1]
     cb0:	023f      	lsls	r7, r7, #8
     cb2:	46bb      	mov	fp, r7
     cb4:	4657      	mov	r7, sl
     cb6:	4659      	mov	r1, fp
     cb8:	430f      	orrs	r7, r1
     cba:	46ba      	mov	sl, r7
			ctrl->txbuf++;
     cbc:	2102      	movs	r1, #2
     cbe:	468b      	mov	fp, r1
     cc0:	44d8      	add	r8, fp
	ctrl->txcnt++;
     cc2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     cc4:	4657      	mov	r7, sl
     cc6:	62a7      	str	r7, [r4, #40]	; 0x28
     cc8:	e7a9      	b.n	c1e <_spi_m_sync_trans+0x56>
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	00000a72 	.word	0x00000a72
     cd0:	00000ff8 	.word	0x00000ff8
     cd4:	000008b5 	.word	0x000008b5

00000cd8 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
     cd8:	b510      	push	{r4, lr}
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     cda:	4b0e      	ldr	r3, [pc, #56]	; (d14 <_sysctrl_init_sources+0x3c>)
     cdc:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     cde:	6a18      	ldr	r0, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     ce0:	490d      	ldr	r1, [pc, #52]	; (d18 <_sysctrl_init_sources+0x40>)
     ce2:	4011      	ands	r1, r2
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     ce4:	0f80      	lsrs	r0, r0, #30
     ce6:	0780      	lsls	r0, r0, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     ce8:	4c0c      	ldr	r4, [pc, #48]	; (d1c <_sysctrl_init_sources+0x44>)
     cea:	4320      	orrs	r0, r4
     cec:	4301      	orrs	r1, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     cee:	6219      	str	r1, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     cf0:	6999      	ldr	r1, [r3, #24]
     cf2:	2002      	movs	r0, #2
     cf4:	4301      	orrs	r1, r0
     cf6:	6199      	str	r1, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
     cf8:	02d2      	lsls	r2, r2, #11
     cfa:	0ed2      	lsrs	r2, r2, #27
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     cfc:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     cfe:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     d00:	2208      	movs	r2, #8
     d02:	68cb      	ldr	r3, [r1, #12]
     d04:	421a      	tst	r2, r3
     d06:	d0fc      	beq.n	d02 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     d08:	4a02      	ldr	r2, [pc, #8]	; (d14 <_sysctrl_init_sources+0x3c>)
     d0a:	6a13      	ldr	r3, [r2, #32]
     d0c:	2180      	movs	r1, #128	; 0x80
     d0e:	430b      	orrs	r3, r1
     d10:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     d12:	bd10      	pop	{r4, pc}
     d14:	40000800 	.word	0x40000800
     d18:	0fff0000 	.word	0x0fff0000
     d1c:	00000302 	.word	0x00000302

00000d20 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     d20:	2202      	movs	r2, #2
     d22:	4b1c      	ldr	r3, [pc, #112]	; (d94 <_sysctrl_init_referenced_generators+0x74>)
     d24:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     d26:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     d28:	320e      	adds	r2, #14
     d2a:	68cb      	ldr	r3, [r1, #12]
     d2c:	421a      	tst	r2, r3
     d2e:	d0fc      	beq.n	d2a <_sysctrl_init_referenced_generators+0xa>
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     d30:	4a19      	ldr	r2, [pc, #100]	; (d98 <_sysctrl_init_referenced_generators+0x78>)
     d32:	4b18      	ldr	r3, [pc, #96]	; (d94 <_sysctrl_init_referenced_generators+0x74>)
     d34:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     d36:	4b19      	ldr	r3, [pc, #100]	; (d9c <_sysctrl_init_referenced_generators+0x7c>)
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	0e9b      	lsrs	r3, r3, #26
     d3c:	2b3f      	cmp	r3, #63	; 0x3f
     d3e:	d01f      	beq.n	d80 <_sysctrl_init_referenced_generators+0x60>
     d40:	029b      	lsls	r3, r3, #10
     d42:	2280      	movs	r2, #128	; 0x80
     d44:	0092      	lsls	r2, r2, #2
     d46:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     d48:	4a12      	ldr	r2, [pc, #72]	; (d94 <_sysctrl_init_referenced_generators+0x74>)
     d4a:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     d4c:	2302      	movs	r3, #2
     d4e:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     d50:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     d52:	075b      	lsls	r3, r3, #29
     d54:	d517      	bpl.n	d86 <_sysctrl_init_referenced_generators+0x66>
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     d56:	0011      	movs	r1, r2
	tmp &= mask;
     d58:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     d5a:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
     d5c:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     d5e:	2bd0      	cmp	r3, #208	; 0xd0
     d60:	d1fb      	bne.n	d5a <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
     d62:	4a0c      	ldr	r2, [pc, #48]	; (d94 <_sysctrl_init_referenced_generators+0x74>)
     d64:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     d66:	2180      	movs	r1, #128	; 0x80
     d68:	430b      	orrs	r3, r1
     d6a:	8493      	strh	r3, [r2, #36]	; 0x24
	return ((Gclk *)hw)->GENDIV.reg;
}

static inline bool hri_gclk_get_STATUS_SYNCBUSY_bit(const void *const hw)
{
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     d6c:	4a0c      	ldr	r2, [pc, #48]	; (da0 <_sysctrl_init_referenced_generators+0x80>)
     d6e:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     d70:	09db      	lsrs	r3, r3, #7
     d72:	d1fc      	bne.n	d6e <_sysctrl_init_referenced_generators+0x4e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     d74:	4a07      	ldr	r2, [pc, #28]	; (d94 <_sysctrl_init_referenced_generators+0x74>)
     d76:	6993      	ldr	r3, [r2, #24]
     d78:	2102      	movs	r1, #2
     d7a:	438b      	bics	r3, r1
     d7c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     d7e:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     d80:	23fc      	movs	r3, #252	; 0xfc
     d82:	01db      	lsls	r3, r3, #7
     d84:	e7e0      	b.n	d48 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     d86:	4903      	ldr	r1, [pc, #12]	; (d94 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     d88:	2210      	movs	r2, #16
     d8a:	68cb      	ldr	r3, [r1, #12]
     d8c:	421a      	tst	r2, r3
     d8e:	d0fc      	beq.n	d8a <_sysctrl_init_referenced_generators+0x6a>
     d90:	e7e7      	b.n	d62 <_sysctrl_init_referenced_generators+0x42>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	40000800 	.word	0x40000800
     d98:	04010000 	.word	0x04010000
     d9c:	00806024 	.word	0x00806024
     da0:	40000c00 	.word	0x40000c00

00000da4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     da4:	4b02      	ldr	r3, [pc, #8]	; (db0 <_delay_init+0xc>)
     da6:	4a03      	ldr	r2, [pc, #12]	; (db4 <_delay_init+0x10>)
     da8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     daa:	2205      	movs	r2, #5
     dac:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     dae:	4770      	bx	lr
     db0:	e000e010 	.word	0xe000e010
     db4:	00ffffff 	.word	0x00ffffff

00000db8 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
     db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dba:	0007      	movs	r7, r0
     dbc:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
     dbe:	4b38      	ldr	r3, [pc, #224]	; (ea0 <_timer_init+0xe8>)
     dc0:	18cd      	adds	r5, r1, r3
     dc2:	0aad      	lsrs	r5, r5, #10
     dc4:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
     dc6:	2d00      	cmp	r5, #0
     dc8:	d047      	beq.n	e5a <_timer_init+0xa2>
			return i;
		}
	}

	ASSERT(false);
     dca:	2246      	movs	r2, #70	; 0x46
     dcc:	32ff      	adds	r2, #255	; 0xff
     dce:	4935      	ldr	r1, [pc, #212]	; (ea4 <_timer_init+0xec>)
     dd0:	2000      	movs	r0, #0
     dd2:	4b35      	ldr	r3, [pc, #212]	; (ea8 <_timer_init+0xf0>)
     dd4:	4798      	blx	r3
	return -1;
     dd6:	2601      	movs	r6, #1
     dd8:	4276      	negs	r6, r6
	device->hw = hw;
     dda:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
     ddc:	2293      	movs	r2, #147	; 0x93
     dde:	4931      	ldr	r1, [pc, #196]	; (ea4 <_timer_init+0xec>)
     de0:	2001      	movs	r0, #1
     de2:	4b31      	ldr	r3, [pc, #196]	; (ea8 <_timer_init+0xf0>)
     de4:	4798      	blx	r3
typedef uint8_t  hri_tc_per_reg_t;
typedef uint8_t  hri_tc_status_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY)
     de6:	7be3      	ldrb	r3, [r4, #15]
     de8:	09db      	lsrs	r3, r3, #7
     dea:	d1fc      	bne.n	de6 <_timer_init+0x2e>
}

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
     dec:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
     dee:	079b      	lsls	r3, r3, #30
     df0:	d453      	bmi.n	e9a <_timer_init+0xe2>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
     df2:	8823      	ldrh	r3, [r4, #0]
     df4:	2201      	movs	r2, #1
     df6:	4313      	orrs	r3, r2
     df8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY)
     dfa:	7be3      	ldrb	r3, [r4, #15]
     dfc:	09db      	lsrs	r3, r3, #7
     dfe:	d1fc      	bne.n	dfa <_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
     e00:	00b3      	lsls	r3, r6, #2
     e02:	199b      	adds	r3, r3, r6
     e04:	009a      	lsls	r2, r3, #2
     e06:	4b29      	ldr	r3, [pc, #164]	; (eac <_timer_init+0xf4>)
     e08:	189b      	adds	r3, r3, r2
     e0a:	885a      	ldrh	r2, [r3, #2]
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
     e0c:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
     e0e:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
     e10:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
     e12:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
     e14:	8163      	strh	r3, [r4, #10]
     e16:	230c      	movs	r3, #12
     e18:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
     e1a:	2b08      	cmp	r3, #8
     e1c:	d01f      	beq.n	e5e <_timer_init+0xa6>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
     e1e:	2b00      	cmp	r3, #0
     e20:	d127      	bne.n	e72 <_timer_init+0xba>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tc_count16_reg_t)_tcs[i].cc0);
     e22:	00b3      	lsls	r3, r6, #2
     e24:	199b      	adds	r3, r3, r6
     e26:	009b      	lsls	r3, r3, #2
     e28:	4a20      	ldr	r2, [pc, #128]	; (eac <_timer_init+0xf4>)
     e2a:	18d3      	adds	r3, r2, r3
     e2c:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e2e:	8323      	strh	r3, [r4, #24]
     e30:	2300      	movs	r3, #0
     e32:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e34:	2301      	movs	r3, #1
     e36:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
     e38:	4b1d      	ldr	r3, [pc, #116]	; (eb0 <_timer_init+0xf8>)
     e3a:	429c      	cmp	r4, r3
     e3c:	d02a      	beq.n	e94 <_timer_init+0xdc>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
     e3e:	3512      	adds	r5, #18

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e40:	231f      	movs	r3, #31
     e42:	401d      	ands	r5, r3
     e44:	3b1e      	subs	r3, #30
     e46:	40ab      	lsls	r3, r5
     e48:	4a1a      	ldr	r2, [pc, #104]	; (eb4 <_timer_init+0xfc>)
     e4a:	2180      	movs	r1, #128	; 0x80
     e4c:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     e4e:	3101      	adds	r1, #1
     e50:	31ff      	adds	r1, #255	; 0xff
     e52:	5053      	str	r3, [r2, r1]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e54:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
     e56:	2000      	movs	r0, #0
}
     e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
     e5a:	2600      	movs	r6, #0
     e5c:	e7bd      	b.n	dda <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
     e5e:	00b3      	lsls	r3, r6, #2
     e60:	199e      	adds	r6, r3, r6
     e62:	00b6      	lsls	r6, r6, #2
     e64:	4b11      	ldr	r3, [pc, #68]	; (eac <_timer_init+0xf4>)
     e66:	199e      	adds	r6, r3, r6
     e68:	68f3      	ldr	r3, [r6, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     e6a:	61a3      	str	r3, [r4, #24]
     e6c:	2300      	movs	r3, #0
     e6e:	61e3      	str	r3, [r4, #28]
     e70:	e7e0      	b.n	e34 <_timer_init+0x7c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
     e72:	2b04      	cmp	r3, #4
     e74:	d1de      	bne.n	e34 <_timer_init+0x7c>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tc_count8_reg_t)_tcs[i].cc0);
     e76:	480d      	ldr	r0, [pc, #52]	; (eac <_timer_init+0xf4>)
     e78:	00b3      	lsls	r3, r6, #2
     e7a:	199a      	adds	r2, r3, r6
     e7c:	0092      	lsls	r2, r2, #2
     e7e:	1882      	adds	r2, r0, r2
     e80:	7b12      	ldrb	r2, [r2, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
     e82:	7622      	strb	r2, [r4, #24]
     e84:	2200      	movs	r2, #0
     e86:	7662      	strb	r2, [r4, #25]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
     e88:	199b      	adds	r3, r3, r6
     e8a:	009b      	lsls	r3, r3, #2
     e8c:	18c3      	adds	r3, r0, r3
     e8e:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
     e90:	7523      	strb	r3, [r4, #20]
     e92:	e7cf      	b.n	e34 <_timer_init+0x7c>
		_tc3_dev = (struct _timer_device *)dev;
     e94:	4b08      	ldr	r3, [pc, #32]	; (eb8 <_timer_init+0x100>)
     e96:	601f      	str	r7, [r3, #0]
     e98:	e7d1      	b.n	e3e <_timer_init+0x86>
		return ERR_DENIED;
     e9a:	2011      	movs	r0, #17
     e9c:	4240      	negs	r0, r0
     e9e:	e7db      	b.n	e58 <_timer_init+0xa0>
     ea0:	bdffd400 	.word	0xbdffd400
     ea4:	00001028 	.word	0x00001028
     ea8:	000008b5 	.word	0x000008b5
     eac:	00001014 	.word	0x00001014
     eb0:	42002c00 	.word	0x42002c00
     eb4:	e000e100 	.word	0xe000e100
     eb8:	20000020 	.word	0x20000020

00000ebc <_tc_get_timer>:
}
     ebc:	2000      	movs	r0, #0
     ebe:	4770      	bx	lr

00000ec0 <TC3_Handler>:
{
     ec0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
     ec2:	4b06      	ldr	r3, [pc, #24]	; (edc <TC3_Handler+0x1c>)
     ec4:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
     ec6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     ec8:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     eca:	07d2      	lsls	r2, r2, #31
     ecc:	d400      	bmi.n	ed0 <TC3_Handler+0x10>
}
     ece:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     ed0:	2201      	movs	r2, #1
     ed2:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
     ed4:	6803      	ldr	r3, [r0, #0]
     ed6:	4798      	blx	r3
}
     ed8:	e7f9      	b.n	ece <TC3_Handler+0xe>
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	20000020 	.word	0x20000020

00000ee0 <main>:
#include <atmel_start.h>
#include "./app/app.h"

int main(void)
{
     ee0:	b510      	push	{r4, lr}
	// Initializes MCU, MCU drivers and middleware
	atmel_start_init();
     ee2:	4b07      	ldr	r3, [pc, #28]	; (f00 <main+0x20>)
     ee4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ee6:	23c0      	movs	r3, #192	; 0xc0
     ee8:	05db      	lsls	r3, r3, #23
     eea:	2108      	movs	r1, #8
     eec:	2294      	movs	r2, #148	; 0x94
     eee:	5099      	str	r1, [r3, r2]
     ef0:	2280      	movs	r2, #128	; 0x80
     ef2:	0512      	lsls	r2, r2, #20
     ef4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     ef6:	209c      	movs	r0, #156	; 0x9c
     ef8:	5019      	str	r1, [r3, r0]
     efa:	61da      	str	r2, [r3, #28]
     efc:	e7fc      	b.n	ef8 <main+0x18>
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000115 	.word	0x00000115

00000f04 <SysTick_Handler>:
}

void SysTick_Handler(void)
{
    static uint32_t systck_count = 0;
    systck_count++;
     f04:	4a02      	ldr	r2, [pc, #8]	; (f10 <SysTick_Handler+0xc>)
     f06:	6813      	ldr	r3, [r2, #0]
     f08:	3301      	adds	r3, #1
     f0a:	6013      	str	r3, [r2, #0]
     f0c:	4770      	bx	lr
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	20000024 	.word	0x20000024

00000f14 <__libc_init_array>:
     f14:	b570      	push	{r4, r5, r6, lr}
     f16:	2600      	movs	r6, #0
     f18:	4d0c      	ldr	r5, [pc, #48]	; (f4c <__libc_init_array+0x38>)
     f1a:	4c0d      	ldr	r4, [pc, #52]	; (f50 <__libc_init_array+0x3c>)
     f1c:	1b64      	subs	r4, r4, r5
     f1e:	10a4      	asrs	r4, r4, #2
     f20:	42a6      	cmp	r6, r4
     f22:	d109      	bne.n	f38 <__libc_init_array+0x24>
     f24:	2600      	movs	r6, #0
     f26:	f000 f889 	bl	103c <_init>
     f2a:	4d0a      	ldr	r5, [pc, #40]	; (f54 <__libc_init_array+0x40>)
     f2c:	4c0a      	ldr	r4, [pc, #40]	; (f58 <__libc_init_array+0x44>)
     f2e:	1b64      	subs	r4, r4, r5
     f30:	10a4      	asrs	r4, r4, #2
     f32:	42a6      	cmp	r6, r4
     f34:	d105      	bne.n	f42 <__libc_init_array+0x2e>
     f36:	bd70      	pop	{r4, r5, r6, pc}
     f38:	00b3      	lsls	r3, r6, #2
     f3a:	58eb      	ldr	r3, [r5, r3]
     f3c:	4798      	blx	r3
     f3e:	3601      	adds	r6, #1
     f40:	e7ee      	b.n	f20 <__libc_init_array+0xc>
     f42:	00b3      	lsls	r3, r6, #2
     f44:	58eb      	ldr	r3, [r5, r3]
     f46:	4798      	blx	r3
     f48:	3601      	adds	r6, #1
     f4a:	e7f2      	b.n	f32 <__libc_init_array+0x1e>
     f4c:	00001048 	.word	0x00001048
     f50:	00001048 	.word	0x00001048
     f54:	00001048 	.word	0x00001048
     f58:	0000104c 	.word	0x0000104c
     f5c:	682f2e2e 	.word	0x682f2e2e
     f60:	732f6c61 	.word	0x732f6c61
     f64:	682f6372 	.word	0x682f6372
     f68:	735f6c61 	.word	0x735f6c61
     f6c:	6d5f6970 	.word	0x6d5f6970
     f70:	6e79735f 	.word	0x6e79735f
     f74:	00632e63 	.word	0x00632e63
     f78:	682f2e2e 	.word	0x682f2e2e
     f7c:	732f6c61 	.word	0x732f6c61
     f80:	682f6372 	.word	0x682f6372
     f84:	745f6c61 	.word	0x745f6c61
     f88:	72656d69 	.word	0x72656d69
     f8c:	0000632e 	.word	0x0000632e
     f90:	682f2e2e 	.word	0x682f2e2e
     f94:	732f6c61 	.word	0x732f6c61
     f98:	682f6372 	.word	0x682f6372
     f9c:	755f6c61 	.word	0x755f6c61
     fa0:	74726173 	.word	0x74726173
     fa4:	6e79735f 	.word	0x6e79735f
     fa8:	00632e63 	.word	0x00632e63
     fac:	682f2e2e 	.word	0x682f2e2e
     fb0:	752f6c61 	.word	0x752f6c61
     fb4:	736c6974 	.word	0x736c6974
     fb8:	6372732f 	.word	0x6372732f
     fbc:	6974752f 	.word	0x6974752f
     fc0:	6c5f736c 	.word	0x6c5f736c
     fc4:	2e747369 	.word	0x2e747369
     fc8:	00000063 	.word	0x00000063

00000fcc <_i2cms>:
	...

00000fe4 <sercomspi_regs>:
     fe4:	0030000c 00020000 00000000 01ff0017     ..0.............
     ff4:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    1004:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00001014 <_tcs>:
    1014:	01680003 00000000 00000000 00000032     ..h.........2...
    1024:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    1034:	63745f6c 0000632e                       l_tc.c..

0000103c <_init>:
    103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1042:	bc08      	pop	{r3}
    1044:	469e      	mov	lr, r3
    1046:	4770      	bx	lr

00001048 <__init_array_start>:
    1048:	000000dd 	.word	0x000000dd

0000104c <_fini>:
    104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1052:	bc08      	pop	{r3}
    1054:	469e      	mov	lr, r3
    1056:	4770      	bx	lr

00001058 <__fini_array_start>:
    1058:	000000b5 	.word	0x000000b5
