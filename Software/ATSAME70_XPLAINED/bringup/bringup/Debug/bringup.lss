
bringup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002788  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20400000  00402788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001dc  20400074  004027fc  00020074  2**2
                  ALLOC
  3 .heap         00000200  20400250  004029d8  00020074  2**0
                  ALLOC
  4 .stack        00000400  20400450  00402bd8  00020074  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
  7 .debug_info   000174c4  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000031eb  00000000  00000000  000375bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008c8  00000000  00000000  0003a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b28  00000000  00000000  0003b072  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003b596  00000000  00000000  0003bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012388  00000000  00000000  00077130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0011e0e6  00000000  00000000  000894b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016f4  00000000  00000000  001a75a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000a50d  00000000  00000000  001a8c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 08 40 20 c9 01 40 00 c5 01 40 00 c5 01 40 00     P.@ ..@...@...@.
  400010:	c5 01 40 00 c5 01 40 00 c5 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c5 01 40 00 c5 01 40 00 00 00 00 00 c5 01 40 00     ..@...@.......@.
  40003c:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  40004c:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  40005c:	c5 01 40 00 c5 01 40 00 00 00 00 00 c5 01 40 00     ..@...@.......@.
  40006c:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  40007c:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  40008c:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  40009c:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  4000ac:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  4000bc:	c5 01 40 00 c5 01 40 00 c5 01 40 00 09 10 40 00     ..@...@...@...@.
  4000cc:	c5 01 40 00 00 00 00 00 c5 01 40 00 00 00 00 00     ..@.......@.....
  4000dc:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  4000ec:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  4000fc:	c5 01 40 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ..@...@...@...@.
  40010c:	c5 01 40 00 c5 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c5 01 40 00 c5 01 40 00 c5 01 40 00     ......@...@...@.
  40012c:	c5 01 40 00 c5 01 40 00 00 00 00 00 c5 01 40 00     ..@...@.......@.
  40013c:	c5 01 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400074 	.word	0x20400074
  40015c:	00000000 	.word	0x00000000
  400160:	00402788 	.word	0x00402788

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402788 	.word	0x00402788
  4001a0:	20400078 	.word	0x20400078
  4001a4:	00402788 	.word	0x00402788
  4001a8:	00000000 	.word	0x00000000

004001ac <app_init>:
/*!
* @brief @todo
* @return void
*/
void app_init(void)
{
  4001ac:	4770      	bx	lr
	...

004001b0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
  4001b0:	b508      	push	{r3, lr}
	system_init();
  4001b2:	4b02      	ldr	r3, [pc, #8]	; (4001bc <atmel_start_init+0xc>)
  4001b4:	4798      	blx	r3
	usb_init();
  4001b6:	4b02      	ldr	r3, [pc, #8]	; (4001c0 <atmel_start_init+0x10>)
  4001b8:	4798      	blx	r3
  4001ba:	bd08      	pop	{r3, pc}
  4001bc:	0040031d 	.word	0x0040031d
  4001c0:	00402655 	.word	0x00402655

004001c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001c4:	e7fe      	b.n	4001c4 <Dummy_Handler>
	...

004001c8 <Reset_Handler>:
{
  4001c8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ca:	4b17      	ldr	r3, [pc, #92]	; (400228 <Reset_Handler+0x60>)
  4001cc:	4a17      	ldr	r2, [pc, #92]	; (40022c <Reset_Handler+0x64>)
  4001ce:	429a      	cmp	r2, r3
  4001d0:	d010      	beq.n	4001f4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4001d2:	4b17      	ldr	r3, [pc, #92]	; (400230 <Reset_Handler+0x68>)
  4001d4:	4a14      	ldr	r2, [pc, #80]	; (400228 <Reset_Handler+0x60>)
  4001d6:	429a      	cmp	r2, r3
  4001d8:	d20c      	bcs.n	4001f4 <Reset_Handler+0x2c>
  4001da:	3b01      	subs	r3, #1
  4001dc:	1a9b      	subs	r3, r3, r2
  4001de:	f023 0303 	bic.w	r3, r3, #3
  4001e2:	3304      	adds	r3, #4
  4001e4:	4413      	add	r3, r2
  4001e6:	4911      	ldr	r1, [pc, #68]	; (40022c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4001e8:	f851 0b04 	ldr.w	r0, [r1], #4
  4001ec:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4001f0:	429a      	cmp	r2, r3
  4001f2:	d1f9      	bne.n	4001e8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4001f4:	4b0f      	ldr	r3, [pc, #60]	; (400234 <Reset_Handler+0x6c>)
  4001f6:	4a10      	ldr	r2, [pc, #64]	; (400238 <Reset_Handler+0x70>)
  4001f8:	429a      	cmp	r2, r3
  4001fa:	d20a      	bcs.n	400212 <Reset_Handler+0x4a>
  4001fc:	3b01      	subs	r3, #1
  4001fe:	1a9b      	subs	r3, r3, r2
  400200:	f023 0303 	bic.w	r3, r3, #3
  400204:	3304      	adds	r3, #4
  400206:	4413      	add	r3, r2
                *pDest++ = 0;
  400208:	2100      	movs	r1, #0
  40020a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020e:	4293      	cmp	r3, r2
  400210:	d1fb      	bne.n	40020a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x74>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x78>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x7c>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x80>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x5c>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	00402788 	.word	0x00402788
  400230:	20400074 	.word	0x20400074
  400234:	20400250 	.word	0x20400250
  400238:	20400074 	.word	0x20400074
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00402661 	.word	0x00402661
  400248:	00401bb9 	.word	0x00401bb9

0040024c <CTRL_SPI_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40024c:	4b11      	ldr	r3, [pc, #68]	; (400294 <CTRL_SPI_PORT_init+0x48>)
  40024e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400250:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400254:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400256:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400258:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40025c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40025e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400262:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400266:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40026a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40026c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40026e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400272:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400274:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400278:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40027a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40027c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400280:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400282:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400284:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400288:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40028a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40028e:	605a      	str	r2, [r3, #4]
  400290:	4770      	bx	lr
  400292:	bf00      	nop
  400294:	400e1400 	.word	0x400e1400

00400298 <CTRL_SPI_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400298:	4b04      	ldr	r3, [pc, #16]	; (4002ac <CTRL_SPI_CLOCK_init+0x14>)
  40029a:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40029c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4002a0:	d103      	bne.n	4002aa <CTRL_SPI_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002a6:	4b01      	ldr	r3, [pc, #4]	; (4002ac <CTRL_SPI_CLOCK_init+0x14>)
  4002a8:	611a      	str	r2, [r3, #16]
  4002aa:	4770      	bx	lr
  4002ac:	400e0600 	.word	0x400e0600

004002b0 <CTRL_SPI_init>:
{
	_pmc_enable_periph_clock(ID_SPI0);
}

void CTRL_SPI_init(void)
{
  4002b0:	b508      	push	{r3, lr}
	CTRL_SPI_CLOCK_init();
  4002b2:	4b04      	ldr	r3, [pc, #16]	; (4002c4 <CTRL_SPI_init+0x14>)
  4002b4:	4798      	blx	r3
	spi_m_sync_init(&CTRL_SPI, SPI0);
  4002b6:	4904      	ldr	r1, [pc, #16]	; (4002c8 <CTRL_SPI_init+0x18>)
  4002b8:	4804      	ldr	r0, [pc, #16]	; (4002cc <CTRL_SPI_init+0x1c>)
  4002ba:	4b05      	ldr	r3, [pc, #20]	; (4002d0 <CTRL_SPI_init+0x20>)
  4002bc:	4798      	blx	r3
	CTRL_SPI_PORT_init();
  4002be:	4b05      	ldr	r3, [pc, #20]	; (4002d4 <CTRL_SPI_init+0x24>)
  4002c0:	4798      	blx	r3
  4002c2:	bd08      	pop	{r3, pc}
  4002c4:	00400299 	.word	0x00400299
  4002c8:	40008000 	.word	0x40008000
  4002cc:	2040023c 	.word	0x2040023c
  4002d0:	004003f1 	.word	0x004003f1
  4002d4:	0040024d 	.word	0x0040024d

004002d8 <delay_driver_init>:
}

void delay_driver_init(void)
{
  4002d8:	b508      	push	{r3, lr}
	delay_init(SysTick);
  4002da:	4802      	ldr	r0, [pc, #8]	; (4002e4 <delay_driver_init+0xc>)
  4002dc:	4b02      	ldr	r3, [pc, #8]	; (4002e8 <delay_driver_init+0x10>)
  4002de:	4798      	blx	r3
  4002e0:	bd08      	pop	{r3, pc}
  4002e2:	bf00      	nop
  4002e4:	e000e010 	.word	0xe000e010
  4002e8:	004003bd 	.word	0x004003bd

004002ec <USB_DEVICE_INSTANCE_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002ec:	4b05      	ldr	r3, [pc, #20]	; (400304 <USB_DEVICE_INSTANCE_CLOCK_init+0x18>)
  4002ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4002f2:	f013 0f04 	tst.w	r3, #4
  4002f6:	d103      	bne.n	400300 <USB_DEVICE_INSTANCE_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4002f8:	2204      	movs	r2, #4
  4002fa:	4b02      	ldr	r3, [pc, #8]	; (400304 <USB_DEVICE_INSTANCE_CLOCK_init+0x18>)
  4002fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400300:	4770      	bx	lr
  400302:	bf00      	nop
  400304:	400e0600 	.word	0x400e0600

00400308 <USB_DEVICE_INSTANCE_init>:
{
	_pmc_enable_periph_clock(ID_USBHS);
}

void USB_DEVICE_INSTANCE_init(void)
{
  400308:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
  40030a:	4b02      	ldr	r3, [pc, #8]	; (400314 <USB_DEVICE_INSTANCE_init+0xc>)
  40030c:	4798      	blx	r3
	usb_d_init();
  40030e:	4b02      	ldr	r3, [pc, #8]	; (400318 <USB_DEVICE_INSTANCE_init+0x10>)
  400310:	4798      	blx	r3
  400312:	bd08      	pop	{r3, pc}
  400314:	004002ed 	.word	0x004002ed
  400318:	0040074d 	.word	0x0040074d

0040031c <system_init>:
}

void system_init(void)
{
  40031c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40031e:	4b19      	ldr	r3, [pc, #100]	; (400384 <system_init+0x68>)
  400320:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400322:	4b19      	ldr	r3, [pc, #100]	; (400388 <system_init+0x6c>)
  400324:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400326:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40032a:	d103      	bne.n	400334 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40032c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400330:	4b15      	ldr	r3, [pc, #84]	; (400388 <system_init+0x6c>)
  400332:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400334:	4b14      	ldr	r3, [pc, #80]	; (400388 <system_init+0x6c>)
  400336:	699b      	ldr	r3, [r3, #24]
  400338:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40033c:	d103      	bne.n	400346 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40033e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400342:	4b11      	ldr	r3, [pc, #68]	; (400388 <system_init+0x6c>)
  400344:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400346:	4a11      	ldr	r2, [pc, #68]	; (40038c <system_init+0x70>)
  400348:	6853      	ldr	r3, [r2, #4]
  40034a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40034e:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_OER = mask;
  400350:	4b0f      	ldr	r3, [pc, #60]	; (400390 <system_init+0x74>)
  400352:	f44f 7280 	mov.w	r2, #256	; 0x100
  400356:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400358:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_PER = mask;
  40035a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_OER = mask;
  40035c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400360:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400362:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_PER = mask;
  400364:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_OER = mask;
  400366:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40036a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40036e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400370:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_PER = mask;
  400372:	601a      	str	r2, [r3, #0]
	                   // <true"> High
	                   true);

	gpio_set_pin_function(PIN_SPI_CTRL_CS, GPIO_PIN_FUNCTION_OFF);

	CTRL_SPI_init();
  400374:	4b07      	ldr	r3, [pc, #28]	; (400394 <system_init+0x78>)
  400376:	4798      	blx	r3

	delay_driver_init();
  400378:	4b07      	ldr	r3, [pc, #28]	; (400398 <system_init+0x7c>)
  40037a:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <system_init+0x80>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	00400b09 	.word	0x00400b09
  400388:	400e0600 	.word	0x400e0600
  40038c:	400e1850 	.word	0x400e1850
  400390:	400e1200 	.word	0x400e1200
  400394:	004002b1 	.word	0x004002b1
  400398:	004002d9 	.word	0x004002d9
  40039c:	00400309 	.word	0x00400309

004003a0 <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003a0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4003a4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4003a6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003a8:	f3bf 8f5f 	dmb	sy
  4003ac:	4770      	bx	lr

004003ae <atomic_leave_critical>:
  4003ae:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4003b2:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4003b4:	f383 8810 	msr	PRIMASK, r3
  4003b8:	4770      	bx	lr
	...

004003bc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4003bc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4003be:	4b02      	ldr	r3, [pc, #8]	; (4003c8 <delay_init+0xc>)
  4003c0:	6018      	str	r0, [r3, #0]
  4003c2:	4b02      	ldr	r3, [pc, #8]	; (4003cc <delay_init+0x10>)
  4003c4:	4798      	blx	r3
  4003c6:	bd08      	pop	{r3, pc}
  4003c8:	20400090 	.word	0x20400090
  4003cc:	00400d7d 	.word	0x00400d7d

004003d0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4003d0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4003d2:	4b04      	ldr	r3, [pc, #16]	; (4003e4 <delay_ms+0x14>)
  4003d4:	681c      	ldr	r4, [r3, #0]
  4003d6:	4b04      	ldr	r3, [pc, #16]	; (4003e8 <delay_ms+0x18>)
  4003d8:	4798      	blx	r3
  4003da:	4601      	mov	r1, r0
  4003dc:	4620      	mov	r0, r4
  4003de:	4b03      	ldr	r3, [pc, #12]	; (4003ec <delay_ms+0x1c>)
  4003e0:	4798      	blx	r3
  4003e2:	bd10      	pop	{r4, pc}
  4003e4:	20400090 	.word	0x20400090
  4003e8:	00400afd 	.word	0x00400afd
  4003ec:	00400d91 	.word	0x00400d91

004003f0 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  4003f0:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;

	ASSERT(spi && hw);
  4003f2:	4604      	mov	r4, r0
  4003f4:	460d      	mov	r5, r1
  4003f6:	2800      	cmp	r0, #0
  4003f8:	bf18      	it	ne
  4003fa:	2900      	cmpne	r1, #0
  4003fc:	bf14      	ite	ne
  4003fe:	2001      	movne	r0, #1
  400400:	2000      	moveq	r0, #0
  400402:	2242      	movs	r2, #66	; 0x42
  400404:	4909      	ldr	r1, [pc, #36]	; (40042c <spi_m_sync_init+0x3c>)
  400406:	4b0a      	ldr	r3, [pc, #40]	; (400430 <spi_m_sync_init+0x40>)
  400408:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
  40040a:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
  40040c:	4629      	mov	r1, r5
  40040e:	4620      	mov	r0, r4
  400410:	4b08      	ldr	r3, [pc, #32]	; (400434 <spi_m_sync_init+0x44>)
  400412:	4798      	blx	r3
	if (rc < 0) {
  400414:	2800      	cmp	r0, #0
  400416:	db07      	blt.n	400428 <spi_m_sync_init+0x38>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40041c:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
  40041e:	4b06      	ldr	r3, [pc, #24]	; (400438 <spi_m_sync_init+0x48>)
  400420:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <spi_m_sync_init+0x4c>)
  400424:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
  400426:	2000      	movs	r0, #0
}
  400428:	bd38      	pop	{r3, r4, r5, pc}
  40042a:	bf00      	nop
  40042c:	004026e0 	.word	0x004026e0
  400430:	00400a95 	.word	0x00400a95
  400434:	00400c0d 	.word	0x00400c0d
  400438:	004004bd 	.word	0x004004bd
  40043c:	00400481 	.word	0x00400481

00400440 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400440:	b530      	push	{r4, r5, lr}
  400442:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400444:	4605      	mov	r5, r0
  400446:	460c      	mov	r4, r1
  400448:	2800      	cmp	r0, #0
  40044a:	bf18      	it	ne
  40044c:	2900      	cmpne	r1, #0
  40044e:	bf14      	ite	ne
  400450:	2001      	movne	r0, #1
  400452:	2000      	moveq	r0, #0
  400454:	22bd      	movs	r2, #189	; 0xbd
  400456:	4907      	ldr	r1, [pc, #28]	; (400474 <spi_m_sync_transfer+0x34>)
  400458:	4b07      	ldr	r3, [pc, #28]	; (400478 <spi_m_sync_transfer+0x38>)
  40045a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  40045c:	6823      	ldr	r3, [r4, #0]
  40045e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400460:	6863      	ldr	r3, [r4, #4]
  400462:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400464:	68a3      	ldr	r3, [r4, #8]
  400466:	9303      	str	r3, [sp, #12]

	return _spi_m_sync_trans(&spi->dev, &msg);
  400468:	a901      	add	r1, sp, #4
  40046a:	4628      	mov	r0, r5
  40046c:	4b03      	ldr	r3, [pc, #12]	; (40047c <spi_m_sync_transfer+0x3c>)
  40046e:	4798      	blx	r3
}
  400470:	b005      	add	sp, #20
  400472:	bd30      	pop	{r4, r5, pc}
  400474:	004026e0 	.word	0x004026e0
  400478:	00400a95 	.word	0x00400a95
  40047c:	00400c95 	.word	0x00400c95

00400480 <_spi_m_sync_io_write>:
{
  400480:	b570      	push	{r4, r5, r6, lr}
  400482:	b084      	sub	sp, #16
  400484:	460e      	mov	r6, r1
  400486:	4615      	mov	r5, r2
	ASSERT(io);
  400488:	4604      	mov	r4, r0
  40048a:	22ad      	movs	r2, #173	; 0xad
  40048c:	4908      	ldr	r1, [pc, #32]	; (4004b0 <_spi_m_sync_io_write+0x30>)
  40048e:	3000      	adds	r0, #0
  400490:	bf18      	it	ne
  400492:	2001      	movne	r0, #1
  400494:	4b07      	ldr	r3, [pc, #28]	; (4004b4 <_spi_m_sync_io_write+0x34>)
  400496:	4798      	blx	r3
	xfer.rxbuf = 0;
  400498:	2300      	movs	r3, #0
  40049a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  40049c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  40049e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4004a0:	a901      	add	r1, sp, #4
  4004a2:	f1a4 0008 	sub.w	r0, r4, #8
  4004a6:	4b04      	ldr	r3, [pc, #16]	; (4004b8 <_spi_m_sync_io_write+0x38>)
  4004a8:	4798      	blx	r3
}
  4004aa:	b004      	add	sp, #16
  4004ac:	bd70      	pop	{r4, r5, r6, pc}
  4004ae:	bf00      	nop
  4004b0:	004026e0 	.word	0x004026e0
  4004b4:	00400a95 	.word	0x00400a95
  4004b8:	00400441 	.word	0x00400441

004004bc <_spi_m_sync_io_read>:
{
  4004bc:	b570      	push	{r4, r5, r6, lr}
  4004be:	b084      	sub	sp, #16
  4004c0:	460e      	mov	r6, r1
  4004c2:	4615      	mov	r5, r2
	ASSERT(io);
  4004c4:	4604      	mov	r4, r0
  4004c6:	2291      	movs	r2, #145	; 0x91
  4004c8:	4908      	ldr	r1, [pc, #32]	; (4004ec <_spi_m_sync_io_read+0x30>)
  4004ca:	3000      	adds	r0, #0
  4004cc:	bf18      	it	ne
  4004ce:	2001      	movne	r0, #1
  4004d0:	4b07      	ldr	r3, [pc, #28]	; (4004f0 <_spi_m_sync_io_read+0x34>)
  4004d2:	4798      	blx	r3
	xfer.rxbuf = buf;
  4004d4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  4004d6:	2300      	movs	r3, #0
  4004d8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  4004da:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4004dc:	a901      	add	r1, sp, #4
  4004de:	f1a4 0008 	sub.w	r0, r4, #8
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <_spi_m_sync_io_read+0x38>)
  4004e4:	4798      	blx	r3
}
  4004e6:	b004      	add	sp, #16
  4004e8:	bd70      	pop	{r4, r5, r6, pc}
  4004ea:	bf00      	nop
  4004ec:	004026e0 	.word	0x004026e0
  4004f0:	00400a95 	.word	0x00400a95
  4004f4:	00400441 	.word	0x00400441

004004f8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <_usb_d_find_ep+0x40>)
  4004fa:	7859      	ldrb	r1, [r3, #1]
  4004fc:	4288      	cmp	r0, r1
  4004fe:	d018      	beq.n	400532 <_usb_d_find_ep+0x3a>
{
  400500:	b430      	push	{r4, r5}
  400502:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  400504:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  400506:	f000 050f 	and.w	r5, r0, #15
  40050a:	e007      	b.n	40051c <_usb_d_find_ep+0x24>
  40050c:	3301      	adds	r3, #1
  40050e:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  400510:	2b04      	cmp	r3, #4
  400512:	d009      	beq.n	400528 <_usb_d_find_ep+0x30>
  400514:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  400516:	7851      	ldrb	r1, [r2, #1]
  400518:	4281      	cmp	r1, r0
  40051a:	d007      	beq.n	40052c <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  40051c:	7814      	ldrb	r4, [r2, #0]
  40051e:	2c00      	cmp	r4, #0
  400520:	d1f4      	bne.n	40050c <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  400522:	428d      	cmp	r5, r1
  400524:	d1f2      	bne.n	40050c <_usb_d_find_ep+0x14>
  400526:	e001      	b.n	40052c <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
  400528:	f04f 33ff 	mov.w	r3, #4294967295
}
  40052c:	4618      	mov	r0, r3
  40052e:	bc30      	pop	{r4, r5}
  400530:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  400532:	2300      	movs	r3, #0
}
  400534:	4618      	mov	r0, r3
  400536:	4770      	bx	lr
  400538:	20400094 	.word	0x20400094

0040053c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
  40053c:	2000      	movs	r0, #0
  40053e:	4770      	bx	lr

00400540 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  400540:	b538      	push	{r3, r4, r5, lr}
  400542:	4604      	mov	r4, r0
  400544:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
  400546:	4b09      	ldr	r3, [pc, #36]	; (40056c <usb_d_cb_trans_more+0x2c>)
  400548:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  40054a:	4b09      	ldr	r3, [pc, #36]	; (400570 <usb_d_cb_trans_more+0x30>)
  40054c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  400550:	789b      	ldrb	r3, [r3, #2]
  400552:	2b03      	cmp	r3, #3
  400554:	d001      	beq.n	40055a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
  400556:	2000      	movs	r0, #0
}
  400558:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
  40055a:	4b05      	ldr	r3, [pc, #20]	; (400570 <usb_d_cb_trans_more+0x30>)
  40055c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  400560:	6983      	ldr	r3, [r0, #24]
  400562:	4629      	mov	r1, r5
  400564:	4620      	mov	r0, r4
  400566:	4798      	blx	r3
  400568:	bd38      	pop	{r3, r4, r5, pc}
  40056a:	bf00      	nop
  40056c:	004004f9 	.word	0x004004f9
  400570:	20400094 	.word	0x20400094

00400574 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  400574:	b5f0      	push	{r4, r5, r6, r7, lr}
  400576:	b085      	sub	sp, #20
  400578:	4606      	mov	r6, r0
  40057a:	460d      	mov	r5, r1
  40057c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
  40057e:	4b4d      	ldr	r3, [pc, #308]	; (4006b4 <_usb_d_cb_trans_done+0x140>)
  400580:	4798      	blx	r3
  400582:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
  400584:	2d00      	cmp	r5, #0
  400586:	d15b      	bne.n	400640 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
  400588:	4a4b      	ldr	r2, [pc, #300]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  40058a:	0143      	lsls	r3, r0, #5
  40058c:	18d1      	adds	r1, r2, r3
  40058e:	2000      	movs	r0, #0
  400590:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  400592:	5cd3      	ldrb	r3, [r2, r3]
  400594:	b173      	cbz	r3, 4005b4 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  400596:	4b48      	ldr	r3, [pc, #288]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  400598:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  40059c:	2201      	movs	r2, #1
  40059e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  4005a0:	4845      	ldr	r0, [pc, #276]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  4005a2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  4005a6:	69c3      	ldr	r3, [r0, #28]
  4005a8:	463a      	mov	r2, r7
  4005aa:	78c1      	ldrb	r1, [r0, #3]
  4005ac:	4630      	mov	r0, r6
  4005ae:	4798      	blx	r3
}
  4005b0:	b005      	add	sp, #20
  4005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
  4005b4:	788b      	ldrb	r3, [r1, #2]
  4005b6:	2b03      	cmp	r3, #3
  4005b8:	d00b      	beq.n	4005d2 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  4005ba:	483f      	ldr	r0, [pc, #252]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  4005bc:	eb00 1244 	add.w	r2, r0, r4, lsl #5
  4005c0:	4614      	mov	r4, r2
  4005c2:	69d3      	ldr	r3, [r2, #28]
  4005c4:	320c      	adds	r2, #12
  4005c6:	2100      	movs	r1, #0
  4005c8:	7860      	ldrb	r0, [r4, #1]
  4005ca:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4005cc:	2302      	movs	r3, #2
  4005ce:	70a3      	strb	r3, [r4, #2]
  4005d0:	e7ee      	b.n	4005b0 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  4005d2:	460b      	mov	r3, r1
  4005d4:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  4005d8:	460a      	mov	r2, r1
  4005da:	69ce      	ldr	r6, [r1, #28]
  4005dc:	320c      	adds	r2, #12
  4005de:	2101      	movs	r1, #1
  4005e0:	7858      	ldrb	r0, [r3, #1]
  4005e2:	47b0      	blx	r6
		if (err) {
  4005e4:	b1a0      	cbz	r0, 400610 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  4005e6:	4b34      	ldr	r3, [pc, #208]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  4005e8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  4005ec:	2205      	movs	r2, #5
  4005ee:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  4005f0:	2202      	movs	r2, #2
  4005f2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  4005f4:	2d00      	cmp	r5, #0
  4005f6:	db09      	blt.n	40060c <_usb_d_cb_trans_done+0x98>
  4005f8:	482f      	ldr	r0, [pc, #188]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  4005fa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  4005fe:	7840      	ldrb	r0, [r0, #1]
  400600:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  400604:	2101      	movs	r1, #1
  400606:	4b2d      	ldr	r3, [pc, #180]	; (4006bc <_usb_d_cb_trans_done+0x148>)
  400608:	4798      	blx	r3
  40060a:	e7d1      	b.n	4005b0 <_usb_d_cb_trans_done+0x3c>
  40060c:	7858      	ldrb	r0, [r3, #1]
  40060e:	e7f9      	b.n	400604 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  400610:	4829      	ldr	r0, [pc, #164]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  400612:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  400616:	2304      	movs	r3, #4
  400618:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  40061a:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
  40061c:	2200      	movs	r2, #0
  40061e:	9201      	str	r2, [sp, #4]
  400620:	9202      	str	r2, [sp, #8]
  400622:	4295      	cmp	r5, r2
  400624:	bfac      	ite	ge
  400626:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
  40062a:	f003 030f 	andlt.w	r3, r3, #15
  40062e:	f88d 300c 	strb.w	r3, [sp, #12]
  400632:	2301      	movs	r3, #1
  400634:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
  400638:	a801      	add	r0, sp, #4
  40063a:	4b21      	ldr	r3, [pc, #132]	; (4006c0 <_usb_d_cb_trans_done+0x14c>)
  40063c:	4798      	blx	r3
  40063e:	e7b7      	b.n	4005b0 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
  400640:	2d01      	cmp	r5, #1
  400642:	d00a      	beq.n	40065a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
  400644:	2d02      	cmp	r5, #2
  400646:	d01c      	beq.n	400682 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
  400648:	2d03      	cmp	r5, #3
  40064a:	d02a      	beq.n	4006a2 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  40064c:	4b1a      	ldr	r3, [pc, #104]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  40064e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  400652:	2206      	movs	r2, #6
  400654:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  400656:	70da      	strb	r2, [r3, #3]
  400658:	e7a2      	b.n	4005a0 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
  40065a:	4a17      	ldr	r2, [pc, #92]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  40065c:	0143      	lsls	r3, r0, #5
  40065e:	18d1      	adds	r1, r2, r3
  400660:	2002      	movs	r0, #2
  400662:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  400664:	5cd3      	ldrb	r3, [r2, r3]
  400666:	b12b      	cbz	r3, 400674 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  400668:	4b13      	ldr	r3, [pc, #76]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  40066a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  40066e:	2205      	movs	r2, #5
  400670:	709a      	strb	r2, [r3, #2]
  400672:	e795      	b.n	4005a0 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  400674:	460b      	mov	r3, r1
  400676:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  400678:	2100      	movs	r1, #0
  40067a:	4630      	mov	r0, r6
  40067c:	4b0f      	ldr	r3, [pc, #60]	; (4006bc <_usb_d_cb_trans_done+0x148>)
  40067e:	4798      	blx	r3
  400680:	e78e      	b.n	4005a0 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  400682:	4a0d      	ldr	r2, [pc, #52]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  400684:	0143      	lsls	r3, r0, #5
  400686:	18d1      	adds	r1, r2, r3
  400688:	2004      	movs	r0, #4
  40068a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  40068c:	5cd3      	ldrb	r3, [r2, r3]
  40068e:	b12b      	cbz	r3, 40069c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  400690:	4b09      	ldr	r3, [pc, #36]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  400692:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  400696:	2201      	movs	r2, #1
  400698:	709a      	strb	r2, [r3, #2]
  40069a:	e781      	b.n	4005a0 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  40069c:	2302      	movs	r3, #2
  40069e:	708b      	strb	r3, [r1, #2]
			return;
  4006a0:	e786      	b.n	4005b0 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  4006a2:	4b05      	ldr	r3, [pc, #20]	; (4006b8 <_usb_d_cb_trans_done+0x144>)
  4006a4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  4006a8:	2200      	movs	r2, #0
  4006aa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  4006ac:	2205      	movs	r2, #5
  4006ae:	70da      	strb	r2, [r3, #3]
  4006b0:	e776      	b.n	4005a0 <_usb_d_cb_trans_done+0x2c>
  4006b2:	bf00      	nop
  4006b4:	004004f9 	.word	0x004004f9
  4006b8:	20400094 	.word	0x20400094
  4006bc:	00401859 	.word	0x00401859
  4006c0:	00401a15 	.word	0x00401a15

004006c4 <usb_d_cb_trans_setup>:
{
  4006c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4006c8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
  4006ca:	4b1c      	ldr	r3, [pc, #112]	; (40073c <usb_d_cb_trans_setup+0x78>)
  4006cc:	4798      	blx	r3
  4006ce:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
  4006d0:	4c1b      	ldr	r4, [pc, #108]	; (400740 <usb_d_cb_trans_setup+0x7c>)
  4006d2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
  4006d6:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  4006d8:	4621      	mov	r1, r4
  4006da:	4628      	mov	r0, r5
  4006dc:	4b19      	ldr	r3, [pc, #100]	; (400744 <usb_d_cb_trans_setup+0x80>)
  4006de:	4798      	blx	r3
	if (n != 8) {
  4006e0:	b2c0      	uxtb	r0, r0
  4006e2:	2808      	cmp	r0, #8
  4006e4:	d009      	beq.n	4006fa <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  4006e6:	2101      	movs	r1, #1
  4006e8:	4628      	mov	r0, r5
  4006ea:	4c17      	ldr	r4, [pc, #92]	; (400748 <usb_d_cb_trans_setup+0x84>)
  4006ec:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  4006ee:	2101      	movs	r1, #1
  4006f0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
  4006f4:	47a0      	blx	r4
		return;
  4006f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  4006fa:	2100      	movs	r1, #0
  4006fc:	4628      	mov	r0, r5
  4006fe:	4f12      	ldr	r7, [pc, #72]	; (400748 <usb_d_cb_trans_setup+0x84>)
  400700:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  400702:	f045 0880 	orr.w	r8, r5, #128	; 0x80
  400706:	2100      	movs	r1, #0
  400708:	4640      	mov	r0, r8
  40070a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  40070c:	4b0c      	ldr	r3, [pc, #48]	; (400740 <usb_d_cb_trans_setup+0x7c>)
  40070e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  400712:	2201      	movs	r2, #1
  400714:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  400716:	695b      	ldr	r3, [r3, #20]
  400718:	4621      	mov	r1, r4
  40071a:	4628      	mov	r0, r5
  40071c:	4798      	blx	r3
  40071e:	b108      	cbz	r0, 400724 <usb_d_cb_trans_setup+0x60>
  400720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  400724:	4b06      	ldr	r3, [pc, #24]	; (400740 <usb_d_cb_trans_setup+0x7c>)
  400726:	eb03 1646 	add.w	r6, r3, r6, lsl #5
  40072a:	2305      	movs	r3, #5
  40072c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  40072e:	2101      	movs	r1, #1
  400730:	4628      	mov	r0, r5
  400732:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  400734:	2101      	movs	r1, #1
  400736:	4640      	mov	r0, r8
  400738:	47b8      	blx	r7
  40073a:	e7f1      	b.n	400720 <usb_d_cb_trans_setup+0x5c>
  40073c:	004004f9 	.word	0x004004f9
  400740:	20400094 	.word	0x20400094
  400744:	004019b1 	.word	0x004019b1
  400748:	00401859 	.word	0x00401859

0040074c <usb_d_init>:

int32_t usb_d_init(void)
{
  40074c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
  40074e:	4b11      	ldr	r3, [pc, #68]	; (400794 <usb_d_init+0x48>)
  400750:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
  400752:	2800      	cmp	r0, #0
  400754:	db1c      	blt.n	400790 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  400756:	4c10      	ldr	r4, [pc, #64]	; (400798 <usb_d_init+0x4c>)
  400758:	2280      	movs	r2, #128	; 0x80
  40075a:	2100      	movs	r1, #0
  40075c:	4620      	mov	r0, r4
  40075e:	4b0f      	ldr	r3, [pc, #60]	; (40079c <usb_d_init+0x50>)
  400760:	4798      	blx	r3
  400762:	4623      	mov	r3, r4
  400764:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  400768:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  40076a:	4a0d      	ldr	r2, [pc, #52]	; (4007a0 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  40076c:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  40076e:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  400770:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  400772:	61da      	str	r2, [r3, #28]
  400774:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  400776:	4283      	cmp	r3, r0
  400778:	d1f8      	bne.n	40076c <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  40077a:	490a      	ldr	r1, [pc, #40]	; (4007a4 <usb_d_init+0x58>)
  40077c:	2000      	movs	r0, #0
  40077e:	4c0a      	ldr	r4, [pc, #40]	; (4007a8 <usb_d_init+0x5c>)
  400780:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  400782:	490a      	ldr	r1, [pc, #40]	; (4007ac <usb_d_init+0x60>)
  400784:	2001      	movs	r0, #1
  400786:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  400788:	4909      	ldr	r1, [pc, #36]	; (4007b0 <usb_d_init+0x64>)
  40078a:	2002      	movs	r0, #2
  40078c:	47a0      	blx	r4
	return ERR_NONE;
  40078e:	2000      	movs	r0, #0
}
  400790:	bd10      	pop	{r4, pc}
  400792:	bf00      	nop
  400794:	00401409 	.word	0x00401409
  400798:	20400094 	.word	0x20400094
  40079c:	004026bf 	.word	0x004026bf
  4007a0:	0040053d 	.word	0x0040053d
  4007a4:	004006c5 	.word	0x004006c5
  4007a8:	00401b89 	.word	0x00401b89
  4007ac:	00400541 	.word	0x00400541
  4007b0:	00400575 	.word	0x00400575

004007b4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
  4007b4:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
  4007b6:	4b01      	ldr	r3, [pc, #4]	; (4007bc <usb_d_register_callback+0x8>)
  4007b8:	4798      	blx	r3
  4007ba:	bd08      	pop	{r3, pc}
  4007bc:	00401b65 	.word	0x00401b65

004007c0 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
  4007c0:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
  4007c2:	4b01      	ldr	r3, [pc, #4]	; (4007c8 <usb_d_enable+0x8>)
  4007c4:	4798      	blx	r3
}
  4007c6:	bd08      	pop	{r3, pc}
  4007c8:	00401459 	.word	0x00401459

004007cc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
  4007cc:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
  4007ce:	4b01      	ldr	r3, [pc, #4]	; (4007d4 <usb_d_attach+0x8>)
  4007d0:	4798      	blx	r3
  4007d2:	bd08      	pop	{r3, pc}
  4007d4:	004014a5 	.word	0x004014a5

004007d8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
  4007d8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
  4007da:	4b01      	ldr	r3, [pc, #4]	; (4007e0 <usb_d_set_address+0x8>)
  4007dc:	4798      	blx	r3
  4007de:	bd08      	pop	{r3, pc}
  4007e0:	004014b5 	.word	0x004014b5

004007e4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
  4007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007e6:	4606      	mov	r6, r0
  4007e8:	460c      	mov	r4, r1
  4007ea:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
  4007ec:	4b0f      	ldr	r3, [pc, #60]	; (40082c <usb_d_ep_init+0x48>)
  4007ee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
  4007f0:	2800      	cmp	r0, #0
  4007f2:	da14      	bge.n	40081e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
  4007f4:	20ff      	movs	r0, #255	; 0xff
  4007f6:	4b0d      	ldr	r3, [pc, #52]	; (40082c <usb_d_ep_init+0x48>)
  4007f8:	4798      	blx	r3
		if (ep_index < 0) {
  4007fa:	1e05      	subs	r5, r0, #0
  4007fc:	db12      	blt.n	400824 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
  4007fe:	463a      	mov	r2, r7
  400800:	4621      	mov	r1, r4
  400802:	4630      	mov	r0, r6
  400804:	4b0a      	ldr	r3, [pc, #40]	; (400830 <usb_d_ep_init+0x4c>)
  400806:	4798      	blx	r3
	if (rc < 0) {
  400808:	2800      	cmp	r0, #0
  40080a:	db0d      	blt.n	400828 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
  40080c:	4b09      	ldr	r3, [pc, #36]	; (400834 <usb_d_ep_init+0x50>)
  40080e:	0168      	lsls	r0, r5, #5
  400810:	181a      	adds	r2, r3, r0
  400812:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
  400814:	f004 0403 	and.w	r4, r4, #3
  400818:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
  40081a:	2000      	movs	r0, #0
  40081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
  40081e:	f06f 0013 	mvn.w	r0, #19
  400822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
  400824:	f06f 0014 	mvn.w	r0, #20
}
  400828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40082a:	bf00      	nop
  40082c:	004004f9 	.word	0x004004f9
  400830:	004014d5 	.word	0x004014d5
  400834:	20400094 	.word	0x20400094

00400838 <usb_d_ep0_init>:
{
  400838:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
  40083a:	4602      	mov	r2, r0
  40083c:	2100      	movs	r1, #0
  40083e:	4608      	mov	r0, r1
  400840:	4b01      	ldr	r3, [pc, #4]	; (400848 <usb_d_ep0_init+0x10>)
  400842:	4798      	blx	r3
}
  400844:	bd08      	pop	{r3, pc}
  400846:	bf00      	nop
  400848:	004007e5 	.word	0x004007e5

0040084c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
  40084c:	b538      	push	{r3, r4, r5, lr}
  40084e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
  400850:	4b06      	ldr	r3, [pc, #24]	; (40086c <usb_d_ep_deinit+0x20>)
  400852:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
  400854:	1e04      	subs	r4, r0, #0
  400856:	db07      	blt.n	400868 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
  400858:	4628      	mov	r0, r5
  40085a:	4b05      	ldr	r3, [pc, #20]	; (400870 <usb_d_ep_deinit+0x24>)
  40085c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
  40085e:	4805      	ldr	r0, [pc, #20]	; (400874 <usb_d_ep_deinit+0x28>)
  400860:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  400864:	23ff      	movs	r3, #255	; 0xff
  400866:	7043      	strb	r3, [r0, #1]
  400868:	bd38      	pop	{r3, r4, r5, pc}
  40086a:	bf00      	nop
  40086c:	004004f9 	.word	0x004004f9
  400870:	0040160d 	.word	0x0040160d
  400874:	20400094 	.word	0x20400094

00400878 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
  400878:	b538      	push	{r3, r4, r5, lr}
  40087a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
  40087c:	4b0e      	ldr	r3, [pc, #56]	; (4008b8 <usb_d_ep_enable+0x40>)
  40087e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
  400880:	1e04      	subs	r4, r0, #0
  400882:	db16      	blt.n	4008b2 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
  400884:	0163      	lsls	r3, r4, #5
  400886:	4a0d      	ldr	r2, [pc, #52]	; (4008bc <usb_d_ep_enable+0x44>)
  400888:	5cd3      	ldrb	r3, [r2, r3]
  40088a:	2b00      	cmp	r3, #0
  40088c:	bf0c      	ite	eq
  40088e:	2202      	moveq	r2, #2
  400890:	2201      	movne	r2, #1
  400892:	4b0a      	ldr	r3, [pc, #40]	; (4008bc <usb_d_ep_enable+0x44>)
  400894:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  400898:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
  40089a:	4628      	mov	r0, r5
  40089c:	4b08      	ldr	r3, [pc, #32]	; (4008c0 <usb_d_ep_enable+0x48>)
  40089e:	4798      	blx	r3
	if (rc < 0) {
  4008a0:	2800      	cmp	r0, #0
  4008a2:	db00      	blt.n	4008a6 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
  4008a4:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
  4008a6:	4b05      	ldr	r3, [pc, #20]	; (4008bc <usb_d_ep_enable+0x44>)
  4008a8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  4008ac:	2300      	movs	r3, #0
  4008ae:	70a3      	strb	r3, [r4, #2]
  4008b0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
  4008b2:	f06f 0011 	mvn.w	r0, #17
  4008b6:	e7f5      	b.n	4008a4 <usb_d_ep_enable+0x2c>
  4008b8:	004004f9 	.word	0x004004f9
  4008bc:	20400094 	.word	0x20400094
  4008c0:	00401669 	.word	0x00401669

004008c4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
  4008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008c8:	b086      	sub	sp, #24
  4008ca:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
  4008cc:	7a07      	ldrb	r7, [r0, #8]
  4008ce:	4638      	mov	r0, r7
  4008d0:	4b3f      	ldr	r3, [pc, #252]	; (4009d0 <usb_d_ep_transfer+0x10c>)
  4008d2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
  4008d4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
  4008d6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
  4008da:	1e06      	subs	r6, r0, #0
  4008dc:	db72      	blt.n	4009c4 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
  4008de:	a804      	add	r0, sp, #16
  4008e0:	4b3c      	ldr	r3, [pc, #240]	; (4009d4 <usb_d_ep_transfer+0x110>)
  4008e2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
  4008e4:	4b3c      	ldr	r3, [pc, #240]	; (4009d8 <usb_d_ep_transfer+0x114>)
  4008e6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  4008ea:	789b      	ldrb	r3, [r3, #2]
  4008ec:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
  4008f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
  4008f4:	b2db      	uxtb	r3, r3
  4008f6:	2b01      	cmp	r3, #1
  4008f8:	d011      	beq.n	40091e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
  4008fa:	a804      	add	r0, sp, #16
  4008fc:	4b37      	ldr	r3, [pc, #220]	; (4009dc <usb_d_ep_transfer+0x118>)
  4008fe:	4798      	blx	r3
		switch (state) {
  400900:	f89d 3017 	ldrb.w	r3, [sp, #23]
  400904:	b2db      	uxtb	r3, r3
  400906:	2b05      	cmp	r3, #5
  400908:	d05f      	beq.n	4009ca <usb_d_ep_transfer+0x106>
  40090a:	2b06      	cmp	r3, #6
  40090c:	d023      	beq.n	400956 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
  40090e:	2b00      	cmp	r3, #0
  400910:	bf0c      	ite	eq
  400912:	f06f 0012 	mvneq.w	r0, #18
  400916:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
  400918:	b006      	add	sp, #24
  40091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
  40091e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 4009d8 <usb_d_ep_transfer+0x114>
  400922:	ea4f 1946 	mov.w	r9, r6, lsl #5
  400926:	eb0a 0309 	add.w	r3, sl, r9
  40092a:	2203      	movs	r2, #3
  40092c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
  40092e:	a804      	add	r0, sp, #16
  400930:	4b2a      	ldr	r3, [pc, #168]	; (4009dc <usb_d_ep_transfer+0x118>)
  400932:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  400934:	f81a 3009 	ldrb.w	r3, [sl, r9]
  400938:	b183      	cbz	r3, 40095c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
  40093a:	7a22      	ldrb	r2, [r4, #8]
  40093c:	3500      	adds	r5, #0
  40093e:	bf18      	it	ne
  400940:	2501      	movne	r5, #1
	struct usb_d_transfer trans
  400942:	6823      	ldr	r3, [r4, #0]
  400944:	9301      	str	r3, [sp, #4]
  400946:	f8cd 8008 	str.w	r8, [sp, #8]
  40094a:	f017 0f80 	tst.w	r7, #128	; 0x80
  40094e:	d119      	bne.n	400984 <usb_d_ep_transfer+0xc0>
  400950:	f002 030f 	and.w	r3, r2, #15
  400954:	e018      	b.n	400988 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
  400956:	f06f 000f 	mvn.w	r0, #15
  40095a:	e7dd      	b.n	400918 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
  40095c:	4b1e      	ldr	r3, [pc, #120]	; (4009d8 <usb_d_ep_transfer+0x114>)
  40095e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  400962:	7cda      	ldrb	r2, [r3, #19]
  400964:	7c9d      	ldrb	r5, [r3, #18]
  400966:	eb05 2502 	add.w	r5, r5, r2, lsl #8
  40096a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
  40096c:	b9a5      	cbnz	r5, 400998 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  40096e:	4b1a      	ldr	r3, [pc, #104]	; (4009d8 <usb_d_ep_transfer+0x114>)
  400970:	eb03 1646 	add.w	r6, r3, r6, lsl #5
  400974:	2304      	movs	r3, #4
  400976:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
  400978:	2300      	movs	r3, #0
			zlp                 = true;
  40097a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
  40097c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
  40097e:	6821      	ldr	r1, [r4, #0]
  400980:	9101      	str	r1, [sp, #4]
  400982:	9302      	str	r3, [sp, #8]
  400984:	f042 0380 	orr.w	r3, r2, #128	; 0x80
  400988:	f88d 300c 	strb.w	r3, [sp, #12]
  40098c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
  400990:	a801      	add	r0, sp, #4
  400992:	4b13      	ldr	r3, [pc, #76]	; (4009e0 <usb_d_ep_transfer+0x11c>)
  400994:	4798      	blx	r3
	return rc;
  400996:	e7bf      	b.n	400918 <usb_d_ep_transfer+0x54>
  400998:	4643      	mov	r3, r8
  40099a:	45a8      	cmp	r8, r5
  40099c:	bf28      	it	cs
  40099e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
  4009a0:	4a0d      	ldr	r2, [pc, #52]	; (4009d8 <usb_d_ep_transfer+0x114>)
  4009a2:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
  4009a6:	f996 200c 	ldrsb.w	r2, [r6, #12]
  4009aa:	2a00      	cmp	r2, #0
  4009ac:	db05      	blt.n	4009ba <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
  4009ae:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
  4009b0:	6821      	ldr	r1, [r4, #0]
  4009b2:	9101      	str	r1, [sp, #4]
  4009b4:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
  4009b6:	2500      	movs	r5, #0
  4009b8:	e7ca      	b.n	400950 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
  4009ba:	429d      	cmp	r5, r3
  4009bc:	bf94      	ite	ls
  4009be:	2500      	movls	r5, #0
  4009c0:	2501      	movhi	r5, #1
  4009c2:	e7db      	b.n	40097c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
  4009c4:	f06f 0011 	mvn.w	r0, #17
  4009c8:	e7a6      	b.n	400918 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
  4009ca:	2002      	movs	r0, #2
  4009cc:	e7a4      	b.n	400918 <usb_d_ep_transfer+0x54>
  4009ce:	bf00      	nop
  4009d0:	004004f9 	.word	0x004004f9
  4009d4:	004003a1 	.word	0x004003a1
  4009d8:	20400094 	.word	0x20400094
  4009dc:	004003af 	.word	0x004003af
  4009e0:	00401a15 	.word	0x00401a15

004009e4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
  4009e4:	b538      	push	{r3, r4, r5, lr}
  4009e6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
  4009e8:	b131      	cbz	r1, 4009f8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
  4009ea:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  4009ec:	bf0c      	ite	eq
  4009ee:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
  4009f0:	2102      	movne	r1, #2
  4009f2:	4b12      	ldr	r3, [pc, #72]	; (400a3c <usb_d_ep_halt+0x58>)
  4009f4:	4798      	blx	r3
  4009f6:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
  4009f8:	4b11      	ldr	r3, [pc, #68]	; (400a40 <usb_d_ep_halt+0x5c>)
  4009fa:	4798      	blx	r3
	if (ep_index < 0) {
  4009fc:	1e05      	subs	r5, r0, #0
  4009fe:	db1a      	blt.n	400a36 <usb_d_ep_halt+0x52>
	if (ept->xfer.hdr.state == USB_EP_S_HALTED) {
  400a00:	4b10      	ldr	r3, [pc, #64]	; (400a44 <usb_d_ep_halt+0x60>)
  400a02:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  400a06:	789b      	ldrb	r3, [r3, #2]
  400a08:	2b05      	cmp	r3, #5
  400a0a:	d001      	beq.n	400a10 <usb_d_ep_halt+0x2c>
	return ERR_NONE;
  400a0c:	2000      	movs	r0, #0
	}
}
  400a0e:	bd38      	pop	{r3, r4, r5, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  400a10:	2100      	movs	r1, #0
  400a12:	4620      	mov	r0, r4
  400a14:	4b09      	ldr	r3, [pc, #36]	; (400a3c <usb_d_ep_halt+0x58>)
  400a16:	4798      	blx	r3
		if (rc < 0) {
  400a18:	2800      	cmp	r0, #0
  400a1a:	dbf8      	blt.n	400a0e <usb_d_ep_halt+0x2a>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
  400a1c:	4b09      	ldr	r3, [pc, #36]	; (400a44 <usb_d_ep_halt+0x60>)
  400a1e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
  400a22:	2301      	movs	r3, #1
  400a24:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
  400a26:	2103      	movs	r1, #3
  400a28:	70e9      	strb	r1, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
  400a2a:	69eb      	ldr	r3, [r5, #28]
  400a2c:	2200      	movs	r2, #0
  400a2e:	4620      	mov	r0, r4
  400a30:	4798      	blx	r3
	return ERR_NONE;
  400a32:	2000      	movs	r0, #0
  400a34:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
  400a36:	f06f 0011 	mvn.w	r0, #17
  400a3a:	bd38      	pop	{r3, r4, r5, pc}
  400a3c:	00401859 	.word	0x00401859
  400a40:	004004f9 	.word	0x004004f9
  400a44:	20400094 	.word	0x20400094

00400a48 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
  400a48:	b538      	push	{r3, r4, r5, lr}
  400a4a:	460d      	mov	r5, r1
  400a4c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
  400a4e:	4b0e      	ldr	r3, [pc, #56]	; (400a88 <usb_d_ep_register_callback+0x40>)
  400a50:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
  400a52:	4b0e      	ldr	r3, [pc, #56]	; (400a8c <usb_d_ep_register_callback+0x44>)
  400a54:	2c00      	cmp	r4, #0
  400a56:	bf08      	it	eq
  400a58:	461c      	moveq	r4, r3
	if (ep_index < 0) {
  400a5a:	2800      	cmp	r0, #0
  400a5c:	db13      	blt.n	400a86 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
  400a5e:	2d01      	cmp	r5, #1
  400a60:	d008      	beq.n	400a74 <usb_d_ep_register_callback+0x2c>
  400a62:	b115      	cbz	r5, 400a6a <usb_d_ep_register_callback+0x22>
  400a64:	2d02      	cmp	r5, #2
  400a66:	d00a      	beq.n	400a7e <usb_d_ep_register_callback+0x36>
  400a68:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
  400a6a:	4b09      	ldr	r3, [pc, #36]	; (400a90 <usb_d_ep_register_callback+0x48>)
  400a6c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  400a70:	6144      	str	r4, [r0, #20]
		break;
  400a72:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
  400a74:	4b06      	ldr	r3, [pc, #24]	; (400a90 <usb_d_ep_register_callback+0x48>)
  400a76:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  400a7a:	6184      	str	r4, [r0, #24]
		break;
  400a7c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
  400a7e:	4b04      	ldr	r3, [pc, #16]	; (400a90 <usb_d_ep_register_callback+0x48>)
  400a80:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  400a84:	61c4      	str	r4, [r0, #28]
  400a86:	bd38      	pop	{r3, r4, r5, pc}
  400a88:	004004f9 	.word	0x004004f9
  400a8c:	0040053d 	.word	0x0040053d
  400a90:	20400094 	.word	0x20400094

00400a94 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400a94:	b900      	cbnz	r0, 400a98 <assert+0x4>
		__asm("BKPT #0");
  400a96:	be00      	bkpt	0x0000
  400a98:	4770      	bx	lr

00400a9a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400a9a:	6803      	ldr	r3, [r0, #0]
  400a9c:	b14b      	cbz	r3, 400ab2 <is_list_element+0x18>
		if (it == element) {
  400a9e:	428b      	cmp	r3, r1
  400aa0:	d009      	beq.n	400ab6 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
  400aa2:	681b      	ldr	r3, [r3, #0]
  400aa4:	b11b      	cbz	r3, 400aae <is_list_element+0x14>
		if (it == element) {
  400aa6:	4299      	cmp	r1, r3
  400aa8:	d1fb      	bne.n	400aa2 <is_list_element+0x8>
			return true;
  400aaa:	2001      	movs	r0, #1
		}
	}

	return false;
}
  400aac:	4770      	bx	lr
	return false;
  400aae:	2000      	movs	r0, #0
  400ab0:	4770      	bx	lr
  400ab2:	2000      	movs	r0, #0
  400ab4:	4770      	bx	lr
			return true;
  400ab6:	2001      	movs	r0, #1
  400ab8:	4770      	bx	lr
	...

00400abc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
  400abc:	b570      	push	{r4, r5, r6, lr}
  400abe:	4605      	mov	r5, r0
  400ac0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
  400ac2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
  400ac4:	4b0a      	ldr	r3, [pc, #40]	; (400af0 <list_insert_at_end+0x34>)
  400ac6:	4798      	blx	r3
  400ac8:	f080 0001 	eor.w	r0, r0, #1
  400acc:	2259      	movs	r2, #89	; 0x59
  400ace:	4909      	ldr	r1, [pc, #36]	; (400af4 <list_insert_at_end+0x38>)
  400ad0:	b2c0      	uxtb	r0, r0
  400ad2:	4b09      	ldr	r3, [pc, #36]	; (400af8 <list_insert_at_end+0x3c>)
  400ad4:	4798      	blx	r3

	if (!list->head) {
  400ad6:	682b      	ldr	r3, [r5, #0]
  400ad8:	b91b      	cbnz	r3, 400ae2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
  400ada:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
  400adc:	6033      	str	r3, [r6, #0]
		return;
  400ade:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
  400ae0:	461c      	mov	r4, r3
	while (it->next) {
  400ae2:	6823      	ldr	r3, [r4, #0]
  400ae4:	2b00      	cmp	r3, #0
  400ae6:	d1fb      	bne.n	400ae0 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
  400ae8:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
  400aea:	6033      	str	r3, [r6, #0]
  400aec:	bd70      	pop	{r4, r5, r6, pc}
  400aee:	bf00      	nop
  400af0:	00400a9b 	.word	0x00400a9b
  400af4:	004026fc 	.word	0x004026fc
  400af8:	00400a95 	.word	0x00400a95

00400afc <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400afc:	4b01      	ldr	r3, [pc, #4]	; (400b04 <_get_cycles_for_ms+0x8>)
  400afe:	fb03 f000 	mul.w	r0, r3, r0
  400b02:	4770      	bx	lr
  400b04:	000493e0 	.word	0x000493e0

00400b08 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400b08:	b500      	push	{lr}
  400b0a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400b0c:	a801      	add	r0, sp, #4
  400b0e:	4b0e      	ldr	r3, [pc, #56]	; (400b48 <_init_chip+0x40>)
  400b10:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400b12:	4a0e      	ldr	r2, [pc, #56]	; (400b4c <_init_chip+0x44>)
  400b14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb");
  400b20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b24:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400b28:	a801      	add	r0, sp, #4
  400b2a:	4b09      	ldr	r3, [pc, #36]	; (400b50 <_init_chip+0x48>)
  400b2c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400b2e:	4a09      	ldr	r2, [pc, #36]	; (400b54 <_init_chip+0x4c>)
  400b30:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400b32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400b36:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
	((Efc *)hw)->EEFC_FMR = tmp;
  400b3a:	6013      	str	r3, [r2, #0]

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
#endif
	_pmc_init();
  400b3c:	4b06      	ldr	r3, [pc, #24]	; (400b58 <_init_chip+0x50>)
  400b3e:	4798      	blx	r3
}
  400b40:	b003      	add	sp, #12
  400b42:	f85d fb04 	ldr.w	pc, [sp], #4
  400b46:	bf00      	nop
  400b48:	004003a1 	.word	0x004003a1
  400b4c:	e000ed00 	.word	0xe000ed00
  400b50:	004003af 	.word	0x004003af
  400b54:	400e0c00 	.word	0x400e0c00
  400b58:	00400b5d 	.word	0x00400b5d

00400b5c <_pmc_init>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400b5c:	4926      	ldr	r1, [pc, #152]	; (400bf8 <_pmc_init+0x9c>)
  400b5e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400b60:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400b64:	4b25      	ldr	r3, [pc, #148]	; (400bfc <_pmc_init+0xa0>)
  400b66:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400b68:	620b      	str	r3, [r1, #32]
	return ((Pmc *)hw)->PMC_PMMR;
}

static inline bool hri_pmc_get_SR_MOSCXTS_bit(const void *const hw)
{
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400b6a:	460a      	mov	r2, r1
  400b6c:	6e93      	ldr	r3, [r2, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400b6e:	f013 0f01 	tst.w	r3, #1
  400b72:	d0fb      	beq.n	400b6c <_pmc_init+0x10>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400b74:	4b20      	ldr	r3, [pc, #128]	; (400bf8 <_pmc_init+0x9c>)
  400b76:	6a19      	ldr	r1, [r3, #32]
  400b78:	4a21      	ldr	r2, [pc, #132]	; (400c00 <_pmc_init+0xa4>)
  400b7a:	430a      	orrs	r2, r1
  400b7c:	621a      	str	r2, [r3, #32]
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400b7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400b80:	4a20      	ldr	r2, [pc, #128]	; (400c04 <_pmc_init+0xa8>)
  400b82:	400a      	ands	r2, r1
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400b84:	629a      	str	r2, [r3, #40]	; 0x28
	((Pmc *)hw)->CKGR_PLLAR = data;
  400b86:	4a20      	ldr	r2, [pc, #128]	; (400c08 <_pmc_init+0xac>)
  400b88:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_pmc_get_SR_LOCKA_bit(const void *const hw)
{
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400b8a:	461a      	mov	r2, r3
  400b8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400b8e:	f013 0f02 	tst.w	r3, #2
  400b92:	d0fb      	beq.n	400b8c <_pmc_init+0x30>
	((Pmc *)hw)->CKGR_UCKR = data;
  400b94:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
  400b98:	4b17      	ldr	r3, [pc, #92]	; (400bf8 <_pmc_init+0x9c>)
  400b9a:	61da      	str	r2, [r3, #28]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
}

static inline bool hri_pmc_get_SR_LOCKU_bit(const void *const hw)
{
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  400b9c:	461a      	mov	r2, r3
  400b9e:	6e93      	ldr	r3, [r2, #104]	; 0x68
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  400ba0:	f013 0f40 	tst.w	r3, #64	; 0x40
  400ba4:	d0fb      	beq.n	400b9e <_pmc_init+0x42>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ba6:	4a14      	ldr	r2, [pc, #80]	; (400bf8 <_pmc_init+0x9c>)
  400ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  400baa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bae:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bb0:	6e93      	ldr	r3, [r2, #104]	; 0x68
static void _pmc_init_master_clock(void)
{
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bb2:	f013 0f08 	tst.w	r3, #8
  400bb6:	d0fb      	beq.n	400bb0 <_pmc_init+0x54>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400bb8:	4a0f      	ldr	r2, [pc, #60]	; (400bf8 <_pmc_init+0x9c>)
  400bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bc0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bc2:	6e93      	ldr	r3, [r2, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bc4:	f013 0f08 	tst.w	r3, #8
  400bc8:	d0fb      	beq.n	400bc2 <_pmc_init+0x66>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400bca:	4a0b      	ldr	r2, [pc, #44]	; (400bf8 <_pmc_init+0x9c>)
  400bcc:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bd6:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bd8:	6e93      	ldr	r3, [r2, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bda:	f013 0f08 	tst.w	r3, #8
  400bde:	d0fb      	beq.n	400bd8 <_pmc_init+0x7c>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400be0:	4a05      	ldr	r2, [pc, #20]	; (400bf8 <_pmc_init+0x9c>)
  400be2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400be4:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400be8:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bec:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bee:	6e93      	ldr	r3, [r2, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bf0:	f013 0f08 	tst.w	r3, #8
  400bf4:	d0fb      	beq.n	400bee <_pmc_init+0x92>
{
	_pmc_init_sources();
	_pmc_init_master_clock();
	_pmc_init_program_clock();
	_pmc_init_fs_clock();
}
  400bf6:	4770      	bx	lr
  400bf8:	400e0600 	.word	0x400e0600
  400bfc:	00373e01 	.word	0x00373e01
  400c00:	01370000 	.word	0x01370000
  400c04:	f800ffff 	.word	0xf800ffff
  400c08:	20183f01 	.word	0x20183f01

00400c0c <_spi_m_sync_init>:
		dev->callbacks.complete(dev, ERR_OVERFLOW);
	}
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400c0c:	b538      	push	{r3, r4, r5, lr}
  400c0e:	4605      	mov	r5, r0
  400c10:	460c      	mov	r4, r1
	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400c12:	4b1b      	ldr	r3, [pc, #108]	; (400c80 <_spi_m_sync_init+0x74>)
  400c14:	440b      	add	r3, r1
		if (spi_regs[i].number == n) {
  400c16:	f3c3 4307 	ubfx	r3, r3, #16, #8
  400c1a:	2b05      	cmp	r3, #5
  400c1c:	d10d      	bne.n	400c3a <_spi_m_sync_init+0x2e>
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400c1e:	f44f 72a1 	mov.w	r2, #322	; 0x142
  400c22:	4918      	ldr	r1, [pc, #96]	; (400c84 <_spi_m_sync_init+0x78>)
  400c24:	2800      	cmp	r0, #0
  400c26:	bf18      	it	ne
  400c28:	2c00      	cmpne	r4, #0
  400c2a:	bf14      	ite	ne
  400c2c:	2001      	movne	r0, #1
  400c2e:	2000      	moveq	r0, #0
  400c30:	4b15      	ldr	r3, [pc, #84]	; (400c88 <_spi_m_sync_init+0x7c>)
  400c32:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
  400c34:	f06f 000c 	mvn.w	r0, #12

	dev->dummy_byte = regs->dummy_byte;
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;

	return ERR_NONE;
}
  400c38:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
  400c3a:	f44f 72a1 	mov.w	r2, #322	; 0x142
  400c3e:	4911      	ldr	r1, [pc, #68]	; (400c84 <_spi_m_sync_init+0x78>)
  400c40:	2800      	cmp	r0, #0
  400c42:	bf18      	it	ne
  400c44:	2c00      	cmpne	r4, #0
  400c46:	bf14      	ite	ne
  400c48:	2001      	movne	r0, #1
  400c4a:	2000      	moveq	r0, #0
  400c4c:	4b0e      	ldr	r3, [pc, #56]	; (400c88 <_spi_m_sync_init+0x7c>)
  400c4e:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400c50:	6923      	ldr	r3, [r4, #16]
	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400c52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400c56:	d10f      	bne.n	400c78 <_spi_m_sync_init+0x6c>
	((Spi *)hw)->SPI_CR = data;
  400c58:	2380      	movs	r3, #128	; 0x80
  400c5a:	6023      	str	r3, [r4, #0]
	dev->prvt = hw;
  400c5c:	602c      	str	r4, [r5, #0]
  400c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  400c62:	6023      	str	r3, [r4, #0]
	((Spi *)hw)->SPI_MR = data;
  400c64:	4b09      	ldr	r3, [pc, #36]	; (400c8c <_spi_m_sync_init+0x80>)
  400c66:	6063      	str	r3, [r4, #4]
	((Spi *)hw)->SPI_CSR[index] = data;
  400c68:	4b09      	ldr	r3, [pc, #36]	; (400c90 <_spi_m_sync_init+0x84>)
  400c6a:	6323      	str	r3, [r4, #48]	; 0x30
	dev->dummy_byte = regs->dummy_byte;
  400c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400c70:	80eb      	strh	r3, [r5, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400c72:	2000      	movs	r0, #0
  400c74:	7128      	strb	r0, [r5, #4]
	return ERR_NONE;
  400c76:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  400c78:	f06f 0010 	mvn.w	r0, #16
  400c7c:	bd38      	pop	{r3, r4, r5, pc}
  400c7e:	bf00      	nop
  400c80:	bfff8000 	.word	0xbfff8000
  400c84:	0040271c 	.word	0x0040271c
  400c88:	00400a95 	.word	0x00400a95
  400c8c:	000e0011 	.word	0x000e0011
  400c90:	04969602 	.word	0x04969602

00400c94 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c98:	b085      	sub	sp, #20
  400c9a:	9003      	str	r0, [sp, #12]
  400c9c:	4689      	mov	r9, r1
	void *                 hw   = dev->prvt;
  400c9e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400ca0:	680b      	ldr	r3, [r1, #0]
  400ca2:	9302      	str	r3, [sp, #8]
  400ca4:	684d      	ldr	r5, [r1, #4]
  400ca6:	4603      	mov	r3, r0
  400ca8:	f890 b004 	ldrb.w	fp, [r0, #4]

	ASSERT(dev && hw);
  400cac:	1c22      	adds	r2, r4, #0
  400cae:	bf18      	it	ne
  400cb0:	2201      	movne	r2, #1
  400cb2:	4610      	mov	r0, r2
  400cb4:	9201      	str	r2, [sp, #4]
  400cb6:	f240 223f 	movw	r2, #575	; 0x23f
  400cba:	492e      	ldr	r1, [pc, #184]	; (400d74 <_spi_m_sync_trans+0xe0>)
  400cbc:	2b00      	cmp	r3, #0
  400cbe:	bf0c      	ite	eq
  400cc0:	2000      	moveq	r0, #0
  400cc2:	f000 0001 	andne.w	r0, r0, #1
  400cc6:	4b2c      	ldr	r3, [pc, #176]	; (400d78 <_spi_m_sync_trans+0xe4>)
  400cc8:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400cca:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400ccc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400cd0:	d034      	beq.n	400d3c <_spi_m_sync_trans+0xa8>
  400cd2:	2700      	movs	r7, #0
  400cd4:	463e      	mov	r6, r7
	ASSERT(hw);
  400cd6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 400d78 <_spi_m_sync_trans+0xe4>
  400cda:	e00f      	b.n	400cfc <_spi_m_sync_trans+0x68>
		*ctrl->rxbuf++ = (uint8_t)data;
  400cdc:	3501      	adds	r5, #1
	ctrl->rxcnt++;
  400cde:	3701      	adds	r7, #1
	return tmp;
}

static inline hri_spi_sr_reg_t hri_spi_read_SR_reg(const void *const hw)
{
	return ((Spi *)hw)->SPI_SR;
  400ce0:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400ce4:	f44f 720c 	mov.w	r2, #560	; 0x230
  400ce8:	4922      	ldr	r1, [pc, #136]	; (400d74 <_spi_m_sync_trans+0xe0>)
  400cea:	9801      	ldr	r0, [sp, #4]
  400cec:	47d0      	blx	sl
	if (SPI_SR_OVRES & iflag) {
  400cee:	f018 0f08 	tst.w	r8, #8
  400cf2:	d11a      	bne.n	400d2a <_spi_m_sync_trans+0x96>
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400cf4:	f8d9 3008 	ldr.w	r3, [r9, #8]
  400cf8:	429e      	cmp	r6, r3
  400cfa:	d212      	bcs.n	400d22 <_spi_m_sync_trans+0x8e>
  400cfc:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400cfe:	f013 0f01 	tst.w	r3, #1
  400d02:	d01e      	beq.n	400d42 <_spi_m_sync_trans+0xae>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400d04:	68a3      	ldr	r3, [r4, #8]
  400d06:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400d08:	2d00      	cmp	r5, #0
  400d0a:	d0e8      	beq.n	400cde <_spi_m_sync_trans+0x4a>
		*ctrl->rxbuf++ = (uint8_t)data;
  400d0c:	702b      	strb	r3, [r5, #0]
		if (ctrl->char_size > 1) {
  400d0e:	f1bb 0f01 	cmp.w	fp, #1
  400d12:	d9e3      	bls.n	400cdc <_spi_m_sync_trans+0x48>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400d14:	0a1b      	lsrs	r3, r3, #8
  400d16:	706b      	strb	r3, [r5, #1]
  400d18:	3502      	adds	r5, #2
  400d1a:	e7e0      	b.n	400cde <_spi_m_sync_trans+0x4a>
		data = *ctrl->txbuf++;
  400d1c:	3201      	adds	r2, #1
  400d1e:	9202      	str	r2, [sp, #8]
  400d20:	e024      	b.n	400d6c <_spi_m_sync_trans+0xd8>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400d22:	42bb      	cmp	r3, r7
  400d24:	d8ea      	bhi.n	400cfc <_spi_m_sync_trans+0x68>
			rc = ctrl.txcnt;
  400d26:	4630      	mov	r0, r6
			break;
  400d28:	e001      	b.n	400d2e <_spi_m_sync_trans+0x9a>
		return ERR_OVERFLOW;
  400d2a:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Spi *)hw)->SPI_SR;
  400d2e:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  400d30:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d34:	d0fb      	beq.n	400d2e <_spi_m_sync_trans+0x9a>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400d36:	b005      	add	sp, #20
  400d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERR_NOT_INITIALIZED;
  400d3c:	f06f 0013 	mvn.w	r0, #19
  400d40:	e7f9      	b.n	400d36 <_spi_m_sync_trans+0xa2>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  400d42:	42be      	cmp	r6, r7
  400d44:	d8cc      	bhi.n	400ce0 <_spi_m_sync_trans+0x4c>
	return ((Spi *)hw)->SPI_SR;
  400d46:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400d48:	f013 0f02 	tst.w	r3, #2
  400d4c:	d0c8      	beq.n	400ce0 <_spi_m_sync_trans+0x4c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400d4e:	9b03      	ldr	r3, [sp, #12]
  400d50:	88db      	ldrh	r3, [r3, #6]
	if (ctrl->txbuf) {
  400d52:	9a02      	ldr	r2, [sp, #8]
  400d54:	b152      	cbz	r2, 400d6c <_spi_m_sync_trans+0xd8>
		data = *ctrl->txbuf++;
  400d56:	7813      	ldrb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400d58:	f1bb 0f01 	cmp.w	fp, #1
  400d5c:	d9de      	bls.n	400d1c <_spi_m_sync_trans+0x88>
			data |= (*ctrl->txbuf) << 8;
  400d5e:	9902      	ldr	r1, [sp, #8]
  400d60:	784a      	ldrb	r2, [r1, #1]
  400d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			ctrl->txbuf++;
  400d66:	460a      	mov	r2, r1
  400d68:	3202      	adds	r2, #2
  400d6a:	9202      	str	r2, [sp, #8]
	ctrl->txcnt++;
  400d6c:	3601      	adds	r6, #1
	((Spi *)hw)->SPI_TDR = data;
  400d6e:	60e3      	str	r3, [r4, #12]
  400d70:	e7b6      	b.n	400ce0 <_spi_m_sync_trans+0x4c>
  400d72:	bf00      	nop
  400d74:	0040271c 	.word	0x0040271c
  400d78:	00400a95 	.word	0x00400a95

00400d7c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  400d7c:	4b03      	ldr	r3, [pc, #12]	; (400d8c <_delay_init+0x10>)
  400d7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  400d82:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  400d84:	2205      	movs	r2, #5
  400d86:	601a      	str	r2, [r3, #0]
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop
  400d8c:	e000e010 	.word	0xe000e010

00400d90 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  400d90:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  400d92:	b1fb      	cbz	r3, 400dd4 <_delay_cycles+0x44>
{
  400d94:	b430      	push	{r4, r5}
  400d96:	1e5d      	subs	r5, r3, #1
  400d98:	b2ed      	uxtb	r5, r5
	while (n--) {
  400d9a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
  400d9c:	4a12      	ldr	r2, [pc, #72]	; (400de8 <_delay_cycles+0x58>)
  400d9e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
  400da2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
  400da4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400da6:	6813      	ldr	r3, [r2, #0]
  400da8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400dac:	d0fb      	beq.n	400da6 <_delay_cycles+0x16>
	while (n--) {
  400dae:	3801      	subs	r0, #1
  400db0:	b2c0      	uxtb	r0, r0
  400db2:	28ff      	cmp	r0, #255	; 0xff
  400db4:	d1f5      	bne.n	400da2 <_delay_cycles+0x12>
  400db6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
  400dba:	4b0c      	ldr	r3, [pc, #48]	; (400dec <_delay_cycles+0x5c>)
  400dbc:	440b      	add	r3, r1
  400dbe:	18e9      	adds	r1, r5, r3
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
  400dc0:	4b09      	ldr	r3, [pc, #36]	; (400de8 <_delay_cycles+0x58>)
  400dc2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  400dc4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400dc6:	461a      	mov	r2, r3
  400dc8:	6813      	ldr	r3, [r2, #0]
  400dca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400dce:	d0fb      	beq.n	400dc8 <_delay_cycles+0x38>
		;
}
  400dd0:	bc30      	pop	{r4, r5}
  400dd2:	4770      	bx	lr
	SysTick->LOAD = buf;
  400dd4:	4b04      	ldr	r3, [pc, #16]	; (400de8 <_delay_cycles+0x58>)
  400dd6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  400dd8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400dda:	461a      	mov	r2, r3
  400ddc:	6813      	ldr	r3, [r2, #0]
  400dde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400de2:	d0fb      	beq.n	400ddc <_delay_cycles+0x4c>
  400de4:	4770      	bx	lr
  400de6:	bf00      	nop
  400de8:	e000e010 	.word	0xe000e010
  400dec:	ff000001 	.word	0xff000001

00400df0 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  400df0:	4770      	bx	lr

00400df2 <_dummy_func_return_false>:
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
  400df2:	2000      	movs	r0, #0
  400df4:	4770      	bx	lr
	...

00400df8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  400df8:	b508      	push	{r3, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  400dfa:	7c83      	ldrb	r3, [r0, #18]
  400dfc:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  400e00:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
  400e02:	f002 0107 	and.w	r1, r2, #7
  400e06:	2901      	cmp	r1, #1
  400e08:	d008      	beq.n	400e1c <_usb_d_dev_handle_setup+0x24>
  400e0a:	4a15      	ldr	r2, [pc, #84]	; (400e60 <_usb_d_dev_handle_setup+0x68>)
  400e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400e10:	2204      	movs	r2, #4
  400e12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  400e16:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  400e1a:	bd08      	pop	{r3, pc}

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  400e1c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400e20:	d00c      	beq.n	400e3c <_usb_d_dev_handle_setup+0x44>
		ept->flags.bits.is_busy = 0;
  400e22:	7cc2      	ldrb	r2, [r0, #19]
  400e24:	f36f 1286 	bfc	r2, #6, #1
  400e28:	74c2      	strb	r2, [r0, #19]
  400e2a:	4a0d      	ldr	r2, [pc, #52]	; (400e60 <_usb_d_dev_handle_setup+0x68>)
  400e2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  400e30:	2101      	movs	r1, #1
  400e32:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400e36:	2102      	movs	r1, #2
  400e38:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
		_usbd_ep_set_out_rdy(epn, false);
	}

	ept->flags.bits.is_stalled = 0;
  400e3c:	7cc2      	ldrb	r2, [r0, #19]
  400e3e:	f36f 02c3 	bfc	r2, #3, #1
  400e42:	74c2      	strb	r2, [r0, #19]
  400e44:	4a06      	ldr	r2, [pc, #24]	; (400e60 <_usb_d_dev_handle_setup+0x68>)
  400e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400e4a:	2218      	movs	r2, #24
  400e4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  400e50:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  400e54:	4b03      	ldr	r3, [pc, #12]	; (400e64 <_usb_d_dev_handle_setup+0x6c>)
  400e56:	689b      	ldr	r3, [r3, #8]
  400e58:	7c80      	ldrb	r0, [r0, #18]
  400e5a:	4798      	blx	r3
  400e5c:	bd08      	pop	{r3, pc}
  400e5e:	bf00      	nop
  400e60:	40038000 	.word	0x40038000
  400e64:	20400114 	.word	0x20400114

00400e68 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  400e68:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  400e6a:	7c84      	ldrb	r4, [r0, #18]
  400e6c:	2cff      	cmp	r4, #255	; 0xff
  400e6e:	d003      	beq.n	400e78 <_usb_d_dev_trans_done+0x10>
  400e70:	7cc3      	ldrb	r3, [r0, #19]
  400e72:	f013 0f40 	tst.w	r3, #64	; 0x40
  400e76:	d100      	bne.n	400e7a <_usb_d_dev_trans_done+0x12>
  400e78:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}

	ept->flags.bits.is_busy = 0;
  400e7a:	7cc2      	ldrb	r2, [r0, #19]
  400e7c:	f36f 1286 	bfc	r2, #6, #1
  400e80:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  400e82:	4a03      	ldr	r2, [pc, #12]	; (400e90 <_usb_d_dev_trans_done+0x28>)
  400e84:	6915      	ldr	r5, [r2, #16]
  400e86:	6882      	ldr	r2, [r0, #8]
  400e88:	4620      	mov	r0, r4
  400e8a:	47a8      	blx	r5
  400e8c:	e7f4      	b.n	400e78 <_usb_d_dev_trans_done+0x10>
  400e8e:	bf00      	nop
  400e90:	20400114 	.word	0x20400114

00400e94 <_usb_d_dev_reset_epts>:
{
  400e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  400e98:	4b0f      	ldr	r3, [pc, #60]	; (400ed8 <_usb_d_dev_reset_epts+0x44>)
  400e9a:	681a      	ldr	r2, [r3, #0]
  400e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  400ea0:	601a      	str	r2, [r3, #0]

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  400ea2:	681a      	ldr	r2, [r3, #0]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  400ea4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	tmp |= USBHS_DEVCTRL_UADD(data);
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  400ea8:	601a      	str	r2, [r3, #0]
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  400eaa:	681a      	ldr	r2, [r3, #0]
  400eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  400eb0:	601a      	str	r2, [r3, #0]
  400eb2:	4d0a      	ldr	r5, [pc, #40]	; (400edc <_usb_d_dev_reset_epts+0x48>)
  400eb4:	f105 0414 	add.w	r4, r5, #20
  400eb8:	3564      	adds	r5, #100	; 0x64
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  400eba:	f04f 0803 	mov.w	r8, #3
  400ebe:	4f08      	ldr	r7, [pc, #32]	; (400ee0 <_usb_d_dev_reset_epts+0x4c>)
		dev_inst.ep[i].ep       = 0xFF;
  400ec0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  400ec2:	4641      	mov	r1, r8
  400ec4:	4620      	mov	r0, r4
  400ec6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
  400ec8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
  400eca:	2300      	movs	r3, #0
  400ecc:	74e3      	strb	r3, [r4, #19]
  400ece:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
  400ed0:	42ac      	cmp	r4, r5
  400ed2:	d1f6      	bne.n	400ec2 <_usb_d_dev_reset_epts+0x2e>
}
  400ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ed8:	40038000 	.word	0x40038000
  400edc:	20400114 	.word	0x20400114
  400ee0:	00400e69 	.word	0x00400e69

00400ee4 <_usb_d_dev_dma_next>:
	if (!ept->flags.bits.is_busy) {
  400ee4:	7cc2      	ldrb	r2, [r0, #19]
  400ee6:	f012 0f40 	tst.w	r2, #64	; 0x40
  400eea:	d067      	beq.n	400fbc <_usb_d_dev_dma_next+0xd8>
{
  400eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  400eee:	7c81      	ldrb	r1, [r0, #18]
  400ef0:	f001 010f 	and.w	r1, r1, #15
	if (ept->trans_count != ept->trans_size) {
  400ef4:	6887      	ldr	r7, [r0, #8]
  400ef6:	6843      	ldr	r3, [r0, #4]
  400ef8:	429f      	cmp	r7, r3
  400efa:	d021      	beq.n	400f40 <_usb_d_dev_dma_next+0x5c>
		trans_next = ept->trans_size - ept->trans_count;
  400efc:	1bdb      	subs	r3, r3, r7
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  400efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400f02:	d826      	bhi.n	400f52 <_usb_d_dev_dma_next+0x6e>
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  400f04:	041e      	lsls	r6, r3, #16
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  400f06:	f002 0590 	and.w	r5, r2, #144	; 0x90
  400f0a:	2d80      	cmp	r5, #128	; 0x80
  400f0c:	d025      	beq.n	400f5a <_usb_d_dev_dma_next+0x76>
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  400f0e:	f002 0207 	and.w	r2, r2, #7
  400f12:	2a02      	cmp	r2, #2
  400f14:	d024      	beq.n	400f60 <_usb_d_dev_dma_next+0x7c>
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  400f16:	f046 0614 	orr.w	r6, r6, #20
		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  400f1a:	6802      	ldr	r2, [r0, #0]
  400f1c:	4417      	add	r7, r2
  400f1e:	1e4a      	subs	r2, r1, #1

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMAADDRESS = data;
  400f20:	b2d2      	uxtb	r2, r2
  400f22:	4c27      	ldr	r4, [pc, #156]	; (400fc0 <_usb_d_dev_dma_next+0xdc>)
  400f24:	f102 0531 	add.w	r5, r2, #49	; 0x31
  400f28:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  400f2c:	606f      	str	r7, [r5, #4]
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  400f2e:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  400f32:	f8d4 431c 	ldr.w	r4, [r4, #796]	; 0x31c
		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  400f36:	f014 0f10 	tst.w	r4, #16
  400f3a:	d015      	beq.n	400f68 <_usb_d_dev_dma_next+0x84>
		ept->trans_size = ept->trans_count;
  400f3c:	6883      	ldr	r3, [r0, #8]
  400f3e:	6043      	str	r3, [r0, #4]
	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  400f40:	7cc3      	ldrb	r3, [r0, #19]
  400f42:	f003 0390 	and.w	r3, r3, #144	; 0x90
  400f46:	2b90      	cmp	r3, #144	; 0x90
  400f48:	d020      	beq.n	400f8c <_usb_d_dev_dma_next+0xa8>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  400f4a:	2100      	movs	r1, #0
  400f4c:	4b1d      	ldr	r3, [pc, #116]	; (400fc4 <_usb_d_dev_dma_next+0xe0>)
  400f4e:	4798      	blx	r3
  400f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  400f52:	2600      	movs	r6, #0
			trans_next = USB_D_DEV_TRANS_MAX;
  400f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  400f58:	e7d5      	b.n	400f06 <_usb_d_dev_dma_next+0x22>
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  400f5a:	f046 0608 	orr.w	r6, r6, #8
  400f5e:	e7dc      	b.n	400f1a <_usb_d_dev_dma_next+0x36>
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  400f60:	8a02      	ldrh	r2, [r0, #16]
  400f62:	4293      	cmp	r3, r2
  400f64:	d8d9      	bhi.n	400f1a <_usb_d_dev_dma_next+0x36>
  400f66:	e7d6      	b.n	400f16 <_usb_d_dev_dma_next+0x32>
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  400f68:	f046 0621 	orr.w	r6, r6, #33	; 0x21
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL = data;
  400f6c:	4c14      	ldr	r4, [pc, #80]	; (400fc0 <_usb_d_dev_dma_next+0xdc>)
  400f6e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
  400f72:	f8c2 6318 	str.w	r6, [r2, #792]	; 0x318
			ept->trans_count += trans_next;
  400f76:	6882      	ldr	r2, [r0, #8]
  400f78:	441a      	add	r2, r3
  400f7a:	6082      	str	r2, [r0, #8]
			ept->trans_load = trans_next;
  400f7c:	60c3      	str	r3, [r0, #12]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  400f7e:	3901      	subs	r1, #1
  400f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400f84:	fa03 f101 	lsl.w	r1, r3, r1
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  400f88:	61a1      	str	r1, [r4, #24]
  400f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f8c:	4b0c      	ldr	r3, [pc, #48]	; (400fc0 <_usb_d_dev_dma_next+0xdc>)
  400f8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400f92:	2201      	movs	r2, #1
  400f94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  400f98:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  400f9c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
  400fa0:	d002      	beq.n	400fa8 <_usb_d_dev_dma_next+0xc4>
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  400fa2:	2201      	movs	r2, #1
  400fa4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  400fa8:	2201      	movs	r2, #1
  400faa:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  400fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400fb2:	fa03 f101 	lsl.w	r1, r3, r1
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  400fb6:	4b02      	ldr	r3, [pc, #8]	; (400fc0 <_usb_d_dev_dma_next+0xdc>)
  400fb8:	6199      	str	r1, [r3, #24]
  400fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400fbc:	4770      	bx	lr
  400fbe:	bf00      	nop
  400fc0:	40038000 	.word	0x40038000
  400fc4:	00400e69 	.word	0x00400e69

00400fc8 <_usb_d_dev_trans_stop>:
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400fc8:	7c83      	ldrb	r3, [r0, #18]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  400fca:	2bff      	cmp	r3, #255	; 0xff
  400fcc:	d016      	beq.n	400ffc <_usb_d_dev_trans_stop+0x34>
{
  400fce:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  400fd0:	7cc4      	ldrb	r4, [r0, #19]
  400fd2:	f014 0f40 	tst.w	r4, #64	; 0x40
  400fd6:	d00a      	beq.n	400fee <_usb_d_dev_trans_stop+0x26>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400fd8:	f003 030f 	and.w	r3, r3, #15
		return;
	}

	/* Stop transfer */
	if (dir) {
  400fdc:	b141      	cbz	r1, 400ff0 <_usb_d_dev_trans_stop+0x28>
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  400fde:	3364      	adds	r3, #100	; 0x64
  400fe0:	2401      	movs	r4, #1
  400fe2:	4907      	ldr	r1, [pc, #28]	; (401000 <_usb_d_dev_trans_stop+0x38>)
  400fe4:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  400fe8:	4611      	mov	r1, r2
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
	}

	_usb_d_dev_trans_done(ept, code);
  400fea:	4b06      	ldr	r3, [pc, #24]	; (401004 <_usb_d_dev_trans_stop+0x3c>)
  400fec:	4798      	blx	r3
  400fee:	bd10      	pop	{r4, pc}
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400ff0:	3358      	adds	r3, #88	; 0x58
  400ff2:	2402      	movs	r4, #2
  400ff4:	4902      	ldr	r1, [pc, #8]	; (401000 <_usb_d_dev_trans_stop+0x38>)
  400ff6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  400ffa:	e7f5      	b.n	400fe8 <_usb_d_dev_trans_stop+0x20>
  400ffc:	4770      	bx	lr
  400ffe:	bf00      	nop
  401000:	40038000 	.word	0x40038000
  401004:	00400e69 	.word	0x00400e69

00401008 <USBHS_Handler>:
{
  401008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40100c:	b085      	sub	sp, #20
	return ((Usbhs *)hw)->USBHS_DEVISR;
  40100e:	4aaa      	ldr	r2, [pc, #680]	; (4012b8 <USBHS_Handler+0x2b0>)
  401010:	6851      	ldr	r1, [r2, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  401012:	6913      	ldr	r3, [r2, #16]
	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  401014:	400b      	ands	r3, r1
	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  401016:	f3c3 370b 	ubfx	r7, r3, #12, #12
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  40101a:	ea4f 6853 	mov.w	r8, r3, lsr #25
	if ((ep_int == 0) && (dma_int == 0)) {
  40101e:	b917      	cbnz	r7, 401026 <USBHS_Handler+0x1e>
  401020:	f1b8 0f00 	cmp.w	r8, #0
  401024:	d002      	beq.n	40102c <USBHS_Handler+0x24>
  401026:	4ca5      	ldr	r4, [pc, #660]	; (4012bc <USBHS_Handler+0x2b4>)
{
  401028:	2500      	movs	r5, #0
  40102a:	e08a      	b.n	401142 <USBHS_Handler+0x13a>
	return ((Usbhs *)hw)->USBHS_DEVISR;
  40102c:	6853      	ldr	r3, [r2, #4]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  40102e:	b29b      	uxth	r3, r3
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  401030:	6912      	ldr	r2, [r2, #16]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  401032:	4013      	ands	r3, r2
	if (flags & USBHS_DEVISR_SOF) {
  401034:	f013 0f04 	tst.w	r3, #4
  401038:	d117      	bne.n	40106a <USBHS_Handler+0x62>
	} else if (flags & USBHS_DEVISR_MSOF) {
  40103a:	f013 0f02 	tst.w	r3, #2
  40103e:	d11d      	bne.n	40107c <USBHS_Handler+0x74>
	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  401040:	f013 0f70 	tst.w	r3, #112	; 0x70
  401044:	d121      	bne.n	40108a <USBHS_Handler+0x82>
	} else if (flags & USBHS_DEVISR_EORST) {
  401046:	f013 0f08 	tst.w	r3, #8
  40104a:	d12a      	bne.n	4010a2 <USBHS_Handler+0x9a>
	} else if (flags & USBHS_DEVISR_SUSP) {
  40104c:	f013 0f01 	tst.w	r3, #1
  401050:	d0e9      	beq.n	401026 <USBHS_Handler+0x1e>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  401052:	4b99      	ldr	r3, [pc, #612]	; (4012b8 <USBHS_Handler+0x2b0>)
  401054:	2201      	movs	r2, #1
  401056:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401058:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  40105a:	2270      	movs	r2, #112	; 0x70
  40105c:	619a      	str	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  40105e:	4b97      	ldr	r3, [pc, #604]	; (4012bc <USBHS_Handler+0x2b4>)
  401060:	685b      	ldr	r3, [r3, #4]
  401062:	2100      	movs	r1, #0
  401064:	2004      	movs	r0, #4
  401066:	4798      	blx	r3
  401068:	e005      	b.n	401076 <USBHS_Handler+0x6e>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  40106a:	2204      	movs	r2, #4
  40106c:	4b92      	ldr	r3, [pc, #584]	; (4012b8 <USBHS_Handler+0x2b0>)
  40106e:	609a      	str	r2, [r3, #8]
	dev_inst.callbacks.sof();
  401070:	4b92      	ldr	r3, [pc, #584]	; (4012bc <USBHS_Handler+0x2b4>)
  401072:	681b      	ldr	r3, [r3, #0]
  401074:	4798      	blx	r3
}
  401076:	b005      	add	sp, #20
  401078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40107c:	2202      	movs	r2, #2
  40107e:	4b8e      	ldr	r3, [pc, #568]	; (4012b8 <USBHS_Handler+0x2b0>)
  401080:	609a      	str	r2, [r3, #8]
	dev_inst.callbacks.sof();
  401082:	4b8e      	ldr	r3, [pc, #568]	; (4012bc <USBHS_Handler+0x2b4>)
  401084:	681b      	ldr	r3, [r3, #0]
  401086:	4798      	blx	r3
  401088:	e7f5      	b.n	401076 <USBHS_Handler+0x6e>
  40108a:	4b8b      	ldr	r3, [pc, #556]	; (4012b8 <USBHS_Handler+0x2b0>)
  40108c:	2210      	movs	r2, #16
  40108e:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_WAKEUPE;
  401090:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  401092:	2201      	movs	r2, #1
  401094:	619a      	str	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  401096:	4b89      	ldr	r3, [pc, #548]	; (4012bc <USBHS_Handler+0x2b4>)
  401098:	685b      	ldr	r3, [r3, #4]
  40109a:	2100      	movs	r1, #0
  40109c:	2002      	movs	r0, #2
  40109e:	4798      	blx	r3
  4010a0:	e7e9      	b.n	401076 <USBHS_Handler+0x6e>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  4010a2:	4b85      	ldr	r3, [pc, #532]	; (4012b8 <USBHS_Handler+0x2b0>)
  4010a4:	2208      	movs	r2, #8
  4010a6:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4010a8:	2270      	movs	r2, #112	; 0x70
  4010aa:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4010ac:	2401      	movs	r4, #1
  4010ae:	619c      	str	r4, [r3, #24]
	_usb_d_dev_reset_epts();
  4010b0:	4b83      	ldr	r3, [pc, #524]	; (4012c0 <USBHS_Handler+0x2b8>)
  4010b2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  4010b4:	4b81      	ldr	r3, [pc, #516]	; (4012bc <USBHS_Handler+0x2b4>)
  4010b6:	685b      	ldr	r3, [r3, #4]
  4010b8:	2100      	movs	r1, #0
  4010ba:	4620      	mov	r0, r4
  4010bc:	4798      	blx	r3
  4010be:	e7da      	b.n	401076 <USBHS_Handler+0x6e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4010c0:	f006 060f 	and.w	r6, r6, #15
	if (!(epint & (1u << epn))) {
  4010c4:	2301      	movs	r3, #1
  4010c6:	40b3      	lsls	r3, r6
  4010c8:	423b      	tst	r3, r7
  4010ca:	d036      	beq.n	40113a <USBHS_Handler+0x132>
  4010cc:	4b7a      	ldr	r3, [pc, #488]	; (4012b8 <USBHS_Handler+0x2b0>)
  4010ce:	eb03 0b86 	add.w	fp, r3, r6, lsl #2
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  4010d2:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  4010d6:	b2db      	uxtb	r3, r3
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  4010d8:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
	if (flags) {
  4010dc:	4013      	ands	r3, r2
  4010de:	d02c      	beq.n	40113a <USBHS_Handler+0x132>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  4010e0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4010e4:	d122      	bne.n	40112c <USBHS_Handler+0x124>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  4010e6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  4010ea:	4974      	ldr	r1, [pc, #464]	; (4012bc <USBHS_Handler+0x2b4>)
  4010ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4010f0:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
  4010f4:	9201      	str	r2, [sp, #4]
  4010f6:	f012 0f40 	tst.w	r2, #64	; 0x40
  4010fa:	d058      	beq.n	4011ae <USBHS_Handler+0x1a6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  4010fc:	9a01      	ldr	r2, [sp, #4]
  4010fe:	f012 0f80 	tst.w	r2, #128	; 0x80
  401102:	d15b      	bne.n	4011bc <USBHS_Handler+0x1b4>
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  401104:	f013 0f20 	tst.w	r3, #32
  401108:	f040 8103 	bne.w	401312 <USBHS_Handler+0x30a>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  40110c:	f013 0f02 	tst.w	r3, #2
  401110:	f040 810f 	bne.w	401332 <USBHS_Handler+0x32a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  401114:	9a01      	ldr	r2, [sp, #4]
  401116:	f002 0207 	and.w	r2, r2, #7
  40111a:	2a01      	cmp	r2, #1
  40111c:	d10d      	bne.n	40113a <USBHS_Handler+0x132>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  40111e:	f013 0f04 	tst.w	r3, #4
  401122:	d00a      	beq.n	40113a <USBHS_Handler+0x132>
			_usb_d_dev_handle_setup(ept);
  401124:	4650      	mov	r0, sl
  401126:	4b67      	ldr	r3, [pc, #412]	; (4012c4 <USBHS_Handler+0x2bc>)
  401128:	4798      	blx	r3
  40112a:	e006      	b.n	40113a <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  40112c:	2340      	movs	r3, #64	; 0x40
  40112e:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  401132:	2101      	movs	r1, #1
  401134:	4650      	mov	r0, sl
  401136:	4b64      	ldr	r3, [pc, #400]	; (4012c8 <USBHS_Handler+0x2c0>)
  401138:	4798      	blx	r3
  40113a:	3501      	adds	r5, #1
  40113c:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
  40113e:	2d04      	cmp	r5, #4
  401140:	d099      	beq.n	401076 <USBHS_Handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  401142:	46a9      	mov	r9, r5
  401144:	9400      	str	r4, [sp, #0]
		if (ept->ep == 0xFF) {
  401146:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
  40114a:	2eff      	cmp	r6, #255	; 0xff
  40114c:	d0f5      	beq.n	40113a <USBHS_Handler+0x132>
  40114e:	f104 0a14 	add.w	sl, r4, #20
		if (ep_int) {
  401152:	2f00      	cmp	r7, #0
  401154:	d1b4      	bne.n	4010c0 <USBHS_Handler+0xb8>
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  401156:	f1b8 0f00 	cmp.w	r8, #0
  40115a:	d0ee      	beq.n	40113a <USBHS_Handler+0x132>
  40115c:	1e6b      	subs	r3, r5, #1
  40115e:	b2db      	uxtb	r3, r3
  401160:	2b06      	cmp	r3, #6
  401162:	d8ea      	bhi.n	40113a <USBHS_Handler+0x132>
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  401164:	f006 060f 	and.w	r6, r6, #15
	if (!(epint & (1u << (epn - 1)))) {
  401168:	1e71      	subs	r1, r6, #1
  40116a:	2301      	movs	r3, #1
  40116c:	408b      	lsls	r3, r1
  40116e:	ea13 0f08 	tst.w	r3, r8
  401172:	d0e2      	beq.n	40113a <USBHS_Handler+0x132>
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  401174:	b2cb      	uxtb	r3, r1
  401176:	4a50      	ldr	r2, [pc, #320]	; (4012b8 <USBHS_Handler+0x2b0>)
  401178:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40117c:	f8d2 231c 	ldr.w	r2, [r2, #796]	; 0x31c
	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  401180:	f012 0f01 	tst.w	r2, #1
  401184:	d1d9      	bne.n	40113a <USBHS_Handler+0x132>
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  401186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40118a:	408a      	lsls	r2, r1
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  40118c:	494a      	ldr	r1, [pc, #296]	; (4012b8 <USBHS_Handler+0x2b0>)
  40118e:	614a      	str	r2, [r1, #20]
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  401190:	eb01 1303 	add.w	r3, r1, r3, lsl #4
  401194:	f8d3 231c 	ldr.w	r2, [r3, #796]	; 0x31c
	if (trans_next) {
  401198:	0c12      	lsrs	r2, r2, #16
  40119a:	d004      	beq.n	4011a6 <USBHS_Handler+0x19e>
		ept->trans_count -= trans_next;
  40119c:	9900      	ldr	r1, [sp, #0]
  40119e:	69cb      	ldr	r3, [r1, #28]
  4011a0:	1a9b      	subs	r3, r3, r2
  4011a2:	61cb      	str	r3, [r1, #28]
		ept->trans_size = ept->trans_count;
  4011a4:	618b      	str	r3, [r1, #24]
	_usb_d_dev_dma_next(ept);
  4011a6:	4650      	mov	r0, sl
  4011a8:	4b48      	ldr	r3, [pc, #288]	; (4012cc <USBHS_Handler+0x2c4>)
  4011aa:	4798      	blx	r3
  4011ac:	e7c5      	b.n	40113a <USBHS_Handler+0x132>
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4011ae:	f013 0f04 	tst.w	r3, #4
  4011b2:	d0c2      	beq.n	40113a <USBHS_Handler+0x132>
		_usb_d_dev_handle_setup(ept);
  4011b4:	4650      	mov	r0, sl
  4011b6:	4b43      	ldr	r3, [pc, #268]	; (4012c4 <USBHS_Handler+0x2bc>)
  4011b8:	4798      	blx	r3
  4011ba:	e7be      	b.n	40113a <USBHS_Handler+0x132>
	if (flags & USBHS_DEVEPTISR_TXINI) {
  4011bc:	f013 0f01 	tst.w	r3, #1
  4011c0:	d10b      	bne.n	4011da <USBHS_Handler+0x1d2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  4011c2:	9a01      	ldr	r2, [sp, #4]
  4011c4:	f002 0207 	and.w	r2, r2, #7
  4011c8:	2a01      	cmp	r2, #1
  4011ca:	d1b6      	bne.n	40113a <USBHS_Handler+0x132>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4011cc:	f013 0f04 	tst.w	r3, #4
  4011d0:	d0b3      	beq.n	40113a <USBHS_Handler+0x132>
			_usb_d_dev_handle_setup(ept);
  4011d2:	4650      	mov	r0, sl
  4011d4:	4b3b      	ldr	r3, [pc, #236]	; (4012c4 <USBHS_Handler+0x2bc>)
  4011d6:	4798      	blx	r3
  4011d8:	e7af      	b.n	40113a <USBHS_Handler+0x132>
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  4011da:	9b00      	ldr	r3, [sp, #0]
  4011dc:	8c98      	ldrh	r0, [r3, #36]	; 0x24
  4011de:	f240 33ff 	movw	r3, #1023	; 0x3ff
  4011e2:	4298      	cmp	r0, r3
  4011e4:	d02f      	beq.n	401246 <USBHS_Handler+0x23e>
  4011e6:	1e42      	subs	r2, r0, #1
  4011e8:	b292      	uxth	r2, r2
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  4011ea:	9b01      	ldr	r3, [sp, #4]
  4011ec:	f003 0307 	and.w	r3, r3, #7
  4011f0:	9302      	str	r3, [sp, #8]
	if (ept->trans_count >= ept->trans_size) {
  4011f2:	9b00      	ldr	r3, [sp, #0]
  4011f4:	469e      	mov	lr, r3
  4011f6:	69d9      	ldr	r1, [r3, #28]
  4011f8:	f8de 3018 	ldr.w	r3, [lr, #24]
  4011fc:	4299      	cmp	r1, r3
  4011fe:	d367      	bcc.n	4012d0 <USBHS_Handler+0x2c8>
		if (ept->flags.bits.need_zlp) {
  401200:	9901      	ldr	r1, [sp, #4]
  401202:	f011 0f10 	tst.w	r1, #16
  401206:	d021      	beq.n	40124c <USBHS_Handler+0x244>
			ept->trans_load          = 0;
  401208:	2100      	movs	r1, #0
  40120a:	f8ce 1020 	str.w	r1, [lr, #32]
			ept->flags.bits.need_zlp = 0;
  40120e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
  401212:	4a2a      	ldr	r2, [pc, #168]	; (4012bc <USBHS_Handler+0x2b4>)
  401214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401218:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  40121c:	f361 1204 	bfi	r2, r1, #4, #1
  401220:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401224:	2301      	movs	r3, #1
  401226:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
  40122a:	2308      	movs	r3, #8
  40122c:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401230:	f8cb 31f0 	str.w	r3, [fp, #496]	; 0x1f0
			if (!is_ctrl) {
  401234:	9b02      	ldr	r3, [sp, #8]
  401236:	2b01      	cmp	r3, #1
  401238:	f43f af7f 	beq.w	40113a <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  40123c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401240:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
  401244:	e779      	b.n	40113a <USBHS_Handler+0x132>
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  401246:	f240 32ff 	movw	r2, #1023	; 0x3ff
  40124a:	e7ce      	b.n	4011ea <USBHS_Handler+0x1e2>
	uint16_t trans_count = ept->trans_load;
  40124c:	9b00      	ldr	r3, [sp, #0]
  40124e:	6a1b      	ldr	r3, [r3, #32]
  401250:	2101      	movs	r1, #1
  401252:	f8cb 1220 	str.w	r1, [fp, #544]	; 0x220
		if (!is_ctrl) {
  401256:	9902      	ldr	r1, [sp, #8]
  401258:	2901      	cmp	r1, #1
  40125a:	d005      	beq.n	401268 <USBHS_Handler+0x260>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  40125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401260:	fa01 f606 	lsl.w	r6, r1, r6
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401264:	4914      	ldr	r1, [pc, #80]	; (4012b8 <USBHS_Handler+0x2b0>)
  401266:	614e      	str	r6, [r1, #20]
		ept->trans_size = ept->trans_count;
  401268:	9e00      	ldr	r6, [sp, #0]
  40126a:	69f1      	ldr	r1, [r6, #28]
  40126c:	61b1      	str	r1, [r6, #24]
		if (last_pkt == ept->size) {
  40126e:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
  401270:	401a      	ands	r2, r3
  401272:	4290      	cmp	r0, r2
  401274:	d11b      	bne.n	4012ae <USBHS_Handler+0x2a6>
			ept->flags.bits.is_busy = 0;
  401276:	2314      	movs	r3, #20
  401278:	4a10      	ldr	r2, [pc, #64]	; (4012bc <USBHS_Handler+0x2b4>)
  40127a:	fb03 2309 	mla	r3, r3, r9, r2
  40127e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401282:	f36f 1286 	bfc	r2, #6, #1
  401286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  40128a:	4b0c      	ldr	r3, [pc, #48]	; (4012bc <USBHS_Handler+0x2b4>)
  40128c:	68db      	ldr	r3, [r3, #12]
  40128e:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
  401292:	4798      	blx	r3
  401294:	2800      	cmp	r0, #0
  401296:	f47f af50 	bne.w	40113a <USBHS_Handler+0x132>
			ept->flags.bits.is_busy = 1;
  40129a:	2314      	movs	r3, #20
  40129c:	4a07      	ldr	r2, [pc, #28]	; (4012bc <USBHS_Handler+0x2b4>)
  40129e:	fb03 2309 	mla	r3, r3, r9, r2
  4012a2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  4012a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4012aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4012ae:	2100      	movs	r1, #0
  4012b0:	4650      	mov	r0, sl
  4012b2:	4b05      	ldr	r3, [pc, #20]	; (4012c8 <USBHS_Handler+0x2c0>)
  4012b4:	4798      	blx	r3
  4012b6:	e740      	b.n	40113a <USBHS_Handler+0x132>
  4012b8:	40038000 	.word	0x40038000
  4012bc:	20400114 	.word	0x20400114
  4012c0:	00400e95 	.word	0x00400e95
  4012c4:	00400df9 	.word	0x00400df9
  4012c8:	00400e69 	.word	0x00400e69
  4012cc:	00400ee5 	.word	0x00400ee5
		trans_next = ept->trans_size - ept->trans_count;
  4012d0:	1a5b      	subs	r3, r3, r1
  4012d2:	b29b      	uxth	r3, r3
		memcpy(ptr_dest, ptr_src, trans_next);
  4012d4:	4298      	cmp	r0, r3
  4012d6:	bf28      	it	cs
  4012d8:	4618      	movcs	r0, r3
  4012da:	4681      	mov	r9, r0
		ptr_src = &ept->trans_buf[ept->trans_count];
  4012dc:	9b00      	ldr	r3, [sp, #0]
  4012de:	695b      	ldr	r3, [r3, #20]
		memcpy(ptr_dest, ptr_src, trans_next);
  4012e0:	4602      	mov	r2, r0
  4012e2:	4419      	add	r1, r3
  4012e4:	4842      	ldr	r0, [pc, #264]	; (4013f0 <USBHS_Handler+0x3e8>)
  4012e6:	eb00 30c6 	add.w	r0, r0, r6, lsl #15
  4012ea:	4b42      	ldr	r3, [pc, #264]	; (4013f4 <USBHS_Handler+0x3ec>)
  4012ec:	4798      	blx	r3
		ept->trans_load = trans_next;
  4012ee:	9a00      	ldr	r2, [sp, #0]
  4012f0:	f8c2 9020 	str.w	r9, [r2, #32]
		ept->trans_count += trans_next;
  4012f4:	69d3      	ldr	r3, [r2, #28]
  4012f6:	444b      	add	r3, r9
  4012f8:	61d3      	str	r3, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4012fa:	2301      	movs	r3, #1
  4012fc:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
		if (!is_ctrl) {
  401300:	9b02      	ldr	r3, [sp, #8]
  401302:	2b01      	cmp	r3, #1
  401304:	f43f af19 	beq.w	40113a <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40130c:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
  401310:	e713      	b.n	40113a <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401312:	2320      	movs	r3, #32
  401314:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  401318:	eb05 0985 	add.w	r9, r5, r5, lsl #2
  40131c:	4b36      	ldr	r3, [pc, #216]	; (4013f8 <USBHS_Handler+0x3f0>)
  40131e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  401322:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  401326:	2204      	movs	r2, #4
  401328:	09c9      	lsrs	r1, r1, #7
  40132a:	4650      	mov	r0, sl
  40132c:	4b33      	ldr	r3, [pc, #204]	; (4013fc <USBHS_Handler+0x3f4>)
  40132e:	4798      	blx	r3
  401330:	e703      	b.n	40113a <USBHS_Handler+0x132>
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  401332:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  401336:	f3c3 530a 	ubfx	r3, r3, #20, #11
  40133a:	4619      	mov	r1, r3
  40133c:	9302      	str	r3, [sp, #8]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  40133e:	9a00      	ldr	r2, [sp, #0]
  401340:	6993      	ldr	r3, [r2, #24]
  401342:	69d0      	ldr	r0, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401344:	2202      	movs	r2, #2
  401346:	f8cb 2160 	str.w	r2, [fp, #352]	; 0x160
	if (last_trans > 0) {
  40134a:	2900      	cmp	r1, #0
  40134c:	d043      	beq.n	4013d6 <USBHS_Handler+0x3ce>
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  40134e:	1a1b      	subs	r3, r3, r0
  401350:	b29b      	uxth	r3, r3
		if (last_trans > last_remain) {
  401352:	4299      	cmp	r1, r3
  401354:	d93c      	bls.n	4013d0 <USBHS_Handler+0x3c8>
			last_trans = last_remain;
  401356:	9302      	str	r3, [sp, #8]
			is_full    = true;
  401358:	2301      	movs	r3, #1
  40135a:	9303      	str	r3, [sp, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  40135c:	9b00      	ldr	r3, [sp, #0]
  40135e:	695b      	ldr	r3, [r3, #20]
  401360:	9a02      	ldr	r2, [sp, #8]
  401362:	4923      	ldr	r1, [pc, #140]	; (4013f0 <USBHS_Handler+0x3e8>)
  401364:	eb01 31c6 	add.w	r1, r1, r6, lsl #15
  401368:	4418      	add	r0, r3
  40136a:	4b22      	ldr	r3, [pc, #136]	; (4013f4 <USBHS_Handler+0x3ec>)
  40136c:	4798      	blx	r3
		ept->trans_count += last_trans;
  40136e:	9900      	ldr	r1, [sp, #0]
  401370:	69cb      	ldr	r3, [r1, #28]
  401372:	9802      	ldr	r0, [sp, #8]
  401374:	4403      	add	r3, r0
  401376:	61cb      	str	r3, [r1, #28]
		ept->trans_load = last_trans;
  401378:	460b      	mov	r3, r1
  40137a:	6218      	str	r0, [r3, #32]
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  40137c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401380:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
	if (last_trans < ept->size) {
  401384:	9b00      	ldr	r3, [sp, #0]
  401386:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  401388:	9a02      	ldr	r2, [sp, #8]
  40138a:	4293      	cmp	r3, r2
  40138c:	d926      	bls.n	4013dc <USBHS_Handler+0x3d4>
		ept->flags.bits.need_zlp = 0;
  40138e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
  401392:	4a19      	ldr	r2, [pc, #100]	; (4013f8 <USBHS_Handler+0x3f0>)
  401394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401398:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  40139c:	f36f 1204 	bfc	r2, #4, #1
  4013a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  4013a4:	2302      	movs	r3, #2
  4013a6:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
		if (!is_ctrl) {
  4013aa:	9b01      	ldr	r3, [sp, #4]
  4013ac:	f003 0307 	and.w	r3, r3, #7
  4013b0:	2b01      	cmp	r3, #1
  4013b2:	d005      	beq.n	4013c0 <USBHS_Handler+0x3b8>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013b8:	fa03 f606 	lsl.w	r6, r3, r6
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4013bc:	4b10      	ldr	r3, [pc, #64]	; (401400 <USBHS_Handler+0x3f8>)
  4013be:	615e      	str	r6, [r3, #20]
		ept->trans_size = ept->trans_count;
  4013c0:	9a00      	ldr	r2, [sp, #0]
  4013c2:	69d3      	ldr	r3, [r2, #28]
  4013c4:	6193      	str	r3, [r2, #24]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4013c6:	2100      	movs	r1, #0
  4013c8:	4650      	mov	r0, sl
  4013ca:	4b0e      	ldr	r3, [pc, #56]	; (401404 <USBHS_Handler+0x3fc>)
  4013cc:	4798      	blx	r3
  4013ce:	e6b4      	b.n	40113a <USBHS_Handler+0x132>
	bool     is_full = false, is_short = false;
  4013d0:	2300      	movs	r3, #0
  4013d2:	9303      	str	r3, [sp, #12]
  4013d4:	e7c2      	b.n	40135c <USBHS_Handler+0x354>
  4013d6:	2300      	movs	r3, #0
  4013d8:	9303      	str	r3, [sp, #12]
  4013da:	e7d3      	b.n	401384 <USBHS_Handler+0x37c>
	} else if (ept->trans_count >= ept->trans_size) {
  4013dc:	9900      	ldr	r1, [sp, #0]
  4013de:	69ca      	ldr	r2, [r1, #28]
  4013e0:	698b      	ldr	r3, [r1, #24]
  4013e2:	429a      	cmp	r2, r3
  4013e4:	d2de      	bcs.n	4013a4 <USBHS_Handler+0x39c>
	if (is_full || is_short) {
  4013e6:	9b03      	ldr	r3, [sp, #12]
  4013e8:	2b00      	cmp	r3, #0
  4013ea:	f43f aea6 	beq.w	40113a <USBHS_Handler+0x132>
  4013ee:	e7d9      	b.n	4013a4 <USBHS_Handler+0x39c>
  4013f0:	a0100000 	.word	0xa0100000
  4013f4:	004026a9 	.word	0x004026a9
  4013f8:	20400114 	.word	0x20400114
  4013fc:	00400fc9 	.word	0x00400fc9
  401400:	40038000 	.word	0x40038000
  401404:	00400e69 	.word	0x00400e69

00401408 <_usb_d_dev_init>:
{
  401408:	b508      	push	{r3, lr}
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  40140a:	4b0e      	ldr	r3, [pc, #56]	; (401444 <_usb_d_dev_init+0x3c>)
  40140c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  401410:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401414:	d113      	bne.n	40143e <_usb_d_dev_init+0x36>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  401416:	4b0c      	ldr	r3, [pc, #48]	; (401448 <_usb_d_dev_init+0x40>)
  401418:	4a0c      	ldr	r2, [pc, #48]	; (40144c <_usb_d_dev_init+0x44>)
  40141a:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  40141c:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  40141e:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  401420:	490b      	ldr	r1, [pc, #44]	; (401450 <_usb_d_dev_init+0x48>)
  401422:	60d9      	str	r1, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  401424:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
  401426:	4b0b      	ldr	r3, [pc, #44]	; (401454 <_usb_d_dev_init+0x4c>)
  401428:	4798      	blx	r3
	((Usbhs *)hw)->USBHS_CTRL = data;
  40142a:	4b06      	ldr	r3, [pc, #24]	; (401444 <_usb_d_dev_init+0x3c>)
  40142c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401430:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  401434:	f44f 6250 	mov.w	r2, #3328	; 0xd00
  401438:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
  40143a:	2000      	movs	r0, #0
  40143c:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
  40143e:	f06f 0010 	mvn.w	r0, #16
}
  401442:	bd08      	pop	{r3, pc}
  401444:	40038000 	.word	0x40038000
  401448:	20400114 	.word	0x20400114
  40144c:	00400df1 	.word	0x00400df1
  401450:	00400df3 	.word	0x00400df3
  401454:	00400e95 	.word	0x00400e95

00401458 <_usb_d_dev_enable>:
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  401458:	4b10      	ldr	r3, [pc, #64]	; (40149c <_usb_d_dev_enable+0x44>)
  40145a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
	if (!(hri_usbhs_get_CTRL_USBE_bit(hw))) {
  40145e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401462:	d10c      	bne.n	40147e <_usb_d_dev_enable+0x26>
	((Usbhs *)hw)->USBHS_CTRL &= ~USBHS_CTRL_FRZCLK;
  401464:	4b0d      	ldr	r3, [pc, #52]	; (40149c <_usb_d_dev_enable+0x44>)
  401466:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  40146a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  40146e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
  401472:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  401476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40147a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (((Usbhs *)hw)->USBHS_SR & USBHS_SR_CLKUSABLE) >> USBHS_SR_CLKUSABLE_Pos;
  40147e:	4a07      	ldr	r2, [pc, #28]	; (40149c <_usb_d_dev_enable+0x44>)
  401480:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
	while (!hri_usbhs_get_SR_CLKUSABLE_bit(hw)) {
  401484:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401488:	d0fa      	beq.n	401480 <_usb_d_dev_enable+0x28>
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  40148a:	221d      	movs	r2, #29
  40148c:	4b03      	ldr	r3, [pc, #12]	; (40149c <_usb_d_dev_enable+0x44>)
  40148e:	619a      	str	r2, [r3, #24]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401490:	2204      	movs	r2, #4
  401492:	4b03      	ldr	r3, [pc, #12]	; (4014a0 <_usb_d_dev_enable+0x48>)
  401494:	605a      	str	r2, [r3, #4]
}
  401496:	2000      	movs	r0, #0
  401498:	4770      	bx	lr
  40149a:	bf00      	nop
  40149c:	40038000 	.word	0x40038000
  4014a0:	e000e100 	.word	0xe000e100

004014a4 <_usb_d_dev_attach>:
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_DETACH;
  4014a4:	4a02      	ldr	r2, [pc, #8]	; (4014b0 <_usb_d_dev_attach+0xc>)
  4014a6:	6813      	ldr	r3, [r2, #0]
  4014a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4014ac:	6013      	str	r3, [r2, #0]
  4014ae:	4770      	bx	lr
  4014b0:	40038000 	.word	0x40038000

004014b4 <_usb_d_dev_set_address>:
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  4014b4:	4b06      	ldr	r3, [pc, #24]	; (4014d0 <_usb_d_dev_set_address+0x1c>)
  4014b6:	681a      	ldr	r2, [r3, #0]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  4014b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	tmp |= USBHS_DEVCTRL_UADD(data);
  4014bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4014c0:	4310      	orrs	r0, r2
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  4014c2:	6018      	str	r0, [r3, #0]
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  4014c4:	681a      	ldr	r2, [r3, #0]
  4014c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4014ca:	601a      	str	r2, [r3, #0]
  4014cc:	4770      	bx	lr
  4014ce:	bf00      	nop
  4014d0:	40038000 	.word	0x40038000

004014d4 <_usb_d_dev_ep_init>:
{
  4014d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4014d8:	4607      	mov	r7, r0
  4014da:	468a      	mov	sl, r1
  4014dc:	4615      	mov	r5, r2
	uint8_t               epn = USB_EP_GET_N(ep);
  4014de:	f000 060f 	and.w	r6, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
  4014e2:	ea4f 18d0 	mov.w	r8, r0, lsr #7
	ASSERT(max_pkt_siz < 1024);
  4014e6:	f240 39ff 	movw	r9, #1023	; 0x3ff
  4014ea:	f240 42d9 	movw	r2, #1241	; 0x4d9
  4014ee:	4942      	ldr	r1, [pc, #264]	; (4015f8 <_usb_d_dev_ep_init+0x124>)
  4014f0:	454d      	cmp	r5, r9
  4014f2:	bf8c      	ite	hi
  4014f4:	2000      	movhi	r0, #0
  4014f6:	2001      	movls	r0, #1
  4014f8:	4b40      	ldr	r3, [pc, #256]	; (4015fc <_usb_d_dev_ep_init+0x128>)
  4014fa:	4798      	blx	r3
	ASSERT((max_pkt_siz == 1023) || !(max_pkt_siz & (max_pkt_siz - 1)));
  4014fc:	454d      	cmp	r5, r9
  4014fe:	d027      	beq.n	401550 <_usb_d_dev_ep_init+0x7c>
  401500:	1e6b      	subs	r3, r5, #1
  401502:	422b      	tst	r3, r5
  401504:	bf0c      	ite	eq
  401506:	2001      	moveq	r0, #1
  401508:	2000      	movne	r0, #0
  40150a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 4015f8 <_usb_d_dev_ep_init+0x124>
  40150e:	f240 42da 	movw	r2, #1242	; 0x4da
  401512:	4649      	mov	r1, r9
  401514:	4c39      	ldr	r4, [pc, #228]	; (4015fc <_usb_d_dev_ep_init+0x128>)
  401516:	47a0      	blx	r4
	ASSERT(max_pkt_siz >= 8);
  401518:	f240 42db 	movw	r2, #1243	; 0x4db
  40151c:	4649      	mov	r1, r9
  40151e:	2d07      	cmp	r5, #7
  401520:	bf94      	ite	ls
  401522:	2000      	movls	r0, #0
  401524:	2001      	movhi	r0, #1
  401526:	47a0      	blx	r4
	uint8_t ep_type = attr & USB_EP_XTYPE_MASK;
  401528:	f00a 0a03 	and.w	sl, sl, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
  40152c:	2e03      	cmp	r6, #3
  40152e:	d85a      	bhi.n	4015e6 <_usb_d_dev_ep_init+0x112>
	if (ept->ep != 0xFF) {
  401530:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401534:	4a32      	ldr	r2, [pc, #200]	; (401600 <_usb_d_dev_ep_init+0x12c>)
  401536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40153a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  40153e:	2bff      	cmp	r3, #255	; 0xff
  401540:	d155      	bne.n	4015ee <_usb_d_dev_ep_init+0x11a>
	switch (ep_type) {
  401542:	f1ba 0f03 	cmp.w	sl, #3
  401546:	d821      	bhi.n	40158c <_usb_d_dev_ep_init+0xb8>
  401548:	e8df f00a 	tbb	[pc, sl]
  40154c:	28040428 	.word	0x28040428
  401550:	2001      	movs	r0, #1
  401552:	e7da      	b.n	40150a <_usb_d_dev_ep_init+0x36>
		bank = USB_D_BANK_ISOCH;
  401554:	2101      	movs	r1, #1
  401556:	4a2b      	ldr	r2, [pc, #172]	; (401604 <_usb_d_dev_ep_init+0x130>)
  401558:	eb02 0286 	add.w	r2, r2, r6, lsl #2
	return ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  40155c:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
	data &= ~(USBHS_DEVEPTCFG_EPBK_Msk | USBHS_DEVEPTCFG_EPSIZE_Msk | USBHS_DEVEPTCFG_EPDIR
  401560:	4b29      	ldr	r3, [pc, #164]	; (401608 <_usb_d_dev_ep_init+0x134>)
  401562:	4003      	ands	r3, r0
	data |= USBHS_DEVEPTCFG_EPBK(bank) | USBHS_DEVEPTCFG_EPSIZE(_usbd_ep_pcksize_size(max_pkt_siz))
  401564:	0089      	lsls	r1, r1, #2
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  401566:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  40156a:	d819      	bhi.n	4015a0 <_usb_d_dev_ep_init+0xcc>
  40156c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  401570:	d82f      	bhi.n	4015d2 <_usb_d_dev_ep_init+0xfe>
  401572:	2d80      	cmp	r5, #128	; 0x80
  401574:	d82f      	bhi.n	4015d6 <_usb_d_dev_ep_init+0x102>
  401576:	2d40      	cmp	r5, #64	; 0x40
  401578:	d82f      	bhi.n	4015da <_usb_d_dev_ep_init+0x106>
  40157a:	2d20      	cmp	r5, #32
  40157c:	d82f      	bhi.n	4015de <_usb_d_dev_ep_init+0x10a>
  40157e:	2d10      	cmp	r5, #16
  401580:	d82f      	bhi.n	4015e2 <_usb_d_dev_ep_init+0x10e>
  401582:	2d08      	cmp	r5, #8
  401584:	bf94      	ite	ls
  401586:	2000      	movls	r0, #0
  401588:	2001      	movhi	r0, #1
  40158a:	e00a      	b.n	4015a2 <_usb_d_dev_ep_init+0xce>
		ASSERT(false);
  40158c:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
  401590:	4919      	ldr	r1, [pc, #100]	; (4015f8 <_usb_d_dev_ep_init+0x124>)
  401592:	2000      	movs	r0, #0
  401594:	4b19      	ldr	r3, [pc, #100]	; (4015fc <_usb_d_dev_ep_init+0x128>)
  401596:	4798      	blx	r3
	uint8_t               bank = 0;
  401598:	2100      	movs	r1, #0
  40159a:	e7dc      	b.n	401556 <_usb_d_dev_ep_init+0x82>
		bank = USB_D_BANK_CTRL;
  40159c:	2100      	movs	r1, #0
  40159e:	e7da      	b.n	401556 <_usb_d_dev_ep_init+0x82>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  4015a0:	2007      	movs	r0, #7
  4015a2:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
  4015a6:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  4015aa:	430b      	orrs	r3, r1
	data |= USBHS_DEVEPTCFG_EPBK(bank) | USBHS_DEVEPTCFG_EPSIZE(_usbd_ep_pcksize_size(max_pkt_siz))
  4015ac:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = data;
  4015b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	ept->size     = max_pkt_siz;
  4015b4:	4b12      	ldr	r3, [pc, #72]	; (401600 <_usb_d_dev_ep_init+0x12c>)
  4015b6:	00b2      	lsls	r2, r6, #2
  4015b8:	1991      	adds	r1, r2, r6
  4015ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4015be:	848d      	strh	r5, [r1, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
  4015c0:	f10a 0401 	add.w	r4, sl, #1
  4015c4:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
	ept->ep       = ep;
  4015c8:	f881 7026 	strb.w	r7, [r1, #38]	; 0x26
	return USB_OK;
  4015cc:	2000      	movs	r0, #0
  4015ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  4015d2:	2006      	movs	r0, #6
  4015d4:	e7e5      	b.n	4015a2 <_usb_d_dev_ep_init+0xce>
  4015d6:	2005      	movs	r0, #5
  4015d8:	e7e3      	b.n	4015a2 <_usb_d_dev_ep_init+0xce>
  4015da:	2004      	movs	r0, #4
  4015dc:	e7e1      	b.n	4015a2 <_usb_d_dev_ep_init+0xce>
  4015de:	2003      	movs	r0, #3
  4015e0:	e7df      	b.n	4015a2 <_usb_d_dev_ep_init+0xce>
  4015e2:	2002      	movs	r0, #2
  4015e4:	e7dd      	b.n	4015a2 <_usb_d_dev_ep_init+0xce>
		return -USB_ERR_PARAM;
  4015e6:	f06f 0011 	mvn.w	r0, #17
  4015ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -USB_ERR_REDO;
  4015ee:	f06f 0013 	mvn.w	r0, #19
}
  4015f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015f6:	bf00      	nop
  4015f8:	00402734 	.word	0x00402734
  4015fc:	00400a95 	.word	0x00400a95
  401600:	20400114 	.word	0x20400114
  401604:	40038000 	.word	0x40038000
  401608:	ffffe683 	.word	0xffffe683

0040160c <_usb_d_dev_ep_deinit>:
{
  40160c:	b538      	push	{r3, r4, r5, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
  40160e:	f000 040f 	and.w	r4, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  401612:	2c03      	cmp	r4, #3
  401614:	d821      	bhi.n	40165a <_usb_d_dev_ep_deinit+0x4e>
  401616:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40161a:	4a10      	ldr	r2, [pc, #64]	; (40165c <_usb_d_dev_ep_deinit+0x50>)
  40161c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401620:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  401624:	2bff      	cmp	r3, #255	; 0xff
  401626:	d018      	beq.n	40165a <_usb_d_dev_ep_deinit+0x4e>
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  401628:	4615      	mov	r5, r2
  40162a:	1c63      	adds	r3, r4, #1
  40162c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
  401630:	2203      	movs	r2, #3
  401632:	09c1      	lsrs	r1, r0, #7
  401634:	eb05 0083 	add.w	r0, r5, r3, lsl #2
  401638:	4b09      	ldr	r3, [pc, #36]	; (401660 <_usb_d_dev_ep_deinit+0x54>)
  40163a:	4798      	blx	r3
	((Usbhs *)hw)->USBHS_DEVEPT &= ~mask;
  40163c:	4a09      	ldr	r2, [pc, #36]	; (401664 <_usb_d_dev_ep_deinit+0x58>)
  40163e:	69d3      	ldr	r3, [r2, #28]
  401640:	ea23 0304 	bic.w	r3, r3, r4
  401644:	61d3      	str	r3, [r2, #28]
	ept->flags.u8 = 0;
  401646:	00a3      	lsls	r3, r4, #2
  401648:	191a      	adds	r2, r3, r4
  40164a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  40164e:	2100      	movs	r1, #0
  401650:	f882 1027 	strb.w	r1, [r2, #39]	; 0x27
	ept->ep       = 0xFF;
  401654:	23ff      	movs	r3, #255	; 0xff
  401656:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
  40165a:	bd38      	pop	{r3, r4, r5, pc}
  40165c:	20400114 	.word	0x20400114
  401660:	00400fc9 	.word	0x00400fc9
  401664:	40038000 	.word	0x40038000

00401668 <_usb_d_dev_ep_enable>:
{
  401668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn          = USB_EP_GET_N(ep);
  40166c:	f000 040f 	and.w	r4, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  401670:	2c03      	cmp	r4, #3
  401672:	f200 80dc 	bhi.w	40182e <_usb_d_dev_ep_enable+0x1c6>
  401676:	b240      	sxtb	r0, r0
  401678:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40167c:	4a74      	ldr	r2, [pc, #464]	; (401850 <_usb_d_dev_ep_enable+0x1e8>)
  40167e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401682:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  401686:	2bff      	cmp	r3, #255	; 0xff
  401688:	f000 80d5 	beq.w	401836 <_usb_d_dev_ep_enable+0x1ce>
	if (epn == 0) {
  40168c:	2c00      	cmp	r4, #0
  40168e:	d03c      	beq.n	40170a <_usb_d_dev_ep_enable+0xa2>
	uint16_t              ep_allocated = 1 << epn;
  401690:	2301      	movs	r3, #1
  401692:	40a3      	lsls	r3, r4
  401694:	b29e      	uxth	r6, r3
		for (i = CONF_USB_D_MAX_EP_N; i > epn; i--) {
  401696:	2c02      	cmp	r4, #2
  401698:	d828      	bhi.n	4016ec <_usb_d_dev_ep_enable+0x84>
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  40169a:	4a6e      	ldr	r2, [pc, #440]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  40169c:	69d2      	ldr	r2, [r2, #28]
			if (_usbd_ep_is_enabled(i)) {
  40169e:	f012 0f08 	tst.w	r2, #8
  4016a2:	d00e      	beq.n	4016c2 <_usb_d_dev_ep_enable+0x5a>
				ep_allocated |= 1 << i;
  4016a4:	f043 0608 	orr.w	r6, r3, #8
  4016a8:	b2b6      	uxth	r6, r6
  4016aa:	4a6a      	ldr	r2, [pc, #424]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  4016ac:	69d3      	ldr	r3, [r2, #28]
		data &= ~((uint32_t)0x1 << epn);
  4016ae:	f023 0308 	bic.w	r3, r3, #8
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  4016b2:	61d3      	str	r3, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_ALLOC;
  4016b4:	320c      	adds	r2, #12
  4016b6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
  4016ba:	f023 0302 	bic.w	r3, r3, #2
  4016be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		for (i = CONF_USB_D_MAX_EP_N; i > epn; i--) {
  4016c2:	2c01      	cmp	r4, #1
  4016c4:	d812      	bhi.n	4016ec <_usb_d_dev_ep_enable+0x84>
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  4016c6:	4b63      	ldr	r3, [pc, #396]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  4016c8:	69db      	ldr	r3, [r3, #28]
			if (_usbd_ep_is_enabled(i)) {
  4016ca:	f013 0f04 	tst.w	r3, #4
  4016ce:	d00d      	beq.n	4016ec <_usb_d_dev_ep_enable+0x84>
				ep_allocated |= 1 << i;
  4016d0:	f046 0604 	orr.w	r6, r6, #4
  4016d4:	4a5f      	ldr	r2, [pc, #380]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  4016d6:	69d3      	ldr	r3, [r2, #28]
		data &= ~((uint32_t)0x1 << epn);
  4016d8:	f023 0304 	bic.w	r3, r3, #4
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  4016dc:	61d3      	str	r3, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_ALLOC;
  4016de:	3208      	adds	r2, #8
  4016e0:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
  4016e4:	f023 0302 	bic.w	r3, r3, #2
  4016e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  4016ec:	4623      	mov	r3, r4
  4016ee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  4016f2:	4a57      	ldr	r2, [pc, #348]	; (401850 <_usb_d_dev_ep_enable+0x1e8>)
  4016f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
				bool                  b_restart = ptr_ep->flags.bits.is_busy;
  4016f8:	4694      	mov	ip, r2
  4016fa:	4d56      	ldr	r5, [pc, #344]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
		data |= 0x1 << epn;
  4016fc:	f04f 0e01 	mov.w	lr, #1
				if (b_restart && (!_usb_d_dev_ep_is_dma(i) && !dir)) {
  401700:	ea6f 0800 	mvn.w	r8, r0
  401704:	ea4f 78d8 	mov.w	r8, r8, lsr #31
  401708:	e02a      	b.n	401760 <_usb_d_dev_ep_enable+0xf8>
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_ALLOC;
  40170a:	4b52      	ldr	r3, [pc, #328]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  40170c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  401710:	f042 0202 	orr.w	r2, r2, #2
  401714:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  401718:	69da      	ldr	r2, [r3, #28]
		data |= 0x1 << epn;
  40171a:	f042 0201 	orr.w	r2, r2, #1
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  40171e:	61da      	str	r2, [r3, #28]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CFGOK) >> USBHS_DEVEPTISR_CFGOK_Pos;
  401720:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
		if (!_usbd_ep_is_cfg(0)) {
  401724:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  401728:	f000 8089 	beq.w	40183e <_usb_d_dev_ep_enable+0x1d6>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
  40172c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401730:	4a47      	ldr	r2, [pc, #284]	; (401850 <_usb_d_dev_ep_enable+0x1e8>)
  401732:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401736:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
  40173a:	f003 0307 	and.w	r3, r3, #7
  40173e:	2b01      	cmp	r3, #1
  401740:	d048      	beq.n	4017d4 <_usb_d_dev_ep_enable+0x16c>
	} else if (dir) {
  401742:	2800      	cmp	r0, #0
  401744:	db6b      	blt.n	40181e <_usb_d_dev_ep_enable+0x1b6>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401746:	3458      	adds	r4, #88	; 0x58
  401748:	2202      	movs	r2, #2
  40174a:	4b42      	ldr	r3, [pc, #264]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  40174c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	return USB_OK;
  401750:	2000      	movs	r0, #0
  401752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401756:	3301      	adds	r3, #1
  401758:	3114      	adds	r1, #20
		for (i = epn; i <= CONF_USB_D_MAX_EP_N; i++) {
  40175a:	b2da      	uxtb	r2, r3
  40175c:	2a03      	cmp	r2, #3
  40175e:	d8e5      	bhi.n	40172c <_usb_d_dev_ep_enable+0xc4>
			if (ep_allocated & (1 << i)) {
  401760:	fa46 f203 	asr.w	r2, r6, r3
  401764:	f012 0f01 	tst.w	r2, #1
  401768:	d0f5      	beq.n	401756 <_usb_d_dev_ep_enable+0xee>
				bool                  b_restart = ptr_ep->flags.bits.is_busy;
  40176a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40176e:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
  401772:	f892 7027 	ldrb.w	r7, [r2, #39]	; 0x27
  401776:	f3c7 1980 	ubfx	r9, r7, #6, #1
				ptr_ep->flags.bits.is_busy      = false;
  40177a:	f36f 1786 	bfc	r7, #6, #1
  40177e:	f882 7027 	strb.w	r7, [r2, #39]	; 0x27
  401782:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_ALLOC;
  401786:	f8d2 7100 	ldr.w	r7, [r2, #256]	; 0x100
  40178a:	f047 0702 	orr.w	r7, r7, #2
  40178e:	f8c2 7100 	str.w	r7, [r2, #256]	; 0x100
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  401792:	f8d5 a01c 	ldr.w	sl, [r5, #28]
		data |= 0x1 << epn;
  401796:	fa0e f703 	lsl.w	r7, lr, r3
  40179a:	ea47 070a 	orr.w	r7, r7, sl
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  40179e:	61ef      	str	r7, [r5, #28]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CFGOK) >> USBHS_DEVEPTISR_CFGOK_Pos;
  4017a0:	f8d2 7130 	ldr.w	r7, [r2, #304]	; 0x130
				if (!_usbd_ep_is_cfg(i)) {
  4017a4:	f417 2f80 	tst.w	r7, #262144	; 0x40000
  4017a8:	d04d      	beq.n	401846 <_usb_d_dev_ep_enable+0x1de>
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  4017aa:	f8d2 7100 	ldr.w	r7, [r2, #256]	; 0x100
  4017ae:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  4017b2:	f8c2 7100 	str.w	r7, [r2, #256]	; 0x100
				if (b_restart && (!_usb_d_dev_ep_is_dma(i) && !dir)) {
  4017b6:	f1b9 0f00 	cmp.w	r9, #0
  4017ba:	d0cc      	beq.n	401756 <_usb_d_dev_ep_enable+0xee>
  4017bc:	1e5a      	subs	r2, r3, #1
  4017be:	b2d2      	uxtb	r2, r2
  4017c0:	2a06      	cmp	r2, #6
  4017c2:	d9c8      	bls.n	401756 <_usb_d_dev_ep_enable+0xee>
  4017c4:	f1b8 0f00 	cmp.w	r8, #0
  4017c8:	d0c5      	beq.n	401756 <_usb_d_dev_ep_enable+0xee>
					ptr_ep->trans_count -= ptr_ep->trans_load;
  4017ca:	69ca      	ldr	r2, [r1, #28]
  4017cc:	6a0f      	ldr	r7, [r1, #32]
  4017ce:	1bd2      	subs	r2, r2, r7
  4017d0:	61ca      	str	r2, [r1, #28]
  4017d2:	e7c0      	b.n	401756 <_usb_d_dev_ep_enable+0xee>
  4017d4:	491f      	ldr	r1, [pc, #124]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  4017d6:	eb01 0384 	add.w	r3, r1, r4, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4017da:	2502      	movs	r5, #2
  4017dc:	f8c3 5160 	str.w	r5, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  4017e0:	2001      	movs	r0, #1
  4017e2:	f8c3 0190 	str.w	r0, [r3, #400]	; 0x190
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4017e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4017ea:	eb02 0484 	add.w	r4, r2, r4, lsl #2
  4017ee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
  4017f2:	f003 030f 	and.w	r3, r3, #15
  4017f6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4017fa:	2441      	movs	r4, #65	; 0x41
  4017fc:	f8c2 4160 	str.w	r4, [r2, #352]	; 0x160
  401800:	f8c2 5160 	str.w	r5, [r2, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401804:	2406      	movs	r4, #6
  401806:	f8c2 41f0 	str.w	r4, [r2, #496]	; 0x1f0
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  40180a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  40180e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401812:	fa02 f303 	lsl.w	r3, r2, r3
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401816:	618b      	str	r3, [r1, #24]
	return USB_OK;
  401818:	2000      	movs	r0, #0
  40181a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  40181e:	3464      	adds	r4, #100	; 0x64
  401820:	2201      	movs	r2, #1
  401822:	4b0c      	ldr	r3, [pc, #48]	; (401854 <_usb_d_dev_ep_enable+0x1ec>)
  401824:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  401828:	2000      	movs	r0, #0
  40182a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -USB_ERR_PARAM;
  40182e:	f06f 0011 	mvn.w	r0, #17
  401832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401836:	f06f 0011 	mvn.w	r0, #17
  40183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return -USB_ERR_ALLOC_FAIL;
  40183e:	f06f 0014 	mvn.w	r0, #20
  401842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					return -USB_ERR_ALLOC_FAIL;
  401846:	f06f 0014 	mvn.w	r0, #20
}
  40184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40184e:	bf00      	nop
  401850:	20400114 	.word	0x20400114
  401854:	40038000 	.word	0x40038000

00401858 <_usb_d_dev_ep_stall>:
	uint8_t               epn = USB_EP_GET_N(ep);
  401858:	f000 000f 	and.w	r0, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N) {
  40185c:	2803      	cmp	r0, #3
  40185e:	f200 8099 	bhi.w	401994 <_usb_d_dev_ep_stall+0x13c>
	if (USB_EP_STALL_SET == ctrl) {
  401862:	2901      	cmp	r1, #1
  401864:	d016      	beq.n	401894 <_usb_d_dev_ep_stall+0x3c>
	} else if (USB_EP_STALL_CLR == ctrl) {
  401866:	2900      	cmp	r1, #0
  401868:	d03f      	beq.n	4018ea <_usb_d_dev_ep_stall+0x92>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40186a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40186e:	4b4e      	ldr	r3, [pc, #312]	; (4019a8 <_usb_d_dev_ep_stall+0x150>)
  401870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401874:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  401878:	f003 020f 	and.w	r2, r3, #15
  40187c:	4b4b      	ldr	r3, [pc, #300]	; (4019ac <_usb_d_dev_ep_stall+0x154>)
  40187e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  401882:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
	return (((Usbhs *)hw)->USBHS_DEVEPTIMR[index] & USBHS_DEVEPTIMR_STALLEDE) > 0;
  401886:	f8d3 01c0 	ldr.w	r0, [r3, #448]	; 0x1c0
  40188a:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return _usbd_ep_is_stalled(epn);
  40188e:	ea00 1092 	and.w	r0, r0, r2, lsr #6
  401892:	4770      	bx	lr
	if (!ept->flags.bits.is_stalled) {
  401894:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  401898:	4a43      	ldr	r2, [pc, #268]	; (4019a8 <_usb_d_dev_ep_stall+0x150>)
  40189a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40189e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
  4018a2:	f013 0f08 	tst.w	r3, #8
  4018a6:	d178      	bne.n	40199a <_usb_d_dev_ep_stall+0x142>
{
  4018a8:	b410      	push	{r4}
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4018aa:	4613      	mov	r3, r2
  4018ac:	0082      	lsls	r2, r0, #2
  4018ae:	1811      	adds	r1, r2, r0
  4018b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4018b4:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
  4018b8:	f001 040f 	and.w	r4, r1, #15
  4018bc:	493b      	ldr	r1, [pc, #236]	; (4019ac <_usb_d_dev_ep_stall+0x154>)
  4018be:	eb01 0184 	add.w	r1, r1, r4, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  4018c2:	2440      	movs	r4, #64	; 0x40
  4018c4:	f8c1 41f0 	str.w	r4, [r1, #496]	; 0x1f0
  4018c8:	f44f 2400 	mov.w	r4, #524288	; 0x80000
  4018cc:	f8c1 41f0 	str.w	r4, [r1, #496]	; 0x1f0
		ept->flags.bits.is_stalled = 1;
  4018d0:	4410      	add	r0, r2
  4018d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4018d6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  4018da:	f043 0308 	orr.w	r3, r3, #8
  4018de:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept);
  4018e2:	2000      	movs	r0, #0
}
  4018e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4018e8:	4770      	bx	lr
	uint8_t epn        = USB_EP_GET_N(ept->ep);
  4018ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  4018ee:	4a2e      	ldr	r2, [pc, #184]	; (4019a8 <_usb_d_dev_ep_stall+0x150>)
  4018f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  4018f8:	f003 030f 	and.w	r3, r3, #15
  4018fc:	4a2b      	ldr	r2, [pc, #172]	; (4019ac <_usb_d_dev_ep_stall+0x154>)
  4018fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  401902:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
	return (((Usbhs *)hw)->USBHS_DEVEPTIMR[index] & USBHS_DEVEPTIMR_STALLEDE) > 0;
  401906:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
	if (!is_stalled) {
  40190a:	f012 0f40 	tst.w	r2, #64	; 0x40
  40190e:	d046      	beq.n	40199e <_usb_d_dev_ep_stall+0x146>
  401910:	f011 0f40 	tst.w	r1, #64	; 0x40
  401914:	d043      	beq.n	40199e <_usb_d_dev_ep_stall+0x146>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401916:	2240      	movs	r2, #64	; 0x40
  401918:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  40191c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  401920:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
	if (_usbd_ep_is_stall_sent(epn)) {
  401924:	f012 0f40 	tst.w	r2, #64	; 0x40
  401928:	d00b      	beq.n	401942 <_usb_d_dev_ep_stall+0xea>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40192a:	2240      	movs	r2, #64	; 0x40
  40192c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  401930:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
	data &= ~USBHS_DEVEPTISR_DTSEQ_Msk;
  401934:	f422 7240 	bic.w	r2, r2, #768	; 0x300
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  401938:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, ~data);
  40193c:	43d2      	mvns	r2, r2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40193e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (_usb_d_dev_ep_is_ctrl(ept)) {
  401942:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  401946:	4918      	ldr	r1, [pc, #96]	; (4019a8 <_usb_d_dev_ep_stall+0x150>)
  401948:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40194c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
  401950:	f002 0207 	and.w	r2, r2, #7
  401954:	2a01      	cmp	r2, #1
  401956:	d00c      	beq.n	401972 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
  401958:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40195c:	4b12      	ldr	r3, [pc, #72]	; (4019a8 <_usb_d_dev_ep_stall+0x150>)
  40195e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401962:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401966:	f36f 02c3 	bfc	r2, #3, #1
  40196a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_clr(ept);
  40196e:	2000      	movs	r0, #0
  401970:	4770      	bx	lr
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  401972:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  401976:	f013 0f40 	tst.w	r3, #64	; 0x40
  40197a:	d112      	bne.n	4019a2 <_usb_d_dev_ep_stall+0x14a>
			ept->flags.bits.is_stalled = 0;
  40197c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401980:	eb01 0380 	add.w	r3, r1, r0, lsl #2
  401984:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401988:	f36f 02c3 	bfc	r2, #3, #1
  40198c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_clr(ept);
  401990:	2000      	movs	r0, #0
  401992:	4770      	bx	lr
		return -USB_ERR_PARAM;
  401994:	f06f 0011 	mvn.w	r0, #17
  401998:	4770      	bx	lr
		rc = _usb_d_dev_ep_stall_set(ept);
  40199a:	2000      	movs	r0, #0
  40199c:	4770      	bx	lr
		rc = _usb_d_dev_ep_stall_clr(ept);
  40199e:	2000      	movs	r0, #0
  4019a0:	4770      	bx	lr
  4019a2:	2000      	movs	r0, #0
  4019a4:	4770      	bx	lr
  4019a6:	bf00      	nop
  4019a8:	20400114 	.word	0x20400114
  4019ac:	40038000 	.word	0x40038000

004019b0 <_usb_d_dev_ep_read_req>:
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
	uint8_t epn = USB_EP_GET_N(ep);
  4019b0:	f000 000f 	and.w	r0, r0, #15
  4019b4:	4b15      	ldr	r3, [pc, #84]	; (401a0c <_usb_d_dev_ep_read_req+0x5c>)
  4019b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  4019ba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130

	uint16_t bytes = _usbd_ep_get_trans_count(epn);

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  4019be:	2803      	cmp	r0, #3
  4019c0:	d821      	bhi.n	401a06 <_usb_d_dev_ep_read_req+0x56>
{
  4019c2:	b430      	push	{r4, r5}
  4019c4:	460c      	mov	r4, r1
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  4019c6:	b1c1      	cbz	r1, 4019fa <_usb_d_dev_ep_read_req+0x4a>
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  4019c8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  4019cc:	f411 5fc0 	tst.w	r1, #6144	; 0x1800
  4019d0:	d116      	bne.n	401a00 <_usb_d_dev_ep_read_req+0x50>
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  4019d2:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
		return -USB_ERR_FUNC;
	}

	if (!_usbd_ep_is_setup(epn)) {
  4019d6:	f011 0f04 	tst.w	r1, #4
  4019da:	d102      	bne.n	4019e2 <_usb_d_dev_ep_read_req+0x32>
		return ERR_NONE;
  4019dc:	2000      	movs	r0, #0
	memcpy(req_buf, (void *)ptr, 8);

	_usbd_ep_ack_setup(epn);

	return bytes;
}
  4019de:	bc30      	pop	{r4, r5}
  4019e0:	4770      	bx	lr
	memcpy(req_buf, (void *)ptr, 8);
  4019e2:	4d0b      	ldr	r5, [pc, #44]	; (401a10 <_usb_d_dev_ep_read_req+0x60>)
  4019e4:	eb05 35c0 	add.w	r5, r5, r0, lsl #15
  4019e8:	cd03      	ldmia	r5!, {r0, r1}
  4019ea:	6020      	str	r0, [r4, #0]
  4019ec:	6061      	str	r1, [r4, #4]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4019ee:	2104      	movs	r1, #4
  4019f0:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  4019f4:	f3c2 500a 	ubfx	r0, r2, #20, #11
	return bytes;
  4019f8:	e7f1      	b.n	4019de <_usb_d_dev_ep_read_req+0x2e>
		return -USB_ERR_PARAM;
  4019fa:	f06f 0011 	mvn.w	r0, #17
  4019fe:	e7ee      	b.n	4019de <_usb_d_dev_ep_read_req+0x2e>
		return -USB_ERR_FUNC;
  401a00:	f06f 0012 	mvn.w	r0, #18
  401a04:	e7eb      	b.n	4019de <_usb_d_dev_ep_read_req+0x2e>
		return -USB_ERR_PARAM;
  401a06:	f06f 0011 	mvn.w	r0, #17
}
  401a0a:	4770      	bx	lr
  401a0c:	40038000 	.word	0x40038000
  401a10:	a0100000 	.word	0xa0100000

00401a14 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  401a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a18:	b083      	sub	sp, #12
	Usbhs *               hw  = USBHS;
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  401a1a:	7a06      	ldrb	r6, [r0, #8]
  401a1c:	f006 040f 	and.w	r4, r6, #15
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  401a20:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401a24:	4b4a      	ldr	r3, [pc, #296]	; (401b50 <_usb_d_dev_ep_trans+0x13c>)
  401a26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401a2a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
  401a2c:	f240 33ff 	movw	r3, #1023	; 0x3ff
  401a30:	429d      	cmp	r5, r3
  401a32:	d001      	beq.n	401a38 <_usb_d_dev_ep_trans+0x24>
  401a34:	3d01      	subs	r5, #1
  401a36:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  401a38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401a3c:	4a44      	ldr	r2, [pc, #272]	; (401b50 <_usb_d_dev_ep_trans+0x13c>)
  401a3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a42:	f893 8027 	ldrb.w	r8, [r3, #39]	; 0x27

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  401a46:	2c03      	cmp	r4, #3
  401a48:	d87e      	bhi.n	401b48 <_usb_d_dev_ep_trans+0x134>
		return -USB_ERR_PARAM;
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  401a4a:	f018 0f08 	tst.w	r8, #8
  401a4e:	d003      	beq.n	401a58 <_usb_d_dev_ep_trans+0x44>
		return USB_HALTED;
  401a50:	2002      	movs	r0, #2
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
}
  401a52:	b003      	add	sp, #12
  401a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a58:	4607      	mov	r7, r0
	bool     size_n_aligned = (trans->size & size_mask);
  401a5a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	atomic_enter_critical(&flags);
  401a5e:	a801      	add	r0, sp, #4
  401a60:	4b3c      	ldr	r3, [pc, #240]	; (401b54 <_usb_d_dev_ep_trans+0x140>)
  401a62:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
  401a64:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401a68:	4a39      	ldr	r2, [pc, #228]	; (401b50 <_usb_d_dev_ep_trans+0x13c>)
  401a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401a6e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
  401a72:	f013 0f40 	tst.w	r3, #64	; 0x40
  401a76:	d14f      	bne.n	401b18 <_usb_d_dev_ep_trans+0x104>
  401a78:	b276      	sxtb	r6, r6
	ept->flags.bits.is_busy = 1;
  401a7a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
  401a7e:	4b34      	ldr	r3, [pc, #208]	; (401b50 <_usb_d_dev_ep_trans+0x13c>)
  401a80:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  401a84:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
  401a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a8c:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
	atomic_leave_critical(&flags);
  401a90:	a801      	add	r0, sp, #4
  401a92:	4b31      	ldr	r3, [pc, #196]	; (401b58 <_usb_d_dev_ep_trans+0x144>)
  401a94:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
  401a96:	683b      	ldr	r3, [r7, #0]
  401a98:	f8c9 3014 	str.w	r3, [r9, #20]
	ept->trans_size  = trans->size;
  401a9c:	687b      	ldr	r3, [r7, #4]
  401a9e:	f8c9 3018 	str.w	r3, [r9, #24]
	ept->trans_count = 0;
  401aa2:	2300      	movs	r3, #0
  401aa4:	f8c9 301c 	str.w	r3, [r9, #28]
	ept->trans_load  = 0;
  401aa8:	f8c9 3020 	str.w	r3, [r9, #32]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  401aac:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir      = dir;
  401aae:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
  401ab2:	f362 13c7 	bfi	r3, r2, #7, #1
  401ab6:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  401aba:	ea15 0f0a 	tst.w	r5, sl
  401abe:	bf0c      	ite	eq
  401ac0:	2301      	moveq	r3, #1
  401ac2:	2300      	movne	r3, #0
  401ac4:	7a7a      	ldrb	r2, [r7, #9]
  401ac6:	2a00      	cmp	r2, #0
  401ac8:	bf0c      	ite	eq
  401aca:	2300      	moveq	r3, #0
  401acc:	f003 0301 	andne.w	r3, r3, #1
  401ad0:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
  401ad4:	f363 1204 	bfi	r2, r3, #4, #1
  401ad8:	f889 2027 	strb.w	r2, [r9, #39]	; 0x27
	if (_usb_d_dev_ep_is_dma(epn)) {
  401adc:	1e63      	subs	r3, r4, #1
  401ade:	b2db      	uxtb	r3, r3
  401ae0:	2b06      	cmp	r3, #6
  401ae2:	d91e      	bls.n	401b22 <_usb_d_dev_ep_trans+0x10e>
		if (!is_ctrl) {
  401ae4:	f008 0307 	and.w	r3, r8, #7
  401ae8:	2b01      	cmp	r3, #1
  401aea:	d004      	beq.n	401af6 <_usb_d_dev_ep_trans+0xe2>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  401aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401af0:	40a3      	lsls	r3, r4
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401af2:	4a1a      	ldr	r2, [pc, #104]	; (401b5c <_usb_d_dev_ep_trans+0x148>)
  401af4:	6193      	str	r3, [r2, #24]
  401af6:	4b19      	ldr	r3, [pc, #100]	; (401b5c <_usb_d_dev_ep_trans+0x148>)
  401af8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  401afc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
  401b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401b04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if (dir) {
  401b08:	2e00      	cmp	r6, #0
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401b0a:	bfb4      	ite	lt
  401b0c:	2301      	movlt	r3, #1
  401b0e:	2302      	movge	r3, #2
  401b10:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
	return ERR_NONE;
  401b14:	2000      	movs	r0, #0
  401b16:	e79c      	b.n	401a52 <_usb_d_dev_ep_trans+0x3e>
		atomic_leave_critical(&flags);
  401b18:	a801      	add	r0, sp, #4
  401b1a:	4b0f      	ldr	r3, [pc, #60]	; (401b58 <_usb_d_dev_ep_trans+0x144>)
  401b1c:	4798      	blx	r3
		return USB_BUSY;
  401b1e:	2001      	movs	r0, #1
  401b20:	e797      	b.n	401a52 <_usb_d_dev_ep_trans+0x3e>
  401b22:	4b0e      	ldr	r3, [pc, #56]	; (401b5c <_usb_d_dev_ep_trans+0x148>)
  401b24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  401b28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  401b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401b30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  401b34:	3401      	adds	r4, #1
  401b36:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		_usb_d_dev_dma_next(ept);
  401b3a:	4805      	ldr	r0, [pc, #20]	; (401b50 <_usb_d_dev_ep_trans+0x13c>)
  401b3c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
  401b40:	4b07      	ldr	r3, [pc, #28]	; (401b60 <_usb_d_dev_ep_trans+0x14c>)
  401b42:	4798      	blx	r3
	return ERR_NONE;
  401b44:	2000      	movs	r0, #0
  401b46:	e784      	b.n	401a52 <_usb_d_dev_ep_trans+0x3e>
		return -USB_ERR_PARAM;
  401b48:	f06f 0011 	mvn.w	r0, #17
  401b4c:	e781      	b.n	401a52 <_usb_d_dev_ep_trans+0x3e>
  401b4e:	bf00      	nop
  401b50:	20400114 	.word	0x20400114
  401b54:	004003a1 	.word	0x004003a1
  401b58:	004003af 	.word	0x004003af
  401b5c:	40038000 	.word	0x40038000
  401b60:	00400ee5 	.word	0x00400ee5

00401b64 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  401b64:	4b06      	ldr	r3, [pc, #24]	; (401b80 <_usb_d_dev_register_callback+0x1c>)
  401b66:	2900      	cmp	r1, #0
  401b68:	bf08      	it	eq
  401b6a:	4619      	moveq	r1, r3

	if (type == USB_D_CB_EVENT) {
  401b6c:	2801      	cmp	r0, #1
  401b6e:	d003      	beq.n	401b78 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
  401b70:	b908      	cbnz	r0, 401b76 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
  401b72:	4b04      	ldr	r3, [pc, #16]	; (401b84 <_usb_d_dev_register_callback+0x20>)
  401b74:	6019      	str	r1, [r3, #0]
  401b76:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
  401b78:	4b02      	ldr	r3, [pc, #8]	; (401b84 <_usb_d_dev_register_callback+0x20>)
  401b7a:	6059      	str	r1, [r3, #4]
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop
  401b80:	00400df1 	.word	0x00400df1
  401b84:	20400114 	.word	0x20400114

00401b88 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  401b88:	4b09      	ldr	r3, [pc, #36]	; (401bb0 <_usb_d_dev_register_ep_callback+0x28>)
  401b8a:	2900      	cmp	r1, #0
  401b8c:	bf08      	it	eq
  401b8e:	4619      	moveq	r1, r3

	if (type == USB_D_DEV_EP_CB_SETUP) {
  401b90:	b120      	cbz	r0, 401b9c <_usb_d_dev_register_ep_callback+0x14>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  401b92:	2801      	cmp	r0, #1
  401b94:	d005      	beq.n	401ba2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  401b96:	2802      	cmp	r0, #2
  401b98:	d006      	beq.n	401ba8 <_usb_d_dev_register_ep_callback+0x20>
  401b9a:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  401b9c:	4b05      	ldr	r3, [pc, #20]	; (401bb4 <_usb_d_dev_register_ep_callback+0x2c>)
  401b9e:	6099      	str	r1, [r3, #8]
  401ba0:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  401ba2:	4b04      	ldr	r3, [pc, #16]	; (401bb4 <_usb_d_dev_register_ep_callback+0x2c>)
  401ba4:	60d9      	str	r1, [r3, #12]
  401ba6:	4770      	bx	lr
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  401ba8:	4b02      	ldr	r3, [pc, #8]	; (401bb4 <_usb_d_dev_register_ep_callback+0x2c>)
  401baa:	6119      	str	r1, [r3, #16]
	}
}
  401bac:	e7f5      	b.n	401b9a <_usb_d_dev_register_ep_callback+0x12>
  401bae:	bf00      	nop
  401bb0:	00400df1 	.word	0x00400df1
  401bb4:	20400114 	.word	0x20400114

00401bb8 <main>:
#include "./app/app.h"

uint8_t test_message[] = "testing...\n";

int main(void)
{
  401bb8:	b508      	push	{r3, lr}
	// Initializes MCU, drivers and middleware
	atmel_start_init();
  401bba:	4b08      	ldr	r3, [pc, #32]	; (401bdc <main+0x24>)
  401bbc:	4798      	blx	r3

    app_init();
  401bbe:	4b08      	ldr	r3, [pc, #32]	; (401be0 <main+0x28>)
  401bc0:	4798      	blx	r3

	// Replace with your application code
	while (1) 
    {
        cdcdf_acm_write(test_message, strlen((char *)test_message));
  401bc2:	4c08      	ldr	r4, [pc, #32]	; (401be4 <main+0x2c>)
  401bc4:	4e08      	ldr	r6, [pc, #32]	; (401be8 <main+0x30>)
  401bc6:	4d09      	ldr	r5, [pc, #36]	; (401bec <main+0x34>)
  401bc8:	4620      	mov	r0, r4
  401bca:	47b0      	blx	r6
  401bcc:	4601      	mov	r1, r0
  401bce:	4620      	mov	r0, r4
  401bd0:	47a8      	blx	r5
        delay_ms(1000);
  401bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401bd6:	4b06      	ldr	r3, [pc, #24]	; (401bf0 <main+0x38>)
  401bd8:	4798      	blx	r3
  401bda:	e7f5      	b.n	401bc8 <main+0x10>
  401bdc:	004001b1 	.word	0x004001b1
  401be0:	004001ad 	.word	0x004001ad
  401be4:	20400000 	.word	0x20400000
  401be8:	004026cf 	.word	0x004026cf
  401bec:	00401ebd 	.word	0x00401ebd
  401bf0:	004003d1 	.word	0x004003d1

00401bf4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  401bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bf6:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
  401bf8:	780b      	ldrb	r3, [r1, #0]
  401bfa:	f3c3 1441 	ubfx	r4, r3, #5, #2
  401bfe:	2c01      	cmp	r4, #1
  401c00:	d15e      	bne.n	401cc0 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
  401c02:	888c      	ldrh	r4, [r1, #4]
  401c04:	4d35      	ldr	r5, [pc, #212]	; (401cdc <cdcdf_acm_req+0xe8>)
  401c06:	782d      	ldrb	r5, [r5, #0]
  401c08:	42a5      	cmp	r5, r4
  401c0a:	d003      	beq.n	401c14 <cdcdf_acm_req+0x20>
  401c0c:	4d33      	ldr	r5, [pc, #204]	; (401cdc <cdcdf_acm_req+0xe8>)
  401c0e:	786d      	ldrb	r5, [r5, #1]
  401c10:	42a5      	cmp	r5, r4
  401c12:	d158      	bne.n	401cc6 <cdcdf_acm_req+0xd2>
  401c14:	4616      	mov	r6, r2
  401c16:	460c      	mov	r4, r1
  401c18:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
  401c1a:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c1e:	d10c      	bne.n	401c3a <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
  401c20:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
  401c22:	4b2f      	ldr	r3, [pc, #188]	; (401ce0 <cdcdf_acm_req+0xec>)
  401c24:	4798      	blx	r3
  401c26:	4601      	mov	r1, r0
	switch (req->bRequest) {
  401c28:	7863      	ldrb	r3, [r4, #1]
  401c2a:	2b20      	cmp	r3, #32
  401c2c:	d013      	beq.n	401c56 <cdcdf_acm_req+0x62>
  401c2e:	2b22      	cmp	r3, #34	; 0x22
  401c30:	d032      	beq.n	401c98 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
  401c32:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
  401c36:	b003      	add	sp, #12
  401c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
  401c3a:	2a01      	cmp	r2, #1
  401c3c:	d046      	beq.n	401ccc <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
  401c3e:	784b      	ldrb	r3, [r1, #1]
  401c40:	2b21      	cmp	r3, #33	; 0x21
  401c42:	d145      	bne.n	401cd0 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
  401c44:	88cb      	ldrh	r3, [r1, #6]
  401c46:	2b07      	cmp	r3, #7
  401c48:	d145      	bne.n	401cd6 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
  401c4a:	2300      	movs	r3, #0
  401c4c:	2207      	movs	r2, #7
  401c4e:	4925      	ldr	r1, [pc, #148]	; (401ce4 <cdcdf_acm_req+0xf0>)
  401c50:	4c25      	ldr	r4, [pc, #148]	; (401ce8 <cdcdf_acm_req+0xf4>)
  401c52:	47a0      	blx	r4
  401c54:	e7ef      	b.n	401c36 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
  401c56:	2f07      	cmp	r7, #7
  401c58:	d12b      	bne.n	401cb2 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
  401c5a:	b1be      	cbz	r6, 401c8c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
  401c5c:	6800      	ldr	r0, [r0, #0]
  401c5e:	9000      	str	r0, [sp, #0]
  401c60:	888a      	ldrh	r2, [r1, #4]
  401c62:	798b      	ldrb	r3, [r1, #6]
  401c64:	f8ad 2004 	strh.w	r2, [sp, #4]
  401c68:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
  401c6c:	4b1b      	ldr	r3, [pc, #108]	; (401cdc <cdcdf_acm_req+0xe8>)
  401c6e:	691b      	ldr	r3, [r3, #16]
  401c70:	b113      	cbz	r3, 401c78 <cdcdf_acm_req+0x84>
  401c72:	4668      	mov	r0, sp
  401c74:	4798      	blx	r3
  401c76:	b1f8      	cbz	r0, 401cb8 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
  401c78:	4b18      	ldr	r3, [pc, #96]	; (401cdc <cdcdf_acm_req+0xe8>)
  401c7a:	aa02      	add	r2, sp, #8
  401c7c:	e912 0003 	ldmdb	r2, {r0, r1}
  401c80:	6098      	str	r0, [r3, #8]
  401c82:	8199      	strh	r1, [r3, #12]
  401c84:	0c09      	lsrs	r1, r1, #16
  401c86:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
  401c88:	2000      	movs	r0, #0
  401c8a:	e7d4      	b.n	401c36 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
  401c8c:	2300      	movs	r3, #0
  401c8e:	2207      	movs	r2, #7
  401c90:	4628      	mov	r0, r5
  401c92:	4c15      	ldr	r4, [pc, #84]	; (401ce8 <cdcdf_acm_req+0xf4>)
  401c94:	47a0      	blx	r4
  401c96:	e7ce      	b.n	401c36 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
  401c98:	2300      	movs	r3, #0
  401c9a:	461a      	mov	r2, r3
  401c9c:	4619      	mov	r1, r3
  401c9e:	4618      	mov	r0, r3
  401ca0:	4d11      	ldr	r5, [pc, #68]	; (401ce8 <cdcdf_acm_req+0xf4>)
  401ca2:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
  401ca4:	4b0d      	ldr	r3, [pc, #52]	; (401cdc <cdcdf_acm_req+0xe8>)
  401ca6:	695b      	ldr	r3, [r3, #20]
  401ca8:	b143      	cbz	r3, 401cbc <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
  401caa:	8860      	ldrh	r0, [r4, #2]
  401cac:	4798      	blx	r3
		return ERR_NONE;
  401cae:	2000      	movs	r0, #0
  401cb0:	e7c1      	b.n	401c36 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
  401cb2:	f04f 30ff 	mov.w	r0, #4294967295
  401cb6:	e7be      	b.n	401c36 <cdcdf_acm_req+0x42>
			return ERR_NONE;
  401cb8:	2000      	movs	r0, #0
  401cba:	e7bc      	b.n	401c36 <cdcdf_acm_req+0x42>
		return ERR_NONE;
  401cbc:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
  401cbe:	e7ba      	b.n	401c36 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
  401cc0:	f06f 0009 	mvn.w	r0, #9
  401cc4:	e7b7      	b.n	401c36 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
  401cc6:	f06f 0009 	mvn.w	r0, #9
  401cca:	e7b4      	b.n	401c36 <cdcdf_acm_req+0x42>
		return ERR_NONE;
  401ccc:	2000      	movs	r0, #0
  401cce:	e7b2      	b.n	401c36 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
  401cd0:	f06f 000c 	mvn.w	r0, #12
  401cd4:	e7af      	b.n	401c36 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
  401cd6:	f04f 30ff 	mov.w	r0, #4294967295
  401cda:	e7ac      	b.n	401c36 <cdcdf_acm_req+0x42>
  401cdc:	20400178 	.word	0x20400178
  401ce0:	004024d5 	.word	0x004024d5
  401ce4:	20400180 	.word	0x20400180
  401ce8:	00402109 	.word	0x00402109

00401cec <cdcdf_acm_ctrl>:
{
  401cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cf0:	b083      	sub	sp, #12
  401cf2:	4616      	mov	r6, r2
	switch (ctrl) {
  401cf4:	2901      	cmp	r1, #1
  401cf6:	d06c      	beq.n	401dd2 <cdcdf_acm_ctrl+0xe6>
  401cf8:	b141      	cbz	r1, 401d0c <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
  401cfa:	2902      	cmp	r1, #2
  401cfc:	bf0c      	ite	eq
  401cfe:	f06f 001a 	mvneq.w	r0, #26
  401d02:	f06f 000c 	mvnne.w	r0, #12
}
  401d06:	b003      	add	sp, #12
  401d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifc = desc->sod;
  401d0c:	6813      	ldr	r3, [r2, #0]
		if (NULL == ifc) {
  401d0e:	2b00      	cmp	r3, #0
  401d10:	f000 808a 	beq.w	401e28 <cdcdf_acm_ctrl+0x13c>
		ifc_desc.bInterfaceNumber = ifc[2];
  401d14:	789a      	ldrb	r2, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
  401d16:	7959      	ldrb	r1, [r3, #5]
  401d18:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
  401d1c:	2902      	cmp	r1, #2
  401d1e:	f040 8086 	bne.w	401e2e <cdcdf_acm_ctrl+0x142>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
  401d22:	f8d0 a008 	ldr.w	sl, [r0, #8]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
  401d26:	f89a 1000 	ldrb.w	r1, [sl]
  401d2a:	428a      	cmp	r2, r1
  401d2c:	f000 8082 	beq.w	401e34 <cdcdf_acm_ctrl+0x148>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
  401d30:	29ff      	cmp	r1, #255	; 0xff
  401d32:	f040 8082 	bne.w	401e3a <cdcdf_acm_ctrl+0x14e>
  401d36:	46d3      	mov	fp, sl
  401d38:	f10a 0102 	add.w	r1, sl, #2
  401d3c:	9101      	str	r1, [sp, #4]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
  401d3e:	4f48      	ldr	r7, [pc, #288]	; (401e60 <cdcdf_acm_ctrl+0x174>)
				usb_d_ep_enable(func_data->func_ep_out);
  401d40:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401e70 <cdcdf_acm_ctrl+0x184>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
  401d44:	f8df 812c 	ldr.w	r8, [pc, #300]	; 401e74 <cdcdf_acm_ctrl+0x188>
  401d48:	4618      	mov	r0, r3
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
  401d4a:	f80b 2b01 	strb.w	r2, [fp], #1
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
  401d4e:	2205      	movs	r2, #5
  401d50:	6871      	ldr	r1, [r6, #4]
  401d52:	4b44      	ldr	r3, [pc, #272]	; (401e64 <cdcdf_acm_ctrl+0x178>)
  401d54:	4798      	blx	r3
		while (NULL != ep) {
  401d56:	4604      	mov	r4, r0
  401d58:	b1d8      	cbz	r0, 401d92 <cdcdf_acm_ctrl+0xa6>
			ep_desc.bEndpointAddress = ep[2];
  401d5a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
  401d5c:	7963      	ldrb	r3, [r4, #5]
  401d5e:	7922      	ldrb	r2, [r4, #4]
  401d60:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
  401d64:	b292      	uxth	r2, r2
  401d66:	78e1      	ldrb	r1, [r4, #3]
  401d68:	4628      	mov	r0, r5
  401d6a:	47b8      	blx	r7
  401d6c:	2800      	cmp	r0, #0
  401d6e:	d170      	bne.n	401e52 <cdcdf_acm_ctrl+0x166>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
  401d70:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
  401d74:	bf14      	ite	ne
  401d76:	f88b 5001 	strbne.w	r5, [fp, #1]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
  401d7a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
  401d7e:	4628      	mov	r0, r5
  401d80:	47c8      	blx	r9
			desc->sod = ep;
  401d82:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
  401d84:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
  401d86:	6871      	ldr	r1, [r6, #4]
  401d88:	4420      	add	r0, r4
  401d8a:	47c0      	blx	r8
		while (NULL != ep) {
  401d8c:	4604      	mov	r4, r0
  401d8e:	2800      	cmp	r0, #0
  401d90:	d1e3      	bne.n	401d5a <cdcdf_acm_ctrl+0x6e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
  401d92:	6833      	ldr	r3, [r6, #0]
  401d94:	7818      	ldrb	r0, [r3, #0]
  401d96:	2204      	movs	r2, #4
  401d98:	6871      	ldr	r1, [r6, #4]
  401d9a:	4418      	add	r0, r3
  401d9c:	4b31      	ldr	r3, [pc, #196]	; (401e64 <cdcdf_acm_ctrl+0x178>)
  401d9e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
  401da0:	9b01      	ldr	r3, [sp, #4]
  401da2:	455b      	cmp	r3, fp
  401da4:	d010      	beq.n	401dc8 <cdcdf_acm_ctrl+0xdc>
		if (NULL == ifc) {
  401da6:	2800      	cmp	r0, #0
  401da8:	d04a      	beq.n	401e40 <cdcdf_acm_ctrl+0x154>
		ifc_desc.bInterfaceNumber = ifc[2];
  401daa:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
  401dac:	7943      	ldrb	r3, [r0, #5]
  401dae:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  401db2:	2b02      	cmp	r3, #2
  401db4:	d147      	bne.n	401e46 <cdcdf_acm_ctrl+0x15a>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
  401db6:	f89b 3000 	ldrb.w	r3, [fp]
  401dba:	429a      	cmp	r2, r3
  401dbc:	d046      	beq.n	401e4c <cdcdf_acm_ctrl+0x160>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
  401dbe:	2bff      	cmp	r3, #255	; 0xff
  401dc0:	d0c3      	beq.n	401d4a <cdcdf_acm_ctrl+0x5e>
				return ERR_NO_RESOURCE;
  401dc2:	f06f 001b 	mvn.w	r0, #27
  401dc6:	e79e      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
  401dc8:	2201      	movs	r2, #1
  401dca:	4b27      	ldr	r3, [pc, #156]	; (401e68 <cdcdf_acm_ctrl+0x17c>)
  401dcc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
  401dce:	2000      	movs	r0, #0
  401dd0:	e799      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
  401dd2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
  401dd4:	b12a      	cbz	r2, 401de2 <cdcdf_acm_ctrl+0xf6>
		ifc_desc.bInterfaceClass = desc->sod[5];
  401dd6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
  401dd8:	795b      	ldrb	r3, [r3, #5]
  401dda:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  401dde:	2b02      	cmp	r3, #2
  401de0:	d13a      	bne.n	401e58 <cdcdf_acm_ctrl+0x16c>
		if (func_data->func_iface[i] == 0xFF) {
  401de2:	7823      	ldrb	r3, [r4, #0]
  401de4:	2bff      	cmp	r3, #255	; 0xff
  401de6:	d008      	beq.n	401dfa <cdcdf_acm_ctrl+0x10e>
			func_data->func_iface[i] = 0xFF;
  401de8:	23ff      	movs	r3, #255	; 0xff
  401dea:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
  401dec:	78a0      	ldrb	r0, [r4, #2]
  401dee:	4298      	cmp	r0, r3
  401df0:	d003      	beq.n	401dfa <cdcdf_acm_ctrl+0x10e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
  401df2:	4b1e      	ldr	r3, [pc, #120]	; (401e6c <cdcdf_acm_ctrl+0x180>)
  401df4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
  401df6:	23ff      	movs	r3, #255	; 0xff
  401df8:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
  401dfa:	7863      	ldrb	r3, [r4, #1]
  401dfc:	2bff      	cmp	r3, #255	; 0xff
  401dfe:	d008      	beq.n	401e12 <cdcdf_acm_ctrl+0x126>
			func_data->func_iface[i] = 0xFF;
  401e00:	23ff      	movs	r3, #255	; 0xff
  401e02:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
  401e04:	78e0      	ldrb	r0, [r4, #3]
  401e06:	4298      	cmp	r0, r3
  401e08:	d003      	beq.n	401e12 <cdcdf_acm_ctrl+0x126>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
  401e0a:	4b18      	ldr	r3, [pc, #96]	; (401e6c <cdcdf_acm_ctrl+0x180>)
  401e0c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
  401e0e:	23ff      	movs	r3, #255	; 0xff
  401e10:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
  401e12:	7920      	ldrb	r0, [r4, #4]
  401e14:	28ff      	cmp	r0, #255	; 0xff
  401e16:	d003      	beq.n	401e20 <cdcdf_acm_ctrl+0x134>
		usb_d_ep_deinit(func_data->func_ep_out);
  401e18:	4b14      	ldr	r3, [pc, #80]	; (401e6c <cdcdf_acm_ctrl+0x180>)
  401e1a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
  401e1c:	23ff      	movs	r3, #255	; 0xff
  401e1e:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
  401e20:	2000      	movs	r0, #0
  401e22:	4b11      	ldr	r3, [pc, #68]	; (401e68 <cdcdf_acm_ctrl+0x17c>)
  401e24:	7158      	strb	r0, [r3, #5]
  401e26:	e76e      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
  401e28:	f06f 0009 	mvn.w	r0, #9
  401e2c:	e76b      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
  401e2e:	f06f 0009 	mvn.w	r0, #9
  401e32:	e768      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
  401e34:	f06f 0011 	mvn.w	r0, #17
  401e38:	e765      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
  401e3a:	f06f 001b 	mvn.w	r0, #27
  401e3e:	e762      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
  401e40:	f06f 0009 	mvn.w	r0, #9
  401e44:	e75f      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
  401e46:	f06f 0009 	mvn.w	r0, #9
  401e4a:	e75c      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
  401e4c:	f06f 0011 	mvn.w	r0, #17
  401e50:	e759      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
  401e52:	f06f 0013 	mvn.w	r0, #19
  401e56:	e756      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
  401e58:	f06f 0009 	mvn.w	r0, #9
  401e5c:	e753      	b.n	401d06 <cdcdf_acm_ctrl+0x1a>
  401e5e:	bf00      	nop
  401e60:	004007e5 	.word	0x004007e5
  401e64:	004024f5 	.word	0x004024f5
  401e68:	20400178 	.word	0x20400178
  401e6c:	0040084d 	.word	0x0040084d
  401e70:	00400879 	.word	0x00400879
  401e74:	0040252f 	.word	0x0040252f

00401e78 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
  401e78:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
  401e7a:	4b0a      	ldr	r3, [pc, #40]	; (401ea4 <cdcdf_acm_init+0x2c>)
  401e7c:	4798      	blx	r3
  401e7e:	2801      	cmp	r0, #1
  401e80:	d80c      	bhi.n	401e9c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
  401e82:	4809      	ldr	r0, [pc, #36]	; (401ea8 <cdcdf_acm_init+0x30>)
  401e84:	4b09      	ldr	r3, [pc, #36]	; (401eac <cdcdf_acm_init+0x34>)
  401e86:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
  401e88:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
  401e8a:	3018      	adds	r0, #24
  401e8c:	4b08      	ldr	r3, [pc, #32]	; (401eb0 <cdcdf_acm_init+0x38>)
  401e8e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
  401e90:	4908      	ldr	r1, [pc, #32]	; (401eb4 <cdcdf_acm_init+0x3c>)
  401e92:	2001      	movs	r0, #1
  401e94:	4b08      	ldr	r3, [pc, #32]	; (401eb8 <cdcdf_acm_init+0x40>)
  401e96:	4798      	blx	r3
	return ERR_NONE;
  401e98:	2000      	movs	r0, #0
  401e9a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
  401e9c:	f06f 0010 	mvn.w	r0, #16
}
  401ea0:	bd08      	pop	{r3, pc}
  401ea2:	bf00      	nop
  401ea4:	004024e1 	.word	0x004024e1
  401ea8:	20400178 	.word	0x20400178
  401eac:	00401ced 	.word	0x00401ced
  401eb0:	00402481 	.word	0x00402481
  401eb4:	2040000c 	.word	0x2040000c
  401eb8:	004023ed 	.word	0x004023ed

00401ebc <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
  401ebc:	4b07      	ldr	r3, [pc, #28]	; (401edc <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
  401ebe:	795b      	ldrb	r3, [r3, #5]
  401ec0:	b143      	cbz	r3, 401ed4 <cdcdf_acm_write+0x18>
{
  401ec2:	b510      	push	{r4, lr}
  401ec4:	460a      	mov	r2, r1
  401ec6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
  401ec8:	2301      	movs	r3, #1
  401eca:	4804      	ldr	r0, [pc, #16]	; (401edc <cdcdf_acm_write+0x20>)
  401ecc:	78c0      	ldrb	r0, [r0, #3]
  401ece:	4c04      	ldr	r4, [pc, #16]	; (401ee0 <cdcdf_acm_write+0x24>)
  401ed0:	47a0      	blx	r4
  401ed2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401ed4:	f06f 0010 	mvn.w	r0, #16
  401ed8:	4770      	bx	lr
  401eda:	bf00      	nop
  401edc:	20400178 	.word	0x20400178
  401ee0:	00402109 	.word	0x00402109

00401ee4 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
  401ee4:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  401ee6:	4b07      	ldr	r3, [pc, #28]	; (401f04 <usbdc_unconfig+0x20>)
  401ee8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
  401eea:	b14c      	cbz	r4, 401f00 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
  401eec:	2600      	movs	r6, #0
  401eee:	2501      	movs	r5, #1
  401ef0:	6863      	ldr	r3, [r4, #4]
  401ef2:	4632      	mov	r2, r6
  401ef4:	4629      	mov	r1, r5
  401ef6:	4620      	mov	r0, r4
  401ef8:	4798      	blx	r3
		func = func->next;
  401efa:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
  401efc:	2c00      	cmp	r4, #0
  401efe:	d1f7      	bne.n	401ef0 <usbdc_unconfig+0xc>
  401f00:	bd70      	pop	{r4, r5, r6, pc}
  401f02:	bf00      	nop
  401f04:	2040019c 	.word	0x2040019c

00401f08 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
  401f08:	b570      	push	{r4, r5, r6, lr}
  401f0a:	4606      	mov	r6, r0
  401f0c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
  401f0e:	4b07      	ldr	r3, [pc, #28]	; (401f2c <usbdc_change_notify+0x24>)
  401f10:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
  401f12:	b91c      	cbnz	r4, 401f1c <usbdc_change_notify+0x14>
  401f14:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
  401f16:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
  401f18:	2c00      	cmp	r4, #0
  401f1a:	d0fb      	beq.n	401f14 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
  401f1c:	6863      	ldr	r3, [r4, #4]
  401f1e:	2b00      	cmp	r3, #0
  401f20:	d0f9      	beq.n	401f16 <usbdc_change_notify+0xe>
			cg->cb(change, value);
  401f22:	4629      	mov	r1, r5
  401f24:	4630      	mov	r0, r6
  401f26:	4798      	blx	r3
  401f28:	e7f5      	b.n	401f16 <usbdc_change_notify+0xe>
  401f2a:	bf00      	nop
  401f2c:	2040019c 	.word	0x2040019c

00401f30 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static bool usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  401f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f32:	4607      	mov	r7, r0
  401f34:	460e      	mov	r6, r1
  401f36:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
  401f38:	4b0b      	ldr	r3, [pc, #44]	; (401f68 <usbdc_request_handler+0x38>)
  401f3a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
  401f3c:	b91c      	cbnz	r4, 401f46 <usbdc_request_handler+0x16>
				return false;
			}
		}
		h = h->next;
	}
	return false;
  401f3e:	2000      	movs	r0, #0
  401f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
  401f42:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
  401f44:	b164      	cbz	r4, 401f60 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
  401f46:	6863      	ldr	r3, [r4, #4]
  401f48:	2b00      	cmp	r3, #0
  401f4a:	d0fa      	beq.n	401f42 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
  401f4c:	462a      	mov	r2, r5
  401f4e:	4631      	mov	r1, r6
  401f50:	4638      	mov	r0, r7
  401f52:	4798      	blx	r3
			if (0 == rc) {
  401f54:	b130      	cbz	r0, 401f64 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
  401f56:	f110 0f0a 	cmn.w	r0, #10
  401f5a:	d0f2      	beq.n	401f42 <usbdc_request_handler+0x12>
				return false;
  401f5c:	2000      	movs	r0, #0
}
  401f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
  401f60:	2000      	movs	r0, #0
  401f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
  401f64:	2001      	movs	r0, #1
  401f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f68:	2040019c 	.word	0x2040019c

00401f6c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
  401f6c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
  401f6e:	4b06      	ldr	r3, [pc, #24]	; (401f88 <usbd_sof_cb+0x1c>)
  401f70:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
  401f72:	b91c      	cbnz	r4, 401f7c <usbd_sof_cb+0x10>
  401f74:	bd10      	pop	{r4, pc}
		sof = sof->next;
  401f76:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
  401f78:	2c00      	cmp	r4, #0
  401f7a:	d0fb      	beq.n	401f74 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
  401f7c:	6863      	ldr	r3, [r4, #4]
  401f7e:	2b00      	cmp	r3, #0
  401f80:	d0f9      	beq.n	401f76 <usbd_sof_cb+0xa>
			sof->cb();
  401f82:	4798      	blx	r3
  401f84:	e7f7      	b.n	401f76 <usbd_sof_cb+0xa>
  401f86:	bf00      	nop
  401f88:	2040019c 	.word	0x2040019c

00401f8c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
  401f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f90:	b083      	sub	sp, #12
  401f92:	4616      	mov	r6, r2
	(void)ep;

	switch (code) {
  401f94:	b129      	cbz	r1, 401fa2 <usbdc_cb_ctl_done+0x16>
  401f96:	2901      	cmp	r1, #1
  401f98:	d065      	beq.n	402066 <usbdc_cb_ctl_done+0xda>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
  401f9a:	2000      	movs	r0, #0
  401f9c:	b003      	add	sp, #12
  401f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
  401fa2:	7853      	ldrb	r3, [r2, #1]
  401fa4:	2b05      	cmp	r3, #5
  401fa6:	d04f      	beq.n	402048 <usbdc_cb_ctl_done+0xbc>
  401fa8:	2b09      	cmp	r3, #9
  401faa:	d1f6      	bne.n	401f9a <usbdc_cb_ctl_done+0xe>
		usbdc.cfg_value = req->wValue;
  401fac:	8852      	ldrh	r2, [r2, #2]
  401fae:	b2d2      	uxtb	r2, r2
  401fb0:	4b30      	ldr	r3, [pc, #192]	; (402074 <usbdc_cb_ctl_done+0xe8>)
  401fb2:	76da      	strb	r2, [r3, #27]
	if (usbdc.cfg_value == 0) {
  401fb4:	b962      	cbnz	r2, 401fd0 <usbdc_cb_ctl_done+0x44>
		usbdc_unconfig();
  401fb6:	4b30      	ldr	r3, [pc, #192]	; (402078 <usbdc_cb_ctl_done+0xec>)
  401fb8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
  401fba:	8873      	ldrh	r3, [r6, #2]
  401fbc:	2b00      	cmp	r3, #0
  401fbe:	bf14      	ite	ne
  401fc0:	2104      	movne	r1, #4
  401fc2:	2103      	moveq	r1, #3
  401fc4:	4b2b      	ldr	r3, [pc, #172]	; (402074 <usbdc_cb_ctl_done+0xe8>)
  401fc6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
  401fc8:	2001      	movs	r0, #1
  401fca:	4b2c      	ldr	r3, [pc, #176]	; (40207c <usbdc_cb_ctl_done+0xf0>)
  401fcc:	4798      	blx	r3
  401fce:	e7e4      	b.n	401f9a <usbdc_cb_ctl_done+0xe>
	cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
  401fd0:	4b28      	ldr	r3, [pc, #160]	; (402074 <usbdc_cb_ctl_done+0xe8>)
  401fd2:	681b      	ldr	r3, [r3, #0]
  401fd4:	6859      	ldr	r1, [r3, #4]
  401fd6:	6818      	ldr	r0, [r3, #0]
  401fd8:	4b29      	ldr	r3, [pc, #164]	; (402080 <usbdc_cb_ctl_done+0xf4>)
  401fda:	4798      	blx	r3
	if (NULL == cfg_desc) {
  401fdc:	2800      	cmp	r0, #0
  401fde:	d0ec      	beq.n	401fba <usbdc_cb_ctl_done+0x2e>
	return (ptr[0] + (ptr[1] << 8));
  401fe0:	78c2      	ldrb	r2, [r0, #3]
  401fe2:	7881      	ldrb	r1, [r0, #2]
  401fe4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
  401fe8:	fa10 f181 	uxtah	r1, r0, r1
  401fec:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
  401fee:	2204      	movs	r2, #4
  401ff0:	4b24      	ldr	r3, [pc, #144]	; (402084 <usbdc_cb_ctl_done+0xf8>)
  401ff2:	4798      	blx	r3
  401ff4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
  401ff6:	2800      	cmp	r0, #0
  401ff8:	d0df      	beq.n	401fba <usbdc_cb_ctl_done+0x2e>
  401ffa:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
  401ffc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 402074 <usbdc_cb_ctl_done+0xe8>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  402000:	4f20      	ldr	r7, [pc, #128]	; (402084 <usbdc_cb_ctl_done+0xf8>)
  402002:	e00c      	b.n	40201e <usbdc_cb_ctl_done+0x92>
			last_iface = desc.sod[2];
  402004:	464c      	mov	r4, r9
  402006:	e000      	b.n	40200a <usbdc_cb_ctl_done+0x7e>
  402008:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
  40200a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
  40200c:	7803      	ldrb	r3, [r0, #0]
  40200e:	4418      	add	r0, r3
  402010:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  402012:	2204      	movs	r2, #4
  402014:	9901      	ldr	r1, [sp, #4]
  402016:	47b8      	blx	r7
  402018:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
  40201a:	2800      	cmp	r0, #0
  40201c:	d0cd      	beq.n	401fba <usbdc_cb_ctl_done+0x2e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
  40201e:	f890 9002 	ldrb.w	r9, [r0, #2]
  402022:	45a1      	cmp	r9, r4
  402024:	d0f1      	beq.n	40200a <usbdc_cb_ctl_done+0x7e>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
  402026:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
  40202a:	2c00      	cmp	r4, #0
  40202c:	d0ea      	beq.n	402004 <usbdc_cb_ctl_done+0x78>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
  40202e:	2500      	movs	r5, #0
  402030:	6863      	ldr	r3, [r4, #4]
  402032:	466a      	mov	r2, sp
  402034:	4629      	mov	r1, r5
  402036:	4620      	mov	r0, r4
  402038:	4798      	blx	r3
  40203a:	2800      	cmp	r0, #0
  40203c:	d0e4      	beq.n	402008 <usbdc_cb_ctl_done+0x7c>
					func = func->next;
  40203e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
  402040:	2c00      	cmp	r4, #0
  402042:	d1f5      	bne.n	402030 <usbdc_cb_ctl_done+0xa4>
			last_iface = desc.sod[2];
  402044:	464c      	mov	r4, r9
  402046:	e7e0      	b.n	40200a <usbdc_cb_ctl_done+0x7e>
		usbdc_set_address(req->wValue);
  402048:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
  40204a:	b2c0      	uxtb	r0, r0
  40204c:	4b0e      	ldr	r3, [pc, #56]	; (402088 <usbdc_cb_ctl_done+0xfc>)
  40204e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
  402050:	8873      	ldrh	r3, [r6, #2]
  402052:	2b00      	cmp	r3, #0
  402054:	bf14      	ite	ne
  402056:	2103      	movne	r1, #3
  402058:	2102      	moveq	r1, #2
  40205a:	4b06      	ldr	r3, [pc, #24]	; (402074 <usbdc_cb_ctl_done+0xe8>)
  40205c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
  40205e:	2001      	movs	r0, #1
  402060:	4b06      	ldr	r3, [pc, #24]	; (40207c <usbdc_cb_ctl_done+0xf0>)
  402062:	4798      	blx	r3
  402064:	e799      	b.n	401f9a <usbdc_cb_ctl_done+0xe>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
  402066:	2201      	movs	r2, #1
  402068:	4631      	mov	r1, r6
  40206a:	2000      	movs	r0, #0
  40206c:	4b07      	ldr	r3, [pc, #28]	; (40208c <usbdc_cb_ctl_done+0x100>)
  40206e:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
  402070:	e793      	b.n	401f9a <usbdc_cb_ctl_done+0xe>
  402072:	bf00      	nop
  402074:	2040019c 	.word	0x2040019c
  402078:	00401ee5 	.word	0x00401ee5
  40207c:	00401f09 	.word	0x00401f09
  402080:	00402575 	.word	0x00402575
  402084:	004024f5 	.word	0x004024f5
  402088:	004007d9 	.word	0x004007d9
  40208c:	00401f31 	.word	0x00401f31

00402090 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
  402090:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
  402092:	4b0d      	ldr	r3, [pc, #52]	; (4020c8 <usbdc_reset+0x38>)
  402094:	4798      	blx	r3

	usbdc.state     = USBD_S_DEFAULT;
  402096:	4d0d      	ldr	r5, [pc, #52]	; (4020cc <usbdc_reset+0x3c>)
  402098:	2602      	movs	r6, #2
  40209a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value = 0;
  40209c:	2400      	movs	r4, #0
  40209e:	76ec      	strb	r4, [r5, #27]

	// Setup EP0
	usb_d_ep_deinit(0);
  4020a0:	4620      	mov	r0, r4
  4020a2:	4b0b      	ldr	r3, [pc, #44]	; (4020d0 <usbdc_reset+0x40>)
  4020a4:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
  4020a6:	7f28      	ldrb	r0, [r5, #28]
  4020a8:	4b0a      	ldr	r3, [pc, #40]	; (4020d4 <usbdc_reset+0x44>)
  4020aa:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
  4020ac:	4a0a      	ldr	r2, [pc, #40]	; (4020d8 <usbdc_reset+0x48>)
  4020ae:	4621      	mov	r1, r4
  4020b0:	4620      	mov	r0, r4
  4020b2:	4d0a      	ldr	r5, [pc, #40]	; (4020dc <usbdc_reset+0x4c>)
  4020b4:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
  4020b6:	4a0a      	ldr	r2, [pc, #40]	; (4020e0 <usbdc_reset+0x50>)
  4020b8:	4631      	mov	r1, r6
  4020ba:	4620      	mov	r0, r4
  4020bc:	47a8      	blx	r5
	usb_d_ep_enable(0);
  4020be:	4620      	mov	r0, r4
  4020c0:	4b08      	ldr	r3, [pc, #32]	; (4020e4 <usbdc_reset+0x54>)
  4020c2:	4798      	blx	r3
  4020c4:	bd70      	pop	{r4, r5, r6, pc}
  4020c6:	bf00      	nop
  4020c8:	00401ee5 	.word	0x00401ee5
  4020cc:	2040019c 	.word	0x2040019c
  4020d0:	0040084d 	.word	0x0040084d
  4020d4:	00400839 	.word	0x00400839
  4020d8:	00402129 	.word	0x00402129
  4020dc:	00400a49 	.word	0x00400a49
  4020e0:	00401f8d 	.word	0x00401f8d
  4020e4:	00400879 	.word	0x00400879

004020e8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
  4020e8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
  4020ea:	b110      	cbz	r0, 4020f2 <usbd_event_cb+0xa>
  4020ec:	2801      	cmp	r0, #1
  4020ee:	d004      	beq.n	4020fa <usbd_event_cb+0x12>
  4020f0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
  4020f2:	2000      	movs	r0, #0
  4020f4:	4b02      	ldr	r3, [pc, #8]	; (402100 <usbd_event_cb+0x18>)
  4020f6:	4798      	blx	r3
		break;
  4020f8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
  4020fa:	4b02      	ldr	r3, [pc, #8]	; (402104 <usbd_event_cb+0x1c>)
  4020fc:	4798      	blx	r3
  4020fe:	bd08      	pop	{r3, pc}
  402100:	00401f09 	.word	0x00401f09
  402104:	00402091 	.word	0x00402091

00402108 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
  402108:	b500      	push	{lr}
  40210a:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
  40210c:	9101      	str	r1, [sp, #4]
  40210e:	9202      	str	r2, [sp, #8]
  402110:	f88d 000c 	strb.w	r0, [sp, #12]
  402114:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
  402118:	a801      	add	r0, sp, #4
  40211a:	4b02      	ldr	r3, [pc, #8]	; (402124 <usbdc_xfer+0x1c>)
  40211c:	4798      	blx	r3
}
  40211e:	b005      	add	sp, #20
  402120:	f85d fb04 	ldr.w	pc, [sp], #4
  402124:	004008c5 	.word	0x004008c5

00402128 <usbdc_cb_ctl_req>:
{
  402128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40212c:	b082      	sub	sp, #8
  40212e:	4606      	mov	r6, r0
  402130:	460c      	mov	r4, r1
	if (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
  402132:	2200      	movs	r2, #0
  402134:	4ba6      	ldr	r3, [pc, #664]	; (4023d0 <usbdc_cb_ctl_req+0x2a8>)
  402136:	4798      	blx	r3
  402138:	4605      	mov	r5, r0
  40213a:	b930      	cbnz	r0, 40214a <usbdc_cb_ctl_req+0x22>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
  40213c:	7823      	ldrb	r3, [r4, #0]
  40213e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
  402142:	d006      	beq.n	402152 <usbdc_cb_ctl_req+0x2a>
  402144:	2a80      	cmp	r2, #128	; 0x80
  402146:	f000 8089 	beq.w	40225c <usbdc_cb_ctl_req+0x134>
}
  40214a:	4628      	mov	r0, r5
  40214c:	b002      	add	sp, #8
  40214e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
  402152:	7862      	ldrb	r2, [r4, #1]
  402154:	3a01      	subs	r2, #1
  402156:	2a0a      	cmp	r2, #10
  402158:	d8f7      	bhi.n	40214a <usbdc_cb_ctl_req+0x22>
  40215a:	a101      	add	r1, pc, #4	; (adr r1, 402160 <usbdc_cb_ctl_req+0x38>)
  40215c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  402160:	004021a1 	.word	0x004021a1
  402164:	0040214b 	.word	0x0040214b
  402168:	004021bd 	.word	0x004021bd
  40216c:	0040214b 	.word	0x0040214b
  402170:	0040218d 	.word	0x0040218d
  402174:	0040214b 	.word	0x0040214b
  402178:	0040214b 	.word	0x0040214b
  40217c:	0040214b 	.word	0x0040214b
  402180:	0040218d 	.word	0x0040218d
  402184:	0040214b 	.word	0x0040214b
  402188:	004021d9 	.word	0x004021d9
		if (ERR_NONE == usbdc_xfer(ep, NULL, 0, true)) {
  40218c:	2301      	movs	r3, #1
  40218e:	2200      	movs	r2, #0
  402190:	4611      	mov	r1, r2
  402192:	4630      	mov	r0, r6
  402194:	4c8f      	ldr	r4, [pc, #572]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  402196:	47a0      	blx	r4
  402198:	fab0 f580 	clz	r5, r0
  40219c:	096d      	lsrs	r5, r5, #5
  40219e:	e7d4      	b.n	40214a <usbdc_cb_ctl_req+0x22>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  4021a0:	f003 031f 	and.w	r3, r3, #31
  4021a4:	2b02      	cmp	r3, #2
  4021a6:	d1d0      	bne.n	40214a <usbdc_cb_ctl_req+0x22>
		if (req->wLength != 0) {
  4021a8:	88e3      	ldrh	r3, [r4, #6]
  4021aa:	2b00      	cmp	r3, #0
  4021ac:	d1cd      	bne.n	40214a <usbdc_cb_ctl_req+0x22>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
  4021ae:	88a0      	ldrh	r0, [r4, #4]
  4021b0:	2100      	movs	r1, #0
  4021b2:	b2c0      	uxtb	r0, r0
  4021b4:	4b88      	ldr	r3, [pc, #544]	; (4023d8 <usbdc_cb_ctl_req+0x2b0>)
  4021b6:	4798      	blx	r3
		return true;
  4021b8:	2501      	movs	r5, #1
  4021ba:	e7c6      	b.n	40214a <usbdc_cb_ctl_req+0x22>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  4021bc:	f003 031f 	and.w	r3, r3, #31
  4021c0:	2b02      	cmp	r3, #2
  4021c2:	d1c2      	bne.n	40214a <usbdc_cb_ctl_req+0x22>
		if (req->wLength != 0) {
  4021c4:	88e3      	ldrh	r3, [r4, #6]
  4021c6:	2b00      	cmp	r3, #0
  4021c8:	d1bf      	bne.n	40214a <usbdc_cb_ctl_req+0x22>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
  4021ca:	88a0      	ldrh	r0, [r4, #4]
  4021cc:	2101      	movs	r1, #1
  4021ce:	b2c0      	uxtb	r0, r0
  4021d0:	4b81      	ldr	r3, [pc, #516]	; (4023d8 <usbdc_cb_ctl_req+0x2b0>)
  4021d2:	4798      	blx	r3
		return true;
  4021d4:	2501      	movs	r5, #1
  4021d6:	e7b8      	b.n	40214a <usbdc_cb_ctl_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
  4021d8:	8867      	ldrh	r7, [r4, #2]
  4021da:	88a4      	ldrh	r4, [r4, #4]
	desc.sod = usbdc.desces.ls_fs->sod;
  4021dc:	4b7f      	ldr	r3, [pc, #508]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	6818      	ldr	r0, [r3, #0]
  4021e2:	9000      	str	r0, [sp, #0]
	desc.eod = usbdc.desces.ls_fs->eod;
  4021e4:	6859      	ldr	r1, [r3, #4]
  4021e6:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
  4021e8:	2204      	movs	r2, #4
  4021ea:	4b7d      	ldr	r3, [pc, #500]	; (4023e0 <usbdc_cb_ctl_req+0x2b8>)
  4021ec:	4798      	blx	r3
  4021ee:	4603      	mov	r3, r0
  4021f0:	2800      	cmp	r0, #0
  4021f2:	d0aa      	beq.n	40214a <usbdc_cb_ctl_req+0x22>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  4021f4:	f04f 0804 	mov.w	r8, #4
  4021f8:	4e79      	ldr	r6, [pc, #484]	; (4023e0 <usbdc_cb_ctl_req+0x2b8>)
  4021fa:	e009      	b.n	402210 <usbdc_cb_ctl_req+0xe8>
		desc.sod = usb_desc_next(desc.sod);
  4021fc:	9800      	ldr	r0, [sp, #0]
  4021fe:	7803      	ldrb	r3, [r0, #0]
  402200:	4418      	add	r0, r3
  402202:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  402204:	4642      	mov	r2, r8
  402206:	9901      	ldr	r1, [sp, #4]
  402208:	47b0      	blx	r6
		if (NULL == ifc) {
  40220a:	4603      	mov	r3, r0
  40220c:	2800      	cmp	r0, #0
  40220e:	d09c      	beq.n	40214a <usbdc_cb_ctl_req+0x22>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
  402210:	789a      	ldrb	r2, [r3, #2]
  402212:	42a2      	cmp	r2, r4
  402214:	d1f2      	bne.n	4021fc <usbdc_cb_ctl_req+0xd4>
  402216:	78da      	ldrb	r2, [r3, #3]
  402218:	42ba      	cmp	r2, r7
  40221a:	d1ef      	bne.n	4021fc <usbdc_cb_ctl_req+0xd4>
	desc.sod = ifc;
  40221c:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
  40221e:	4b6f      	ldr	r3, [pc, #444]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  402220:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
  402222:	2c00      	cmp	r4, #0
  402224:	d091      	beq.n	40214a <usbdc_cb_ctl_req+0x22>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
  402226:	2601      	movs	r6, #1
  402228:	6863      	ldr	r3, [r4, #4]
  40222a:	466a      	mov	r2, sp
  40222c:	4631      	mov	r1, r6
  40222e:	4620      	mov	r0, r4
  402230:	4798      	blx	r3
  402232:	b118      	cbz	r0, 40223c <usbdc_cb_ctl_req+0x114>
			func = func->next;
  402234:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
  402236:	2c00      	cmp	r4, #0
  402238:	d1f6      	bne.n	402228 <usbdc_cb_ctl_req+0x100>
  40223a:	e786      	b.n	40214a <usbdc_cb_ctl_req+0x22>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
  40223c:	6863      	ldr	r3, [r4, #4]
  40223e:	466a      	mov	r2, sp
  402240:	2100      	movs	r1, #0
  402242:	4620      	mov	r0, r4
  402244:	4798      	blx	r3
  402246:	2800      	cmp	r0, #0
  402248:	f47f af7f 	bne.w	40214a <usbdc_cb_ctl_req+0x22>
			usbdc_xfer(0, NULL, 0, 0);
  40224c:	2300      	movs	r3, #0
  40224e:	461a      	mov	r2, r3
  402250:	4619      	mov	r1, r3
  402252:	4618      	mov	r0, r3
  402254:	4c5f      	ldr	r4, [pc, #380]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  402256:	47a0      	blx	r4
			return true;
  402258:	2501      	movs	r5, #1
  40225a:	e776      	b.n	40214a <usbdc_cb_ctl_req+0x22>
	switch (req->bRequest) {
  40225c:	7862      	ldrb	r2, [r4, #1]
  40225e:	2a0a      	cmp	r2, #10
  402260:	f63f af73 	bhi.w	40214a <usbdc_cb_ctl_req+0x22>
  402264:	a101      	add	r1, pc, #4	; (adr r1, 40226c <usbdc_cb_ctl_req+0x144>)
  402266:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  40226a:	bf00      	nop
  40226c:	00402353 	.word	0x00402353
  402270:	0040214b 	.word	0x0040214b
  402274:	0040214b 	.word	0x0040214b
  402278:	0040214b 	.word	0x0040214b
  40227c:	0040214b 	.word	0x0040214b
  402280:	0040214b 	.word	0x0040214b
  402284:	00402299 	.word	0x00402299
  402288:	0040214b 	.word	0x0040214b
  40228c:	0040233b 	.word	0x0040233b
  402290:	0040214b 	.word	0x0040214b
  402294:	00402397 	.word	0x00402397
	uint16_t length   = req->wLength;
  402298:	88e7      	ldrh	r7, [r4, #6]
	uint8_t  type     = (uint8_t)(req->wValue >> 8);
  40229a:	8863      	ldrh	r3, [r4, #2]
	uint8_t  index    = req->wValue & 0x00FF;
  40229c:	b2da      	uxtb	r2, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  40229e:	494f      	ldr	r1, [pc, #316]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  4022a0:	7f09      	ldrb	r1, [r1, #28]
  4022a2:	3901      	subs	r1, #1
  4022a4:	4239      	tst	r1, r7
  4022a6:	bf0c      	ite	eq
  4022a8:	2401      	moveq	r4, #1
  4022aa:	2400      	movne	r4, #0
	switch (type) {
  4022ac:	0a1b      	lsrs	r3, r3, #8
  4022ae:	2b02      	cmp	r3, #2
  4022b0:	d011      	beq.n	4022d6 <usbdc_cb_ctl_req+0x1ae>
  4022b2:	2b03      	cmp	r3, #3
  4022b4:	d02b      	beq.n	40230e <usbdc_cb_ctl_req+0x1e6>
  4022b6:	2b01      	cmp	r3, #1
  4022b8:	f47f af47 	bne.w	40214a <usbdc_cb_ctl_req+0x22>
		usbdc_xfer(ep, usbdc.desces.ls_fs->sod, length, false);
  4022bc:	4b47      	ldr	r3, [pc, #284]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  4022be:	6819      	ldr	r1, [r3, #0]
  4022c0:	2300      	movs	r3, #0
  4022c2:	463a      	mov	r2, r7
  4022c4:	2f12      	cmp	r7, #18
  4022c6:	bf28      	it	cs
  4022c8:	2212      	movcs	r2, #18
  4022ca:	6809      	ldr	r1, [r1, #0]
  4022cc:	4630      	mov	r0, r6
  4022ce:	4c41      	ldr	r4, [pc, #260]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  4022d0:	47a0      	blx	r4
		return true;
  4022d2:	2501      	movs	r5, #1
  4022d4:	e739      	b.n	40214a <usbdc_cb_ctl_req+0x22>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
  4022d6:	4b41      	ldr	r3, [pc, #260]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  4022d8:	681b      	ldr	r3, [r3, #0]
  4022da:	3201      	adds	r2, #1
  4022dc:	b2d2      	uxtb	r2, r2
  4022de:	6859      	ldr	r1, [r3, #4]
  4022e0:	6818      	ldr	r0, [r3, #0]
  4022e2:	4b40      	ldr	r3, [pc, #256]	; (4023e4 <usbdc_cb_ctl_req+0x2bc>)
  4022e4:	4798      	blx	r3
		if (NULL == cfg_desc) {
  4022e6:	4601      	mov	r1, r0
  4022e8:	2800      	cmp	r0, #0
  4022ea:	f43f af2e 	beq.w	40214a <usbdc_cb_ctl_req+0x22>
	return (ptr[0] + (ptr[1] << 8));
  4022ee:	78c2      	ldrb	r2, [r0, #3]
  4022f0:	7883      	ldrb	r3, [r0, #2]
  4022f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4022f6:	b29b      	uxth	r3, r3
		if (length <= total_len) {
  4022f8:	429f      	cmp	r7, r3
  4022fa:	d901      	bls.n	402300 <usbdc_cb_ctl_req+0x1d8>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  4022fc:	4625      	mov	r5, r4
			length = total_len;
  4022fe:	461f      	mov	r7, r3
		usbdc_xfer(ep, cfg_desc, length, need_zlp);
  402300:	462b      	mov	r3, r5
  402302:	463a      	mov	r2, r7
  402304:	4630      	mov	r0, r6
  402306:	4c33      	ldr	r4, [pc, #204]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  402308:	47a0      	blx	r4
		return true;
  40230a:	2501      	movs	r5, #1
  40230c:	e71d      	b.n	40214a <usbdc_cb_ctl_req+0x22>
		str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
  40230e:	4b33      	ldr	r3, [pc, #204]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  402310:	681b      	ldr	r3, [r3, #0]
  402312:	6859      	ldr	r1, [r3, #4]
  402314:	6818      	ldr	r0, [r3, #0]
  402316:	4b34      	ldr	r3, [pc, #208]	; (4023e8 <usbdc_cb_ctl_req+0x2c0>)
  402318:	4798      	blx	r3
		if (NULL == str_desc) {
  40231a:	4601      	mov	r1, r0
  40231c:	2800      	cmp	r0, #0
  40231e:	f43f af14 	beq.w	40214a <usbdc_cb_ctl_req+0x22>
		total_len = str_desc[0];
  402322:	7803      	ldrb	r3, [r0, #0]
		if (length <= total_len) {
  402324:	429f      	cmp	r7, r3
  402326:	d901      	bls.n	40232c <usbdc_cb_ctl_req+0x204>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  402328:	4625      	mov	r5, r4
			length = total_len;
  40232a:	461f      	mov	r7, r3
		usbdc_xfer(ep, str_desc, length, need_zlp);
  40232c:	462b      	mov	r3, r5
  40232e:	463a      	mov	r2, r7
  402330:	4630      	mov	r0, r6
  402332:	4c28      	ldr	r4, [pc, #160]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  402334:	47a0      	blx	r4
		return true;
  402336:	2501      	movs	r5, #1
  402338:	e707      	b.n	40214a <usbdc_cb_ctl_req+0x22>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
  40233a:	4928      	ldr	r1, [pc, #160]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  40233c:	694b      	ldr	r3, [r1, #20]
  40233e:	7eca      	ldrb	r2, [r1, #27]
  402340:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
  402342:	2300      	movs	r3, #0
  402344:	2201      	movs	r2, #1
  402346:	6949      	ldr	r1, [r1, #20]
  402348:	4630      	mov	r0, r6
  40234a:	4c22      	ldr	r4, [pc, #136]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  40234c:	47a0      	blx	r4
		return true;
  40234e:	2501      	movs	r5, #1
  402350:	e6fb      	b.n	40214a <usbdc_cb_ctl_req+0x22>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  402352:	f003 031f 	and.w	r3, r3, #31
  402356:	2b01      	cmp	r3, #1
  402358:	d90e      	bls.n	402378 <usbdc_cb_ctl_req+0x250>
  40235a:	2b02      	cmp	r3, #2
  40235c:	f47f aef5 	bne.w	40214a <usbdc_cb_ctl_req+0x22>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
  402360:	88a0      	ldrh	r0, [r4, #4]
  402362:	2102      	movs	r1, #2
  402364:	b2c0      	uxtb	r0, r0
  402366:	4b1c      	ldr	r3, [pc, #112]	; (4023d8 <usbdc_cb_ctl_req+0x2b0>)
  402368:	4798      	blx	r3
		if (st < 0) {
  40236a:	2800      	cmp	r0, #0
  40236c:	f6ff aeed 	blt.w	40214a <usbdc_cb_ctl_req+0x22>
		st = st & 0x1;
  402370:	f000 0001 	and.w	r0, r0, #1
  402374:	9000      	str	r0, [sp, #0]
  402376:	e001      	b.n	40237c <usbdc_cb_ctl_req+0x254>
		st = 0;
  402378:	2300      	movs	r3, #0
  40237a:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
  40237c:	4917      	ldr	r1, [pc, #92]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  40237e:	694b      	ldr	r3, [r1, #20]
  402380:	f8bd 2000 	ldrh.w	r2, [sp]
  402384:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
  402386:	2300      	movs	r3, #0
  402388:	2202      	movs	r2, #2
  40238a:	6949      	ldr	r1, [r1, #20]
  40238c:	4630      	mov	r0, r6
  40238e:	4c11      	ldr	r4, [pc, #68]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  402390:	47a0      	blx	r4
	return true;
  402392:	2501      	movs	r5, #1
  402394:	e6d9      	b.n	40214a <usbdc_cb_ctl_req+0x22>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  402396:	4b11      	ldr	r3, [pc, #68]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  402398:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
  40239a:	2e00      	cmp	r6, #0
  40239c:	f43f aed5 	beq.w	40214a <usbdc_cb_ctl_req+0x22>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
  4023a0:	2702      	movs	r7, #2
  4023a2:	6873      	ldr	r3, [r6, #4]
  4023a4:	4622      	mov	r2, r4
  4023a6:	4639      	mov	r1, r7
  4023a8:	4630      	mov	r0, r6
  4023aa:	4798      	blx	r3
  4023ac:	2800      	cmp	r0, #0
  4023ae:	da03      	bge.n	4023b8 <usbdc_cb_ctl_req+0x290>
			func = func->next;
  4023b0:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
  4023b2:	2e00      	cmp	r6, #0
  4023b4:	d1f5      	bne.n	4023a2 <usbdc_cb_ctl_req+0x27a>
  4023b6:	e6c8      	b.n	40214a <usbdc_cb_ctl_req+0x22>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
  4023b8:	4908      	ldr	r1, [pc, #32]	; (4023dc <usbdc_cb_ctl_req+0x2b4>)
  4023ba:	694b      	ldr	r3, [r1, #20]
  4023bc:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
  4023be:	2300      	movs	r3, #0
  4023c0:	2201      	movs	r2, #1
  4023c2:	6949      	ldr	r1, [r1, #20]
  4023c4:	4618      	mov	r0, r3
  4023c6:	4c03      	ldr	r4, [pc, #12]	; (4023d4 <usbdc_cb_ctl_req+0x2ac>)
  4023c8:	47a0      	blx	r4
			return true;
  4023ca:	2501      	movs	r5, #1
  4023cc:	e6bd      	b.n	40214a <usbdc_cb_ctl_req+0x22>
  4023ce:	bf00      	nop
  4023d0:	00401f31 	.word	0x00401f31
  4023d4:	00402109 	.word	0x00402109
  4023d8:	004009e5 	.word	0x004009e5
  4023dc:	2040019c 	.word	0x2040019c
  4023e0:	004024f5 	.word	0x004024f5
  4023e4:	00402575 	.word	0x00402575
  4023e8:	004025dd 	.word	0x004025dd

004023ec <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
  4023ec:	b508      	push	{r3, lr}
	switch (type) {
  4023ee:	2801      	cmp	r0, #1
  4023f0:	d007      	beq.n	402402 <usbdc_register_handler+0x16>
  4023f2:	b110      	cbz	r0, 4023fa <usbdc_register_handler+0xe>
  4023f4:	2802      	cmp	r0, #2
  4023f6:	d008      	beq.n	40240a <usbdc_register_handler+0x1e>
  4023f8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
  4023fa:	4806      	ldr	r0, [pc, #24]	; (402414 <usbdc_register_handler+0x28>)
  4023fc:	4b06      	ldr	r3, [pc, #24]	; (402418 <usbdc_register_handler+0x2c>)
  4023fe:	4798      	blx	r3
		break;
  402400:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
  402402:	4806      	ldr	r0, [pc, #24]	; (40241c <usbdc_register_handler+0x30>)
  402404:	4b04      	ldr	r3, [pc, #16]	; (402418 <usbdc_register_handler+0x2c>)
  402406:	4798      	blx	r3
		break;
  402408:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
  40240a:	4805      	ldr	r0, [pc, #20]	; (402420 <usbdc_register_handler+0x34>)
  40240c:	4b02      	ldr	r3, [pc, #8]	; (402418 <usbdc_register_handler+0x2c>)
  40240e:	4798      	blx	r3
  402410:	bd08      	pop	{r3, pc}
  402412:	bf00      	nop
  402414:	204001a0 	.word	0x204001a0
  402418:	00400abd 	.word	0x00400abd
  40241c:	204001a4 	.word	0x204001a4
  402420:	204001a8 	.word	0x204001a8

00402424 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
  402424:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
  402426:	4605      	mov	r5, r0
  402428:	f240 2299 	movw	r2, #665	; 0x299
  40242c:	490c      	ldr	r1, [pc, #48]	; (402460 <usbdc_init+0x3c>)
  40242e:	3000      	adds	r0, #0
  402430:	bf18      	it	ne
  402432:	2001      	movne	r0, #1
  402434:	4b0b      	ldr	r3, [pc, #44]	; (402464 <usbdc_init+0x40>)
  402436:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
  402438:	4b0b      	ldr	r3, [pc, #44]	; (402468 <usbdc_init+0x44>)
  40243a:	4798      	blx	r3
	if (rc < 0) {
  40243c:	2800      	cmp	r0, #0
  40243e:	db0e      	blt.n	40245e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
  402440:	4c0a      	ldr	r4, [pc, #40]	; (40246c <usbdc_init+0x48>)
  402442:	2220      	movs	r2, #32
  402444:	2100      	movs	r1, #0
  402446:	4620      	mov	r0, r4
  402448:	4b09      	ldr	r3, [pc, #36]	; (402470 <usbdc_init+0x4c>)
  40244a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
  40244c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
  40244e:	4909      	ldr	r1, [pc, #36]	; (402474 <usbdc_init+0x50>)
  402450:	2000      	movs	r0, #0
  402452:	4c09      	ldr	r4, [pc, #36]	; (402478 <usbdc_init+0x54>)
  402454:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
  402456:	4909      	ldr	r1, [pc, #36]	; (40247c <usbdc_init+0x58>)
  402458:	2001      	movs	r0, #1
  40245a:	47a0      	blx	r4

	return 0;
  40245c:	2000      	movs	r0, #0
}
  40245e:	bd38      	pop	{r3, r4, r5, pc}
  402460:	00402750 	.word	0x00402750
  402464:	00400a95 	.word	0x00400a95
  402468:	0040074d 	.word	0x0040074d
  40246c:	2040019c 	.word	0x2040019c
  402470:	004026bf 	.word	0x004026bf
  402474:	00401f6d 	.word	0x00401f6d
  402478:	004007b5 	.word	0x004007b5
  40247c:	004020e9 	.word	0x004020e9

00402480 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
  402480:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
  402482:	4601      	mov	r1, r0
  402484:	4801      	ldr	r0, [pc, #4]	; (40248c <usbdc_register_function+0xc>)
  402486:	4b02      	ldr	r3, [pc, #8]	; (402490 <usbdc_register_function+0x10>)
  402488:	4798      	blx	r3
  40248a:	bd08      	pop	{r3, pc}
  40248c:	204001ac 	.word	0x204001ac
  402490:	00400abd 	.word	0x00400abd

00402494 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
  402494:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
  402496:	4b0a      	ldr	r3, [pc, #40]	; (4024c0 <usbdc_start+0x2c>)
  402498:	7e9b      	ldrb	r3, [r3, #26]
  40249a:	b95b      	cbnz	r3, 4024b4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
  40249c:	b168      	cbz	r0, 4024ba <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
  40249e:	4b08      	ldr	r3, [pc, #32]	; (4024c0 <usbdc_start+0x2c>)
  4024a0:	6018      	str	r0, [r3, #0]
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
  4024a2:	6802      	ldr	r2, [r0, #0]
  4024a4:	79d2      	ldrb	r2, [r2, #7]
  4024a6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
  4024a8:	2201      	movs	r2, #1
  4024aa:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
  4024ac:	4b05      	ldr	r3, [pc, #20]	; (4024c4 <usbdc_start+0x30>)
  4024ae:	4798      	blx	r3
	return ERR_NONE;
  4024b0:	2000      	movs	r0, #0
  4024b2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
  4024b4:	f06f 0003 	mvn.w	r0, #3
  4024b8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
  4024ba:	f06f 0008 	mvn.w	r0, #8
}
  4024be:	bd08      	pop	{r3, pc}
  4024c0:	2040019c 	.word	0x2040019c
  4024c4:	004007c1 	.word	0x004007c1

004024c8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
  4024c8:	b508      	push	{r3, lr}
	usb_d_attach();
  4024ca:	4b01      	ldr	r3, [pc, #4]	; (4024d0 <usbdc_attach+0x8>)
  4024cc:	4798      	blx	r3
  4024ce:	bd08      	pop	{r3, pc}
  4024d0:	004007cd 	.word	0x004007cd

004024d4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
  4024d4:	4b01      	ldr	r3, [pc, #4]	; (4024dc <usbdc_get_ctrl_buffer+0x8>)
  4024d6:	6958      	ldr	r0, [r3, #20]
  4024d8:	4770      	bx	lr
  4024da:	bf00      	nop
  4024dc:	2040019c 	.word	0x2040019c

004024e0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
  4024e0:	4b03      	ldr	r3, [pc, #12]	; (4024f0 <usbdc_get_state+0x10>)
  4024e2:	7e98      	ldrb	r0, [r3, #26]
  4024e4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
  4024e8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
  4024ea:	bf18      	it	ne
  4024ec:	2010      	movne	r0, #16
  4024ee:	4770      	bx	lr
  4024f0:	2040019c 	.word	0x2040019c

004024f4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
  4024f4:	4288      	cmp	r0, r1
  4024f6:	d214      	bcs.n	402522 <usb_find_desc+0x2e>
	return desc[0];
  4024f8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
  4024fa:	2b01      	cmp	r3, #1
  4024fc:	d913      	bls.n	402526 <usb_find_desc+0x32>
{
  4024fe:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
  402500:	7844      	ldrb	r4, [r0, #1]
  402502:	4294      	cmp	r4, r2
  402504:	d00a      	beq.n	40251c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
  402506:	4418      	add	r0, r3
	while (desc < eof) {
  402508:	4281      	cmp	r1, r0
  40250a:	d906      	bls.n	40251a <usb_find_desc+0x26>
	return desc[0];
  40250c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
  40250e:	2b01      	cmp	r3, #1
  402510:	d90b      	bls.n	40252a <usb_find_desc+0x36>
	return desc[1];
  402512:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
  402514:	4294      	cmp	r4, r2
  402516:	d1f6      	bne.n	402506 <usb_find_desc+0x12>
  402518:	e000      	b.n	40251c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
  40251a:	2000      	movs	r0, #0
}
  40251c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402520:	4770      	bx	lr
	return NULL;
  402522:	2000      	movs	r0, #0
  402524:	4770      	bx	lr
		_desc_len_check();
  402526:	2000      	movs	r0, #0
  402528:	4770      	bx	lr
  40252a:	2000      	movs	r0, #0
  40252c:	e7f6      	b.n	40251c <usb_find_desc+0x28>

0040252e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
  40252e:	4288      	cmp	r0, r1
  402530:	d216      	bcs.n	402560 <usb_find_ep_desc+0x32>
	return desc[0];
  402532:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
  402534:	2b01      	cmp	r3, #1
  402536:	d915      	bls.n	402564 <usb_find_ep_desc+0x36>
	return desc[1];
  402538:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
  40253a:	2a04      	cmp	r2, #4
  40253c:	d014      	beq.n	402568 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
  40253e:	2a05      	cmp	r2, #5
  402540:	d00b      	beq.n	40255a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
  402542:	4418      	add	r0, r3
	while (desc < eof) {
  402544:	4281      	cmp	r1, r0
  402546:	d909      	bls.n	40255c <usb_find_ep_desc+0x2e>
	return desc[0];
  402548:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
  40254a:	2b01      	cmp	r3, #1
  40254c:	d90e      	bls.n	40256c <usb_find_ep_desc+0x3e>
	return desc[1];
  40254e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
  402550:	2a04      	cmp	r2, #4
  402552:	d00d      	beq.n	402570 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
  402554:	2a05      	cmp	r2, #5
  402556:	d1f4      	bne.n	402542 <usb_find_ep_desc+0x14>
  402558:	e00b      	b.n	402572 <usb_find_ep_desc+0x44>
  40255a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
  40255c:	2000      	movs	r0, #0
  40255e:	4770      	bx	lr
  402560:	2000      	movs	r0, #0
  402562:	4770      	bx	lr
		_desc_len_check();
  402564:	2000      	movs	r0, #0
  402566:	4770      	bx	lr
	return NULL;
  402568:	2000      	movs	r0, #0
  40256a:	4770      	bx	lr
		_desc_len_check();
  40256c:	2000      	movs	r0, #0
  40256e:	4770      	bx	lr
	return NULL;
  402570:	2000      	movs	r0, #0
}
  402572:	4770      	bx	lr

00402574 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
  402574:	b538      	push	{r3, r4, r5, lr}
  402576:	460c      	mov	r4, r1
  402578:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
  40257a:	2202      	movs	r2, #2
  40257c:	4b16      	ldr	r3, [pc, #88]	; (4025d8 <usb_find_cfg_desc+0x64>)
  40257e:	4798      	blx	r3
	if (!desc) {
  402580:	4603      	mov	r3, r0
  402582:	b1e8      	cbz	r0, 4025c0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
  402584:	4284      	cmp	r4, r0
  402586:	d91d      	bls.n	4025c4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
  402588:	7802      	ldrb	r2, [r0, #0]
  40258a:	2a01      	cmp	r2, #1
  40258c:	d91c      	bls.n	4025c8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
  40258e:	7842      	ldrb	r2, [r0, #1]
  402590:	2a02      	cmp	r2, #2
  402592:	d11b      	bne.n	4025cc <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
  402594:	7942      	ldrb	r2, [r0, #5]
  402596:	42aa      	cmp	r2, r5
  402598:	d012      	beq.n	4025c0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
  40259a:	78d9      	ldrb	r1, [r3, #3]
  40259c:	789a      	ldrb	r2, [r3, #2]
  40259e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
  4025a2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
  4025a6:	429c      	cmp	r4, r3
  4025a8:	d909      	bls.n	4025be <usb_find_cfg_desc+0x4a>
		_desc_len_check();
  4025aa:	781a      	ldrb	r2, [r3, #0]
  4025ac:	2a01      	cmp	r2, #1
  4025ae:	d90f      	bls.n	4025d0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
  4025b0:	785a      	ldrb	r2, [r3, #1]
  4025b2:	2a02      	cmp	r2, #2
  4025b4:	d10e      	bne.n	4025d4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
  4025b6:	795a      	ldrb	r2, [r3, #5]
  4025b8:	42aa      	cmp	r2, r5
  4025ba:	d1ee      	bne.n	40259a <usb_find_cfg_desc+0x26>
  4025bc:	e000      	b.n	4025c0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
  4025be:	2300      	movs	r3, #0
}
  4025c0:	4618      	mov	r0, r3
  4025c2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
  4025c4:	2300      	movs	r3, #0
  4025c6:	e7fb      	b.n	4025c0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
  4025c8:	2300      	movs	r3, #0
  4025ca:	e7f9      	b.n	4025c0 <usb_find_cfg_desc+0x4c>
	return NULL;
  4025cc:	2300      	movs	r3, #0
  4025ce:	e7f7      	b.n	4025c0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
  4025d0:	2300      	movs	r3, #0
  4025d2:	e7f5      	b.n	4025c0 <usb_find_cfg_desc+0x4c>
	return NULL;
  4025d4:	2300      	movs	r3, #0
  4025d6:	e7f3      	b.n	4025c0 <usb_find_cfg_desc+0x4c>
  4025d8:	004024f5 	.word	0x004024f5

004025dc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
  4025dc:	4288      	cmp	r0, r1
  4025de:	d217      	bcs.n	402610 <usb_find_str_desc+0x34>
{
  4025e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025e4:	460d      	mov	r5, r1
  4025e6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
  4025e8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
  4025ea:	f04f 0803 	mov.w	r8, #3
  4025ee:	4f0c      	ldr	r7, [pc, #48]	; (402620 <usb_find_str_desc+0x44>)
  4025f0:	4642      	mov	r2, r8
  4025f2:	4629      	mov	r1, r5
  4025f4:	47b8      	blx	r7
		if (desc) {
  4025f6:	4603      	mov	r3, r0
  4025f8:	b170      	cbz	r0, 402618 <usb_find_str_desc+0x3c>
	return desc[0];
  4025fa:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
  4025fc:	2801      	cmp	r0, #1
  4025fe:	d90a      	bls.n	402616 <usb_find_str_desc+0x3a>
			if (i == str_index) {
  402600:	42a6      	cmp	r6, r4
  402602:	d009      	beq.n	402618 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
  402604:	4418      	add	r0, r3
  402606:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
  402608:	4285      	cmp	r5, r0
  40260a:	d8f1      	bhi.n	4025f0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
  40260c:	2300      	movs	r3, #0
  40260e:	e003      	b.n	402618 <usb_find_str_desc+0x3c>
  402610:	2300      	movs	r3, #0
}
  402612:	4618      	mov	r0, r3
  402614:	4770      	bx	lr
			_desc_len_check();
  402616:	2300      	movs	r3, #0
}
  402618:	4618      	mov	r0, r3
  40261a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40261e:	bf00      	nop
  402620:	004024f5 	.word	0x004024f5

00402624 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
  402624:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
  402626:	4805      	ldr	r0, [pc, #20]	; (40263c <cdc_device_acm_init+0x18>)
  402628:	4b05      	ldr	r3, [pc, #20]	; (402640 <cdc_device_acm_init+0x1c>)
  40262a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
  40262c:	4b05      	ldr	r3, [pc, #20]	; (402644 <cdc_device_acm_init+0x20>)
  40262e:	4798      	blx	r3

	usbdc_start(&single_desc);
  402630:	4805      	ldr	r0, [pc, #20]	; (402648 <cdc_device_acm_init+0x24>)
  402632:	4b06      	ldr	r3, [pc, #24]	; (40264c <cdc_device_acm_init+0x28>)
  402634:	4798      	blx	r3
	usbdc_attach();
  402636:	4b06      	ldr	r3, [pc, #24]	; (402650 <cdc_device_acm_init+0x2c>)
  402638:	4798      	blx	r3
  40263a:	bd08      	pop	{r3, pc}
  40263c:	204001fc 	.word	0x204001fc
  402640:	00402425 	.word	0x00402425
  402644:	00401e79 	.word	0x00401e79
  402648:	20400014 	.word	0x20400014
  40264c:	00402495 	.word	0x00402495
  402650:	004024c9 	.word	0x004024c9

00402654 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
  402654:	b508      	push	{r3, lr}

	cdc_device_acm_init();
  402656:	4b01      	ldr	r3, [pc, #4]	; (40265c <usb_init+0x8>)
  402658:	4798      	blx	r3
  40265a:	bd08      	pop	{r3, pc}
  40265c:	00402625 	.word	0x00402625

00402660 <__libc_init_array>:
  402660:	b570      	push	{r4, r5, r6, lr}
  402662:	4e0d      	ldr	r6, [pc, #52]	; (402698 <__libc_init_array+0x38>)
  402664:	4c0d      	ldr	r4, [pc, #52]	; (40269c <__libc_init_array+0x3c>)
  402666:	1ba4      	subs	r4, r4, r6
  402668:	10a4      	asrs	r4, r4, #2
  40266a:	2500      	movs	r5, #0
  40266c:	42a5      	cmp	r5, r4
  40266e:	d109      	bne.n	402684 <__libc_init_array+0x24>
  402670:	4e0b      	ldr	r6, [pc, #44]	; (4026a0 <__libc_init_array+0x40>)
  402672:	4c0c      	ldr	r4, [pc, #48]	; (4026a4 <__libc_init_array+0x44>)
  402674:	f000 f878 	bl	402768 <_init>
  402678:	1ba4      	subs	r4, r4, r6
  40267a:	10a4      	asrs	r4, r4, #2
  40267c:	2500      	movs	r5, #0
  40267e:	42a5      	cmp	r5, r4
  402680:	d105      	bne.n	40268e <__libc_init_array+0x2e>
  402682:	bd70      	pop	{r4, r5, r6, pc}
  402684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402688:	4798      	blx	r3
  40268a:	3501      	adds	r5, #1
  40268c:	e7ee      	b.n	40266c <__libc_init_array+0xc>
  40268e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402692:	4798      	blx	r3
  402694:	3501      	adds	r5, #1
  402696:	e7f2      	b.n	40267e <__libc_init_array+0x1e>
  402698:	00402774 	.word	0x00402774
  40269c:	00402774 	.word	0x00402774
  4026a0:	00402774 	.word	0x00402774
  4026a4:	00402778 	.word	0x00402778

004026a8 <memcpy>:
  4026a8:	b510      	push	{r4, lr}
  4026aa:	1e43      	subs	r3, r0, #1
  4026ac:	440a      	add	r2, r1
  4026ae:	4291      	cmp	r1, r2
  4026b0:	d100      	bne.n	4026b4 <memcpy+0xc>
  4026b2:	bd10      	pop	{r4, pc}
  4026b4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4026b8:	f803 4f01 	strb.w	r4, [r3, #1]!
  4026bc:	e7f7      	b.n	4026ae <memcpy+0x6>

004026be <memset>:
  4026be:	4402      	add	r2, r0
  4026c0:	4603      	mov	r3, r0
  4026c2:	4293      	cmp	r3, r2
  4026c4:	d100      	bne.n	4026c8 <memset+0xa>
  4026c6:	4770      	bx	lr
  4026c8:	f803 1b01 	strb.w	r1, [r3], #1
  4026cc:	e7f9      	b.n	4026c2 <memset+0x4>

004026ce <strlen>:
  4026ce:	4603      	mov	r3, r0
  4026d0:	f813 2b01 	ldrb.w	r2, [r3], #1
  4026d4:	2a00      	cmp	r2, #0
  4026d6:	d1fb      	bne.n	4026d0 <strlen+0x2>
  4026d8:	1a18      	subs	r0, r3, r0
  4026da:	3801      	subs	r0, #1
  4026dc:	4770      	bx	lr
  4026de:	0000      	movs	r0, r0
  4026e0:	682f2e2e 	.word	0x682f2e2e
  4026e4:	732f6c61 	.word	0x732f6c61
  4026e8:	682f6372 	.word	0x682f6372
  4026ec:	735f6c61 	.word	0x735f6c61
  4026f0:	6d5f6970 	.word	0x6d5f6970
  4026f4:	6e79735f 	.word	0x6e79735f
  4026f8:	00632e63 	.word	0x00632e63
  4026fc:	682f2e2e 	.word	0x682f2e2e
  402700:	752f6c61 	.word	0x752f6c61
  402704:	736c6974 	.word	0x736c6974
  402708:	6372732f 	.word	0x6372732f
  40270c:	6974752f 	.word	0x6974752f
  402710:	6c5f736c 	.word	0x6c5f736c
  402714:	2e747369 	.word	0x2e747369
  402718:	00000063 	.word	0x00000063
  40271c:	682f2e2e 	.word	0x682f2e2e
  402720:	732f6c70 	.word	0x732f6c70
  402724:	682f6970 	.word	0x682f6970
  402728:	735f6c70 	.word	0x735f6c70
  40272c:	632e6970 	.word	0x632e6970
  402730:	00000000 	.word	0x00000000
  402734:	682f2e2e 	.word	0x682f2e2e
  402738:	752f6c70 	.word	0x752f6c70
  40273c:	73686273 	.word	0x73686273
  402740:	6c70682f 	.word	0x6c70682f
  402744:	6273755f 	.word	0x6273755f
  402748:	632e7368 	.word	0x632e7368
  40274c:	00000000 	.word	0x00000000
  402750:	752f2e2e 	.word	0x752f2e2e
  402754:	642f6273 	.word	0x642f6273
  402758:	63697665 	.word	0x63697665
  40275c:	73752f65 	.word	0x73752f65
  402760:	2e636462 	.word	0x2e636462
  402764:	00000063 	.word	0x00000063

00402768 <_init>:
  402768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40276a:	bf00      	nop
  40276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40276e:	bc08      	pop	{r3}
  402770:	469e      	mov	lr, r3
  402772:	4770      	bx	lr

00402774 <__init_array_start>:
  402774:	00400165 	.word	0x00400165

00402778 <_fini>:
  402778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40277a:	bf00      	nop
  40277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40277e:	bc08      	pop	{r3}
  402780:	469e      	mov	lr, r3
  402782:	4770      	bx	lr

00402784 <__fini_array_start>:
  402784:	00400141 	.word	0x00400141
