
FritzRT_Bringup0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001020  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011020  2**0
                  CONTENTS
  2 .bss          00000060  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  20000060  20000060  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024980  00000000  00000000  000110a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029e2  00000000  00000000  00035a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d2b5  00000000  00000000  00038403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000890  00000000  00000000  000456b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003ac0  00000000  00000000  00045f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006033  00000000  00000000  00049a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e853  00000000  00000000  0004fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00077cff  00000000  00000000  0005e28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001750  00000000  00000000  000d5f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     ` . %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	dd 0e 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 8d 0e 00 00     !...!...!.......
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	00001020 	.word	0x00001020

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	00001020 	.word	0x00001020
     10c:	00001020 	.word	0x00001020
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000002b1 	.word	0x000002b1

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
     122:	46c0      	nop			; (mov r8, r8)

00000124 <Reset_Handler>:
        if (pSrc != pDest) {
     124:	4925      	ldr	r1, [pc, #148]	; (1bc <Reset_Handler+0x98>)
     126:	4826      	ldr	r0, [pc, #152]	; (1c0 <Reset_Handler+0x9c>)
{
     128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12a:	4281      	cmp	r1, r0
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
     12e:	4b25      	ldr	r3, [pc, #148]	; (1c4 <Reset_Handler+0xa0>)
     130:	4298      	cmp	r0, r3
     132:	d206      	bcs.n	142 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
     134:	43c2      	mvns	r2, r0
     136:	18d2      	adds	r2, r2, r3
     138:	0892      	lsrs	r2, r2, #2
     13a:	3201      	adds	r2, #1
     13c:	0092      	lsls	r2, r2, #2
     13e:	4b22      	ldr	r3, [pc, #136]	; (1c8 <Reset_Handler+0xa4>)
     140:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
     142:	4822      	ldr	r0, [pc, #136]	; (1cc <Reset_Handler+0xa8>)
     144:	4b22      	ldr	r3, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     146:	4298      	cmp	r0, r3
     148:	d207      	bcs.n	15a <Reset_Handler+0x36>
                *pDest++ = 0;
     14a:	43c2      	mvns	r2, r0
     14c:	18d2      	adds	r2, r2, r3
     14e:	0892      	lsrs	r2, r2, #2
     150:	3201      	adds	r2, #1
     152:	0092      	lsls	r2, r2, #2
     154:	2100      	movs	r1, #0
     156:	4b1f      	ldr	r3, [pc, #124]	; (1d4 <Reset_Handler+0xb0>)
     158:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     15a:	21ff      	movs	r1, #255	; 0xff
     15c:	4b1e      	ldr	r3, [pc, #120]	; (1d8 <Reset_Handler+0xb4>)
     15e:	4a1f      	ldr	r2, [pc, #124]	; (1dc <Reset_Handler+0xb8>)
     160:	438b      	bics	r3, r1
     162:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     164:	2390      	movs	r3, #144	; 0x90
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	2503      	movs	r5, #3
     168:	2402      	movs	r4, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     16a:	270c      	movs	r7, #12
     16c:	2608      	movs	r6, #8
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	4a1c      	ldr	r2, [pc, #112]	; (1e0 <Reset_Handler+0xbc>)
     170:	39fd      	subs	r1, #253	; 0xfd
     172:	005b      	lsls	r3, r3, #1
     174:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     176:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xc0>)
     178:	78d3      	ldrb	r3, [r2, #3]
     17a:	43ab      	bics	r3, r5
     17c:	4323      	orrs	r3, r4
     17e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     180:	78d3      	ldrb	r3, [r2, #3]
     182:	43bb      	bics	r3, r7
     184:	4333      	orrs	r3, r6
     186:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     188:	2230      	movs	r2, #48	; 0x30
     18a:	4b17      	ldr	r3, [pc, #92]	; (1e8 <Reset_Handler+0xc4>)
     18c:	7b98      	ldrb	r0, [r3, #14]
     18e:	4390      	bics	r0, r2
     190:	2220      	movs	r2, #32
     192:	4310      	orrs	r0, r2
     194:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     196:	7b99      	ldrb	r1, [r3, #14]
     198:	43b9      	bics	r1, r7
     19a:	4331      	orrs	r1, r6
     19c:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	2180      	movs	r1, #128	; 0x80
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a0:	7b9a      	ldrb	r2, [r3, #14]
     1a2:	43aa      	bics	r2, r5
     1a4:	4322      	orrs	r2, r4
     1a6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1a8:	4a10      	ldr	r2, [pc, #64]	; (1ec <Reset_Handler+0xc8>)
     1aa:	6853      	ldr	r3, [r2, #4]
     1ac:	430b      	orrs	r3, r1
     1ae:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b0:	4b0f      	ldr	r3, [pc, #60]	; (1f0 <Reset_Handler+0xcc>)
     1b2:	4798      	blx	r3
        main();
     1b4:	4b0f      	ldr	r3, [pc, #60]	; (1f4 <Reset_Handler+0xd0>)
     1b6:	4798      	blx	r3
     1b8:	e7fe      	b.n	1b8 <Reset_Handler+0x94>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	00001020 	.word	0x00001020
     1c0:	20000000 	.word	0x20000000
     1c4:	20000000 	.word	0x20000000
     1c8:	00000f29 	.word	0x00000f29
     1cc:	20000000 	.word	0x20000000
     1d0:	20000060 	.word	0x20000060
     1d4:	00000f3b 	.word	0x00000f3b
     1d8:	00000000 	.word	0x00000000
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	41007000 	.word	0x41007000
     1e4:	41005000 	.word	0x41005000
     1e8:	41004800 	.word	0x41004800
     1ec:	41004000 	.word	0x41004000
     1f0:	00000ee1 	.word	0x00000ee1
     1f4:	00000ea9 	.word	0x00000ea9

000001f8 <CTRL_SPI_PORT_init>:
struct timer_descriptor      TIMER_0;

struct usart_sync_descriptor USART_0;

void CTRL_SPI_PORT_init(void)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     1fa:	2280      	movs	r2, #128	; 0x80
     1fc:	24c0      	movs	r4, #192	; 0xc0

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1fe:	2180      	movs	r1, #128	; 0x80
     200:	46ce      	mov	lr, r9
     202:	4647      	mov	r7, r8
     204:	4b25      	ldr	r3, [pc, #148]	; (29c <CTRL_SPI_PORT_init+0xa4>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     206:	05e4      	lsls	r4, r4, #23
     208:	0252      	lsls	r2, r2, #9
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     20a:	05c9      	lsls	r1, r1, #23
     20c:	b580      	push	{r7, lr}
     20e:	4689      	mov	r9, r1
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     210:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     212:	6299      	str	r1, [r3, #40]	; 0x28
     214:	4922      	ldr	r1, [pc, #136]	; (2a0 <CTRL_SPI_PORT_init+0xa8>)
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
	tmp &= ~PORT_PINCFG_PMUXEN;
     216:	2701      	movs	r7, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     218:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21a:	2150      	movs	r1, #80	; 0x50
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     21c:	2501      	movs	r5, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     21e:	6162      	str	r2, [r4, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     220:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     222:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     224:	432a      	orrs	r2, r5
     226:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     228:	545a      	strb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     22a:	220f      	movs	r2, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     22c:	3918      	subs	r1, #24
     22e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     230:	4390      	bics	r0, r2
     232:	4680      	mov	r8, r0
	tmp |= PORT_PMUX_PMUXE(data);
     234:	2002      	movs	r0, #2
     236:	4646      	mov	r6, r8
     238:	4306      	orrs	r6, r0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     23a:	2080      	movs	r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     23c:	545e      	strb	r6, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     23e:	464e      	mov	r6, r9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     240:	0280      	lsls	r0, r0, #10
     242:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     244:	629e      	str	r6, [r3, #40]	; 0x28
     246:	4e17      	ldr	r6, [pc, #92]	; (2a4 <CTRL_SPI_PORT_init+0xac>)
     248:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24a:	2651      	movs	r6, #81	; 0x51
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     24c:	6160      	str	r0, [r4, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24e:	5d98      	ldrb	r0, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     250:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     252:	4328      	orrs	r0, r5
     254:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     256:	5598      	strb	r0, [r3, r6]
	tmp |= PORT_PMUX_PMUXO(data);
     258:	2620      	movs	r6, #32
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     25a:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     25c:	4010      	ands	r0, r2
	tmp |= PORT_PMUX_PMUXO(data);
     25e:	4330      	orrs	r0, r6
     260:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     262:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     264:	2180      	movs	r1, #128	; 0x80
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     266:	2053      	movs	r0, #83	; 0x53
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     268:	0309      	lsls	r1, r1, #12
     26a:	6061      	str	r1, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     26c:	2404      	movs	r4, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     26e:	490e      	ldr	r1, [pc, #56]	; (2a8 <CTRL_SPI_PORT_init+0xb0>)
     270:	6299      	str	r1, [r3, #40]	; 0x28
     272:	490e      	ldr	r1, [pc, #56]	; (2ac <CTRL_SPI_PORT_init+0xb4>)
     274:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     276:	5c19      	ldrb	r1, [r3, r0]
     278:	43a1      	bics	r1, r4
     27a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27e:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     280:	4329      	orrs	r1, r5
     282:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     284:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     286:	2139      	movs	r1, #57	; 0x39
     288:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     28a:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     28c:	4332      	orrs	r2, r6
     28e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     290:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PIN_SPI_CTRL_MISO, PINMUX_PA19C_SERCOM1_PAD3);
}
     292:	bc0c      	pop	{r2, r3}
     294:	4690      	mov	r8, r2
     296:	4699      	mov	r9, r3
     298:	bdf0      	pop	{r4, r5, r6, r7, pc}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	41004400 	.word	0x41004400
     2a0:	c0000001 	.word	0xc0000001
     2a4:	c0000002 	.word	0xc0000002
     2a8:	40020000 	.word	0x40020000
     2ac:	c0020008 	.word	0xc0020008

000002b0 <system_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void system_init(void)
{
     2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2b2:	4b63      	ldr	r3, [pc, #396]	; (440 <system_init+0x190>)
     2b4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2b6:	23c0      	movs	r3, #192	; 0xc0
     2b8:	2540      	movs	r5, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2ba:	2046      	movs	r0, #70	; 0x46
     2bc:	2104      	movs	r1, #4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2be:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2c0:	4c60      	ldr	r4, [pc, #384]	; (444 <system_init+0x194>)
     2c2:	4e61      	ldr	r6, [pc, #388]	; (448 <system_init+0x198>)
     2c4:	4a61      	ldr	r2, [pc, #388]	; (44c <system_init+0x19c>)
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2c6:	05db      	lsls	r3, r3, #23
     2c8:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ca:	62a2      	str	r2, [r4, #40]	; 0x28
     2cc:	62a6      	str	r6, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2ce:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2d0:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2d2:	007f      	lsls	r7, r7, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2d4:	430a      	orrs	r2, r1
     2d6:	b2d2      	uxtb	r2, r2
     2d8:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2da:	619d      	str	r5, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2dc:	5c22      	ldrb	r2, [r4, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2de:	3d3f      	subs	r5, #63	; 0x3f
     2e0:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2e2:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2e4:	4a5a      	ldr	r2, [pc, #360]	; (450 <system_init+0x1a0>)
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2e6:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2e8:	3002      	adds	r0, #2
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	62a2      	str	r2, [r4, #40]	; 0x28
     2ec:	62a6      	str	r6, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2ee:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2f0:	5c22      	ldrb	r2, [r4, r0]
     2f2:	430a      	orrs	r2, r1
     2f4:	b2d2      	uxtb	r2, r2
     2f6:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2f8:	619f      	str	r7, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2fa:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2fc:	19ff      	adds	r7, r7, r7
	tmp &= ~PORT_PINCFG_PMUXEN;
     2fe:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     300:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     302:	4a54      	ldr	r2, [pc, #336]	; (454 <system_init+0x1a4>)
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     304:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     306:	3001      	adds	r0, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     308:	62a2      	str	r2, [r4, #40]	; 0x28
     30a:	62a6      	str	r6, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     30c:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     30e:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     310:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     312:	430a      	orrs	r2, r1
     314:	b2d2      	uxtb	r2, r2
     316:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     318:	619f      	str	r7, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     31a:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     31c:	05f6      	lsls	r6, r6, #23
	tmp &= ~PORT_PINCFG_PMUXEN;
     31e:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     320:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     322:	2280      	movs	r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     324:	484c      	ldr	r0, [pc, #304]	; (458 <system_init+0x1a8>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     326:	02d2      	lsls	r2, r2, #11
     328:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     32a:	62a6      	str	r6, [r4, #40]	; 0x28
     32c:	62a0      	str	r0, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     32e:	2052      	movs	r0, #82	; 0x52
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     330:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     332:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     334:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     336:	037f      	lsls	r7, r7, #13
	tmp &= ~PORT_PINCFG_PMUXEN;
     338:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33a:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     33c:	4a47      	ldr	r2, [pc, #284]	; (45c <system_init+0x1ac>)
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     33e:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     340:	4694      	mov	ip, r2
     342:	62a2      	str	r2, [r4, #40]	; 0x28
     344:	4a46      	ldr	r2, [pc, #280]	; (460 <system_init+0x1b0>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     346:	3002      	adds	r0, #2
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     348:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     34a:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     34c:	5c22      	ldrb	r2, [r4, r0]
     34e:	430a      	orrs	r2, r1
     350:	b2d2      	uxtb	r2, r2
     352:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     354:	619f      	str	r7, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     356:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     358:	2780      	movs	r7, #128	; 0x80
	tmp &= ~PORT_PINCFG_PMUXEN;
     35a:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     35c:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     35e:	4662      	mov	r2, ip
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     360:	03bf      	lsls	r7, r7, #14
     362:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     364:	62a2      	str	r2, [r4, #40]	; 0x28
     366:	4a3f      	ldr	r2, [pc, #252]	; (464 <system_init+0x1b4>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     368:	3001      	adds	r0, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     36a:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     36c:	605f      	str	r7, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     36e:	5c22      	ldrb	r2, [r4, r0]
     370:	430a      	orrs	r2, r1
     372:	b2d2      	uxtb	r2, r2
     374:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     376:	619f      	str	r7, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     378:	5c22      	ldrb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     37a:	493b      	ldr	r1, [pc, #236]	; (468 <system_init+0x1b8>)
	tmp &= ~PORT_PINCFG_PMUXEN;
     37c:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     37e:	5422      	strb	r2, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     380:	2280      	movs	r2, #128	; 0x80
     382:	0512      	lsls	r2, r2, #20
     384:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     386:	62a6      	str	r6, [r4, #40]	; 0x28
     388:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     38a:	215b      	movs	r1, #91	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38c:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     38e:	5c62      	ldrb	r2, [r4, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     390:	4836      	ldr	r0, [pc, #216]	; (46c <system_init+0x1bc>)
	tmp &= ~PORT_PINCFG_PMUXEN;
     392:	43aa      	bics	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     394:	5462      	strb	r2, [r4, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     396:	2208      	movs	r2, #8
     398:	312d      	adds	r1, #45	; 0x2d
     39a:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     39c:	3120      	adds	r1, #32
     39e:	5060      	str	r0, [r4, r1]
     3a0:	20c0      	movs	r0, #192	; 0xc0
     3a2:	0600      	lsls	r0, r0, #24
     3a4:	5060      	str	r0, [r4, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3a6:	3910      	subs	r1, #16
     3a8:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3aa:	312b      	adds	r1, #43	; 0x2b
     3ac:	5c63      	ldrb	r3, [r4, r1]
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     3ae:	4e30      	ldr	r6, [pc, #192]	; (470 <system_init+0x1c0>)
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b0:	43ab      	bics	r3, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b2:	5463      	strb	r3, [r4, r1]
     3b4:	6a33      	ldr	r3, [r6, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     3b6:	4f2f      	ldr	r7, [pc, #188]	; (474 <system_init+0x1c4>)
     3b8:	4313      	orrs	r3, r2
     3ba:	6233      	str	r3, [r6, #32]
     3bc:	4b2e      	ldr	r3, [pc, #184]	; (478 <system_init+0x1c8>)
	spi_m_sync_init(&CTRL_SPI, SERCOM1);
     3be:	492f      	ldr	r1, [pc, #188]	; (47c <system_init+0x1cc>)
     3c0:	807b      	strh	r3, [r7, #2]
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <system_init+0x1d0>)
     3c4:	482f      	ldr	r0, [pc, #188]	; (484 <system_init+0x1d4>)
     3c6:	4798      	blx	r3
	CTRL_SPI_PORT_init();
     3c8:	4b2f      	ldr	r3, [pc, #188]	; (488 <system_init+0x1d8>)
     3ca:	4798      	blx	r3
     3cc:	2210      	movs	r2, #16
     3ce:	6a33      	ldr	r3, [r6, #32]
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
     3d0:	492e      	ldr	r1, [pc, #184]	; (48c <system_init+0x1dc>)
     3d2:	4313      	orrs	r3, r2
     3d4:	6233      	str	r3, [r6, #32]
     3d6:	4b2e      	ldr	r3, [pc, #184]	; (490 <system_init+0x1e0>)
     3d8:	2200      	movs	r2, #0
     3da:	807b      	strh	r3, [r7, #2]
     3dc:	482d      	ldr	r0, [pc, #180]	; (494 <system_init+0x1e4>)
     3de:	4b2e      	ldr	r3, [pc, #184]	; (498 <system_init+0x1e8>)
     3e0:	4798      	blx	r3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e2:	2101      	movs	r1, #1
     3e4:	468c      	mov	ip, r1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e6:	234a      	movs	r3, #74	; 0x4a
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e8:	4661      	mov	r1, ip
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ea:	5ce2      	ldrb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ec:	2035      	movs	r0, #53	; 0x35
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ee:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f0:	430a      	orrs	r2, r1
     3f2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f4:	54e2      	strb	r2, [r4, r3]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3f6:	220f      	movs	r2, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f8:	5c21      	ldrb	r1, [r4, r0]
	tmp |= PORT_PMUX_PMUXE(data);
     3fa:	3b47      	subs	r3, #71	; 0x47
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3fc:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3fe:	4319      	orrs	r1, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     400:	5421      	strb	r1, [r4, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     402:	214b      	movs	r1, #75	; 0x4b
     404:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     406:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     408:	4665      	mov	r5, ip
     40a:	432b      	orrs	r3, r5
     40c:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40e:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     410:	5c23      	ldrb	r3, [r4, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     412:	401a      	ands	r2, r3
	tmp |= PORT_PMUX_PMUXO(data);
     414:	2330      	movs	r3, #48	; 0x30
     416:	431a      	orrs	r2, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     418:	5422      	strb	r2, [r4, r0]
	delay_init(SysTick);
     41a:	4b20      	ldr	r3, [pc, #128]	; (49c <system_init+0x1ec>)
     41c:	4820      	ldr	r0, [pc, #128]	; (4a0 <system_init+0x1f0>)
     41e:	4798      	blx	r3
     420:	2380      	movs	r3, #128	; 0x80
     422:	6a32      	ldr	r2, [r6, #32]
     424:	011b      	lsls	r3, r3, #4
     426:	4313      	orrs	r3, r2
     428:	6233      	str	r3, [r6, #32]
     42a:	4b1e      	ldr	r3, [pc, #120]	; (4a4 <system_init+0x1f4>)
     42c:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     42e:	4b1e      	ldr	r3, [pc, #120]	; (4a8 <system_init+0x1f8>)
     430:	4798      	blx	r3
     432:	491e      	ldr	r1, [pc, #120]	; (4ac <system_init+0x1fc>)
     434:	0002      	movs	r2, r0
     436:	4b1e      	ldr	r3, [pc, #120]	; (4b0 <system_init+0x200>)
     438:	481e      	ldr	r0, [pc, #120]	; (4b4 <system_init+0x204>)
     43a:	4798      	blx	r3
	USART_0_init();

	delay_driver_init();

	TIMER_0_init();
}
     43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	00000891 	.word	0x00000891
     444:	41004400 	.word	0x41004400
     448:	c0020000 	.word	0xc0020000
     44c:	40020040 	.word	0x40020040
     450:	40020100 	.word	0x40020100
     454:	40020200 	.word	0x40020200
     458:	c0000004 	.word	0xc0000004
     45c:	40020000 	.word	0x40020000
     460:	c0020010 	.word	0xc0020010
     464:	c0020020 	.word	0xc0020020
     468:	c0000800 	.word	0xc0000800
     46c:	40000008 	.word	0x40000008
     470:	40000400 	.word	0x40000400
     474:	40000c00 	.word	0x40000c00
     478:	00004215 	.word	0x00004215
     47c:	42000c00 	.word	0x42000c00
     480:	00000595 	.word	0x00000595
     484:	20000024 	.word	0x20000024
     488:	000001f9 	.word	0x000001f9
     48c:	42001000 	.word	0x42001000
     490:	00004216 	.word	0x00004216
     494:	20000038 	.word	0x20000038
     498:	000007e1 	.word	0x000007e1
     49c:	000004b9 	.word	0x000004b9
     4a0:	e000e010 	.word	0xe000e010
     4a4:	0000421b 	.word	0x0000421b
     4a8:	00000e89 	.word	0x00000e89
     4ac:	42002c00 	.word	0x42002c00
     4b0:	000006cd 	.word	0x000006cd
     4b4:	20000044 	.word	0x20000044

000004b8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     4b8:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <delay_init+0xc>)
     4bc:	6018      	str	r0, [r3, #0]
     4be:	4b02      	ldr	r3, [pc, #8]	; (4c8 <delay_init+0x10>)
     4c0:	4798      	blx	r3
}
     4c2:	bd10      	pop	{r4, pc}
     4c4:	2000001c 	.word	0x2000001c
     4c8:	00000d15 	.word	0x00000d15

000004cc <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <delay_ms+0x14>)
{
     4ce:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     4d0:	681c      	ldr	r4, [r3, #0]
     4d2:	4b04      	ldr	r3, [pc, #16]	; (4e4 <delay_ms+0x18>)
     4d4:	4798      	blx	r3
     4d6:	4b04      	ldr	r3, [pc, #16]	; (4e8 <delay_ms+0x1c>)
     4d8:	0001      	movs	r1, r0
     4da:	0020      	movs	r0, r4
     4dc:	4798      	blx	r3
}
     4de:	bd10      	pop	{r4, pc}
     4e0:	2000001c 	.word	0x2000001c
     4e4:	00000885 	.word	0x00000885
     4e8:	00000d29 	.word	0x00000d29

000004ec <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	46c6      	mov	lr, r8
     4f0:	0004      	movs	r4, r0
	ASSERT(io);
     4f2:	1e43      	subs	r3, r0, #1
     4f4:	4198      	sbcs	r0, r3
{
     4f6:	b500      	push	{lr}
	ASSERT(io);
     4f8:	4d0e      	ldr	r5, [pc, #56]	; (534 <_spi_m_sync_io_write+0x48>)
     4fa:	4b0f      	ldr	r3, [pc, #60]	; (538 <_spi_m_sync_io_write+0x4c>)
{
     4fc:	b084      	sub	sp, #16
     4fe:	000f      	movs	r7, r1
     500:	0016      	movs	r6, r2
	ASSERT(io);
     502:	0029      	movs	r1, r5

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     504:	3c08      	subs	r4, #8
	ASSERT(io);
     506:	b2c0      	uxtb	r0, r0
     508:	22ad      	movs	r2, #173	; 0xad
     50a:	4698      	mov	r8, r3
     50c:	4798      	blx	r3

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     50e:	0020      	movs	r0, r4
     510:	1e43      	subs	r3, r0, #1
     512:	4198      	sbcs	r0, r3
     514:	22bd      	movs	r2, #189	; 0xbd
     516:	0029      	movs	r1, r5
     518:	b2c0      	uxtb	r0, r0
     51a:	47c0      	blx	r8

	msg.txbuf = p_xfer->txbuf;
	msg.rxbuf = p_xfer->rxbuf;
     51c:	2300      	movs	r3, #0
	msg.size  = p_xfer->size;

	return _spi_m_sync_trans(&spi->dev, &msg);
     51e:	a901      	add	r1, sp, #4
	msg.rxbuf = p_xfer->rxbuf;
     520:	9302      	str	r3, [sp, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
     522:	0020      	movs	r0, r4
     524:	4b05      	ldr	r3, [pc, #20]	; (53c <_spi_m_sync_io_write+0x50>)
	msg.txbuf = p_xfer->txbuf;
     526:	9701      	str	r7, [sp, #4]
	xfer.size  = length;
     528:	9603      	str	r6, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     52a:	4798      	blx	r3
}
     52c:	b004      	add	sp, #16
     52e:	bc04      	pop	{r2}
     530:	4690      	mov	r8, r2
     532:	bdf0      	pop	{r4, r5, r6, r7, pc}
     534:	00000f4c 	.word	0x00000f4c
     538:	0000082d 	.word	0x0000082d
     53c:	00000b11 	.word	0x00000b11

00000540 <_spi_m_sync_io_read>:
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	46c6      	mov	lr, r8
     544:	0004      	movs	r4, r0
	ASSERT(io);
     546:	1e43      	subs	r3, r0, #1
     548:	4198      	sbcs	r0, r3
{
     54a:	b500      	push	{lr}
	ASSERT(io);
     54c:	4d0e      	ldr	r5, [pc, #56]	; (588 <_spi_m_sync_io_read+0x48>)
     54e:	4b0f      	ldr	r3, [pc, #60]	; (58c <_spi_m_sync_io_read+0x4c>)
{
     550:	b084      	sub	sp, #16
     552:	000f      	movs	r7, r1
     554:	0016      	movs	r6, r2
	ASSERT(io);
     556:	0029      	movs	r1, r5
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     558:	3c08      	subs	r4, #8
	ASSERT(io);
     55a:	b2c0      	uxtb	r0, r0
     55c:	2291      	movs	r2, #145	; 0x91
     55e:	4698      	mov	r8, r3
     560:	4798      	blx	r3
	ASSERT(spi && p_xfer);
     562:	0020      	movs	r0, r4
     564:	1e43      	subs	r3, r0, #1
     566:	4198      	sbcs	r0, r3
     568:	22bd      	movs	r2, #189	; 0xbd
     56a:	0029      	movs	r1, r5
     56c:	b2c0      	uxtb	r0, r0
     56e:	47c0      	blx	r8
	msg.txbuf = p_xfer->txbuf;
     570:	2300      	movs	r3, #0
	return _spi_m_sync_trans(&spi->dev, &msg);
     572:	a901      	add	r1, sp, #4
	msg.txbuf = p_xfer->txbuf;
     574:	9301      	str	r3, [sp, #4]
	return _spi_m_sync_trans(&spi->dev, &msg);
     576:	0020      	movs	r0, r4
     578:	4b05      	ldr	r3, [pc, #20]	; (590 <_spi_m_sync_io_read+0x50>)
	msg.rxbuf = p_xfer->rxbuf;
     57a:	9702      	str	r7, [sp, #8]
	xfer.size  = length;
     57c:	9603      	str	r6, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     57e:	4798      	blx	r3
}
     580:	b004      	add	sp, #16
     582:	bc04      	pop	{r2}
     584:	4690      	mov	r8, r2
     586:	bdf0      	pop	{r4, r5, r6, r7, pc}
     588:	00000f4c 	.word	0x00000f4c
     58c:	0000082d 	.word	0x0000082d
     590:	00000b11 	.word	0x00000b11

00000594 <spi_m_sync_init>:
{
     594:	b570      	push	{r4, r5, r6, lr}
     596:	0004      	movs	r4, r0
     598:	000d      	movs	r5, r1
	ASSERT(spi && hw);
     59a:	2800      	cmp	r0, #0
     59c:	d016      	beq.n	5cc <spi_m_sync_init+0x38>
     59e:	0008      	movs	r0, r1
     5a0:	1e43      	subs	r3, r0, #1
     5a2:	4198      	sbcs	r0, r3
     5a4:	b2c0      	uxtb	r0, r0
     5a6:	490a      	ldr	r1, [pc, #40]	; (5d0 <spi_m_sync_init+0x3c>)
     5a8:	4b0a      	ldr	r3, [pc, #40]	; (5d4 <spi_m_sync_init+0x40>)
     5aa:	2242      	movs	r2, #66	; 0x42
     5ac:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     5ae:	6025      	str	r5, [r4, #0]
	rc = _spi_m_sync_init(&spi->dev, hw);
     5b0:	0029      	movs	r1, r5
     5b2:	0020      	movs	r0, r4
     5b4:	4b08      	ldr	r3, [pc, #32]	; (5d8 <spi_m_sync_init+0x44>)
     5b6:	4798      	blx	r3
	if (rc < 0) {
     5b8:	2800      	cmp	r0, #0
     5ba:	db06      	blt.n	5ca <spi_m_sync_init+0x36>
	return ERR_NONE;
     5bc:	2000      	movs	r0, #0
	spi->flags    = SPI_DEACTIVATE_NEXT;
     5be:	4b07      	ldr	r3, [pc, #28]	; (5dc <spi_m_sync_init+0x48>)
     5c0:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
     5c2:	4b07      	ldr	r3, [pc, #28]	; (5e0 <spi_m_sync_init+0x4c>)
     5c4:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
     5c6:	4b07      	ldr	r3, [pc, #28]	; (5e4 <spi_m_sync_init+0x50>)
     5c8:	60a3      	str	r3, [r4, #8]
}
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	2000      	movs	r0, #0
     5ce:	e7ea      	b.n	5a6 <spi_m_sync_init+0x12>
     5d0:	00000f4c 	.word	0x00000f4c
     5d4:	0000082d 	.word	0x0000082d
     5d8:	000009d9 	.word	0x000009d9
     5dc:	ffff8000 	.word	0xffff8000
     5e0:	00000541 	.word	0x00000541
     5e4:	000004ed 	.word	0x000004ed

000005e8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ea:	4645      	mov	r5, r8
     5ec:	464e      	mov	r6, r9
     5ee:	46de      	mov	lr, fp
     5f0:	4657      	mov	r7, sl
     5f2:	b5e0      	push	{r5, r6, r7, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     5f4:	6903      	ldr	r3, [r0, #16]
{
     5f6:	b083      	sub	sp, #12
	uint32_t                 time  = ++timer->time;
     5f8:	1c5d      	adds	r5, r3, #1
     5fa:	4698      	mov	r8, r3

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     5fc:	7e03      	ldrb	r3, [r0, #24]
{
     5fe:	0006      	movs	r6, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     600:	6944      	ldr	r4, [r0, #20]
	uint32_t                 time  = ++timer->time;
     602:	6105      	str	r5, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     604:	07db      	lsls	r3, r3, #31
     606:	d446      	bmi.n	696 <timer_process_counted+0xae>
     608:	7e03      	ldrb	r3, [r0, #24]
     60a:	079b      	lsls	r3, r3, #30
     60c:	d443      	bmi.n	696 <timer_process_counted+0xae>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     60e:	2c00      	cmp	r4, #0
     610:	d045      	beq.n	69e <timer_process_counted+0xb6>
     612:	6863      	ldr	r3, [r4, #4]
     614:	68a2      	ldr	r2, [r4, #8]
     616:	1aeb      	subs	r3, r5, r3
     618:	429a      	cmp	r2, r3
     61a:	d840      	bhi.n	69e <timer_process_counted+0xb6>
     61c:	2314      	movs	r3, #20
     61e:	4699      	mov	r9, r3
     620:	4b27      	ldr	r3, [pc, #156]	; (6c0 <timer_process_counted+0xd8>)
     622:	4481      	add	r9, r0
     624:	469a      	mov	sl, r3
		list_insert_after(prev, new_task);
     626:	4b27      	ldr	r3, [pc, #156]	; (6c4 <timer_process_counted+0xdc>)
     628:	469b      	mov	fp, r3
     62a:	e00b      	b.n	644 <timer_process_counted+0x5c>
     62c:	6977      	ldr	r7, [r6, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     62e:	68e3      	ldr	r3, [r4, #12]
     630:	0020      	movs	r0, r4
     632:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     634:	2f00      	cmp	r7, #0
     636:	d032      	beq.n	69e <timer_process_counted+0xb6>
     638:	687b      	ldr	r3, [r7, #4]
     63a:	68ba      	ldr	r2, [r7, #8]
     63c:	003c      	movs	r4, r7
     63e:	1aeb      	subs	r3, r5, r3
     640:	4293      	cmp	r3, r2
     642:	d32c      	bcc.n	69e <timer_process_counted+0xb6>
		list_remove_head(&timer->tasks);
     644:	4648      	mov	r0, r9
     646:	47d0      	blx	sl
		if (TIMER_TASK_REPEAT == tmp->mode) {
     648:	7c23      	ldrb	r3, [r4, #16]
     64a:	2b01      	cmp	r3, #1
     64c:	d1ee      	bne.n	62c <timer_process_counted+0x44>
     64e:	6977      	ldr	r7, [r6, #20]
			tmp->time_label = time;
     650:	6065      	str	r5, [r4, #4]
	if (!head) {
     652:	2f00      	cmp	r7, #0
     654:	d02f      	beq.n	6b6 <timer_process_counted+0xce>
     656:	0038      	movs	r0, r7
     658:	46bc      	mov	ip, r7
     65a:	68a2      	ldr	r2, [r4, #8]
     65c:	2100      	movs	r1, #0
     65e:	4647      	mov	r7, r8
     660:	9401      	str	r4, [sp, #4]
     662:	e008      	b.n	676 <timer_process_counted+0x8e>
			time_left = it->interval - (time - it->time_label);
     664:	4443      	add	r3, r8
     666:	1b5b      	subs	r3, r3, r5
		if (time_left >= new_task->interval)
     668:	429a      	cmp	r2, r3
     66a:	d90d      	bls.n	688 <timer_process_counted+0xa0>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     66c:	6803      	ldr	r3, [r0, #0]
     66e:	0001      	movs	r1, r0
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     670:	2b00      	cmp	r3, #0
     672:	d01b      	beq.n	6ac <timer_process_counted+0xc4>
     674:	0018      	movs	r0, r3
			time_left = it->interval - (time - it->time_label);
     676:	6884      	ldr	r4, [r0, #8]
		if (it->time_label <= time) {
     678:	6843      	ldr	r3, [r0, #4]
			time_left = it->interval - (time - it->time_label);
     67a:	46a0      	mov	r8, r4
		if (it->time_label <= time) {
     67c:	429d      	cmp	r5, r3
     67e:	d2f1      	bcs.n	664 <timer_process_counted+0x7c>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     680:	4443      	add	r3, r8
     682:	1bdb      	subs	r3, r3, r7
		if (time_left >= new_task->interval)
     684:	429a      	cmp	r2, r3
     686:	d8f1      	bhi.n	66c <timer_process_counted+0x84>
     688:	46b8      	mov	r8, r7
     68a:	4667      	mov	r7, ip
     68c:	9c01      	ldr	r4, [sp, #4]
	if (it == head) {
     68e:	4287      	cmp	r7, r0
     690:	d011      	beq.n	6b6 <timer_process_counted+0xce>
     692:	0008      	movs	r0, r1
     694:	e00c      	b.n	6b0 <timer_process_counted+0xc8>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     696:	2202      	movs	r2, #2
     698:	7e33      	ldrb	r3, [r6, #24]
     69a:	4313      	orrs	r3, r2
     69c:	7633      	strb	r3, [r6, #24]
	}
}
     69e:	b003      	add	sp, #12
     6a0:	bc3c      	pop	{r2, r3, r4, r5}
     6a2:	4690      	mov	r8, r2
     6a4:	4699      	mov	r9, r3
     6a6:	46a2      	mov	sl, r4
     6a8:	46ab      	mov	fp, r5
     6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ac:	46b8      	mov	r8, r7
     6ae:	9c01      	ldr	r4, [sp, #4]
		list_insert_after(prev, new_task);
     6b0:	0021      	movs	r1, r4
     6b2:	47d8      	blx	fp
     6b4:	e7ba      	b.n	62c <timer_process_counted+0x44>
		list_insert_as_head(list, new_task);
     6b6:	0021      	movs	r1, r4
     6b8:	4648      	mov	r0, r9
     6ba:	4b03      	ldr	r3, [pc, #12]	; (6c8 <timer_process_counted+0xe0>)
     6bc:	4798      	blx	r3
     6be:	e7b5      	b.n	62c <timer_process_counted+0x44>
     6c0:	00000875 	.word	0x00000875
     6c4:	0000086d 	.word	0x0000086d
     6c8:	00000835 	.word	0x00000835

000006cc <timer_init>:
{
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	0004      	movs	r4, r0
     6d0:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     6d2:	2800      	cmp	r0, #0
     6d4:	d011      	beq.n	6fa <timer_init+0x2e>
     6d6:	0008      	movs	r0, r1
     6d8:	1e43      	subs	r3, r0, #1
     6da:	4198      	sbcs	r0, r3
     6dc:	b2c0      	uxtb	r0, r0
     6de:	2245      	movs	r2, #69	; 0x45
     6e0:	4907      	ldr	r1, [pc, #28]	; (700 <timer_init+0x34>)
     6e2:	4b08      	ldr	r3, [pc, #32]	; (704 <timer_init+0x38>)
     6e4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     6e6:	0029      	movs	r1, r5
     6e8:	0020      	movs	r0, r4
     6ea:	4b07      	ldr	r3, [pc, #28]	; (708 <timer_init+0x3c>)
     6ec:	4798      	blx	r3
	descr->time                           = 0;
     6ee:	2300      	movs	r3, #0
     6f0:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     6f2:	4b06      	ldr	r3, [pc, #24]	; (70c <timer_init+0x40>)
}
     6f4:	2000      	movs	r0, #0
	descr->device.timer_cb.period_expired = timer_process_counted;
     6f6:	6023      	str	r3, [r4, #0]
}
     6f8:	bd70      	pop	{r4, r5, r6, pc}
     6fa:	2000      	movs	r0, #0
     6fc:	e7ef      	b.n	6de <timer_init+0x12>
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	00000f68 	.word	0x00000f68
     704:	0000082d 	.word	0x0000082d
     708:	00000d7d 	.word	0x00000d7d
     70c:	000005e9 	.word	0x000005e9

00000710 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     712:	4647      	mov	r7, r8
     714:	46ce      	mov	lr, r9
     716:	0004      	movs	r4, r0
     718:	b580      	push	{r7, lr}
     71a:	4690      	mov	r8, r2
     71c:	000f      	movs	r7, r1
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     71e:	2800      	cmp	r0, #0
     720:	d021      	beq.n	766 <usart_sync_write+0x56>
     722:	2900      	cmp	r1, #0
     724:	d01f      	beq.n	766 <usart_sync_write+0x56>
     726:	0010      	movs	r0, r2
     728:	1e43      	subs	r3, r0, #1
     72a:	4198      	sbcs	r0, r3
     72c:	b2c0      	uxtb	r0, r0
     72e:	22fb      	movs	r2, #251	; 0xfb
     730:	490e      	ldr	r1, [pc, #56]	; (76c <usart_sync_write+0x5c>)
     732:	4b0f      	ldr	r3, [pc, #60]	; (770 <usart_sync_write+0x60>)
     734:	4798      	blx	r3
     736:	4d0f      	ldr	r5, [pc, #60]	; (774 <usart_sync_write+0x64>)
     738:	3408      	adds	r4, #8
	while (!_usart_sync_is_byte_sent(&descr->device))
     73a:	0020      	movs	r0, r4
     73c:	47a8      	blx	r5
     73e:	2800      	cmp	r0, #0
     740:	d0fb      	beq.n	73a <usart_sync_write+0x2a>
     742:	4b0d      	ldr	r3, [pc, #52]	; (778 <usart_sync_write+0x68>)
     744:	2600      	movs	r6, #0
     746:	4699      	mov	r9, r3
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     748:	5db9      	ldrb	r1, [r7, r6]
     74a:	0020      	movs	r0, r4
     74c:	47c8      	blx	r9
		while (!_usart_sync_is_byte_sent(&descr->device))
     74e:	0020      	movs	r0, r4
     750:	47a8      	blx	r5
     752:	2800      	cmp	r0, #0
     754:	d0fb      	beq.n	74e <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     756:	3601      	adds	r6, #1
     758:	4546      	cmp	r6, r8
     75a:	d3f5      	bcc.n	748 <usart_sync_write+0x38>

	return (int32_t)offset;
}
     75c:	0030      	movs	r0, r6
     75e:	bc0c      	pop	{r2, r3}
     760:	4690      	mov	r8, r2
     762:	4699      	mov	r9, r3
     764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     766:	2000      	movs	r0, #0
     768:	e7e1      	b.n	72e <usart_sync_write+0x1e>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000f80 	.word	0x00000f80
     770:	0000082d 	.word	0x0000082d
     774:	000009c1 	.word	0x000009c1
     778:	000009b1 	.word	0x000009b1

0000077c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     77e:	4647      	mov	r7, r8
     780:	46ce      	mov	lr, r9
     782:	0004      	movs	r4, r0
     784:	b580      	push	{r7, lr}
     786:	4690      	mov	r8, r2
     788:	000f      	movs	r7, r1
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     78a:	2800      	cmp	r0, #0
     78c:	d01e      	beq.n	7cc <usart_sync_read+0x50>
     78e:	2900      	cmp	r1, #0
     790:	d01c      	beq.n	7cc <usart_sync_read+0x50>
     792:	0010      	movs	r0, r2
     794:	1e43      	subs	r3, r0, #1
     796:	4198      	sbcs	r0, r3
     798:	b2c0      	uxtb	r0, r0
     79a:	2216      	movs	r2, #22
     79c:	4b0c      	ldr	r3, [pc, #48]	; (7d0 <usart_sync_read+0x54>)
     79e:	32ff      	adds	r2, #255	; 0xff
     7a0:	490c      	ldr	r1, [pc, #48]	; (7d4 <usart_sync_read+0x58>)
     7a2:	4798      	blx	r3
     7a4:	4b0c      	ldr	r3, [pc, #48]	; (7d8 <usart_sync_read+0x5c>)
	uint32_t                      offset = 0;
     7a6:	2600      	movs	r6, #0
     7a8:	4699      	mov	r9, r3
     7aa:	4d0c      	ldr	r5, [pc, #48]	; (7dc <usart_sync_read+0x60>)
     7ac:	3408      	adds	r4, #8
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     7ae:	0020      	movs	r0, r4
     7b0:	47a8      	blx	r5
     7b2:	2800      	cmp	r0, #0
     7b4:	d0fb      	beq.n	7ae <usart_sync_read+0x32>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     7b6:	0020      	movs	r0, r4
     7b8:	47c8      	blx	r9
     7ba:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     7bc:	3601      	adds	r6, #1
     7be:	4546      	cmp	r6, r8
     7c0:	d3f5      	bcc.n	7ae <usart_sync_read+0x32>

	return (int32_t)offset;
}
     7c2:	0030      	movs	r0, r6
     7c4:	bc0c      	pop	{r2, r3}
     7c6:	4690      	mov	r8, r2
     7c8:	4699      	mov	r9, r3
     7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7cc:	2000      	movs	r0, #0
     7ce:	e7e4      	b.n	79a <usart_sync_read+0x1e>
     7d0:	0000082d 	.word	0x0000082d
     7d4:	00000f80 	.word	0x00000f80
     7d8:	000009b9 	.word	0x000009b9
     7dc:	000009cd 	.word	0x000009cd

000007e0 <usart_sync_init>:
{
     7e0:	b570      	push	{r4, r5, r6, lr}
     7e2:	0004      	movs	r4, r0
     7e4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     7e6:	2800      	cmp	r0, #0
     7e8:	d013      	beq.n	812 <usart_sync_init+0x32>
     7ea:	0008      	movs	r0, r1
     7ec:	1e43      	subs	r3, r0, #1
     7ee:	4198      	sbcs	r0, r3
     7f0:	b2c0      	uxtb	r0, r0
     7f2:	4909      	ldr	r1, [pc, #36]	; (818 <usart_sync_init+0x38>)
     7f4:	4b09      	ldr	r3, [pc, #36]	; (81c <usart_sync_init+0x3c>)
     7f6:	223e      	movs	r2, #62	; 0x3e
     7f8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     7fa:	0020      	movs	r0, r4
     7fc:	0029      	movs	r1, r5
     7fe:	3008      	adds	r0, #8
     800:	4b07      	ldr	r3, [pc, #28]	; (820 <usart_sync_init+0x40>)
     802:	4798      	blx	r3
	if (init_status) {
     804:	2800      	cmp	r0, #0
     806:	d103      	bne.n	810 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     808:	4b06      	ldr	r3, [pc, #24]	; (824 <usart_sync_init+0x44>)
     80a:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     80c:	4b06      	ldr	r3, [pc, #24]	; (828 <usart_sync_init+0x48>)
     80e:	6023      	str	r3, [r4, #0]
}
     810:	bd70      	pop	{r4, r5, r6, pc}
     812:	2000      	movs	r0, #0
     814:	e7ed      	b.n	7f2 <usart_sync_init+0x12>
     816:	46c0      	nop			; (mov r8, r8)
     818:	00000f80 	.word	0x00000f80
     81c:	0000082d 	.word	0x0000082d
     820:	00000925 	.word	0x00000925
     824:	0000077d 	.word	0x0000077d
     828:	00000711 	.word	0x00000711

0000082c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     82c:	2800      	cmp	r0, #0
     82e:	d100      	bne.n	832 <assert+0x6>
		__asm("BKPT #0");
     830:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     832:	4770      	bx	lr

00000834 <list_insert_as_head>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     834:	6803      	ldr	r3, [r0, #0]

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     836:	b570      	push	{r4, r5, r6, lr}
     838:	0005      	movs	r5, r0
     83a:	000c      	movs	r4, r1
	for (it = list->head; it; it = it->next) {
     83c:	2b00      	cmp	r3, #0
     83e:	d103      	bne.n	848 <list_insert_as_head+0x14>
     840:	e006      	b.n	850 <list_insert_as_head+0x1c>
     842:	681b      	ldr	r3, [r3, #0]
     844:	2b00      	cmp	r3, #0
     846:	d003      	beq.n	850 <list_insert_as_head+0x1c>
		if (it == element) {
     848:	429c      	cmp	r4, r3
     84a:	d1fa      	bne.n	842 <list_insert_as_head+0xe>
     84c:	2000      	movs	r0, #0
     84e:	e000      	b.n	852 <list_insert_as_head+0x1e>
	for (it = list->head; it; it = it->next) {
     850:	2001      	movs	r0, #1
	ASSERT(!is_list_element(list, element));
     852:	2243      	movs	r2, #67	; 0x43
     854:	4903      	ldr	r1, [pc, #12]	; (864 <list_insert_as_head+0x30>)
     856:	4b04      	ldr	r3, [pc, #16]	; (868 <list_insert_as_head+0x34>)
     858:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     85a:	682b      	ldr	r3, [r5, #0]
     85c:	6023      	str	r3, [r4, #0]
	list->head                             = (struct list_element *)element;
     85e:	602c      	str	r4, [r5, #0]
}
     860:	bd70      	pop	{r4, r5, r6, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	00000f9c 	.word	0x00000f9c
     868:	0000082d 	.word	0x0000082d

0000086c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     86c:	6803      	ldr	r3, [r0, #0]
     86e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     870:	6001      	str	r1, [r0, #0]
}
     872:	4770      	bx	lr

00000874 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     874:	6803      	ldr	r3, [r0, #0]
     876:	2b00      	cmp	r3, #0
     878:	d001      	beq.n	87e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     87a:	681a      	ldr	r2, [r3, #0]
     87c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     87e:	0018      	movs	r0, r3
     880:	4770      	bx	lr
     882:	46c0      	nop			; (mov r8, r8)

00000884 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     884:	4b01      	ldr	r3, [pc, #4]	; (88c <_get_cycles_for_ms+0x8>)
     886:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     888:	4770      	bx	lr
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	0000bb80 	.word	0x0000bb80

00000890 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     890:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     892:	4b06      	ldr	r3, [pc, #24]	; (8ac <_init_chip+0x1c>)
     894:	685a      	ldr	r2, [r3, #4]
     896:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     898:	4b05      	ldr	r3, [pc, #20]	; (8b0 <_init_chip+0x20>)
     89a:	4798      	blx	r3
	_sysctrl_init_sources();
     89c:	4b05      	ldr	r3, [pc, #20]	; (8b4 <_init_chip+0x24>)
     89e:	4798      	blx	r3
	_gclk_init_generators();
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <_init_chip+0x28>)
     8a2:	4798      	blx	r3
	_sysctrl_init_referenced_generators();
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <_init_chip+0x2c>)
     8a6:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     8a8:	bd10      	pop	{r4, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	41004000 	.word	0x41004000
     8b0:	00000905 	.word	0x00000905
     8b4:	00000c5d 	.word	0x00000c5d
     8b8:	000008c1 	.word	0x000008c1
     8bc:	00000ca1 	.word	0x00000ca1

000008c0 <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     8c0:	2280      	movs	r2, #128	; 0x80
     8c2:	4b09      	ldr	r3, [pc, #36]	; (8e8 <_gclk_init_generators+0x28>)
     8c4:	0052      	lsls	r2, r2, #1
     8c6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     8c8:	4a08      	ldr	r2, [pc, #32]	; (8ec <_gclk_init_generators+0x2c>)
     8ca:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     8cc:	4a08      	ldr	r2, [pc, #32]	; (8f0 <_gclk_init_generators+0x30>)
     8ce:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     8d0:	4a08      	ldr	r2, [pc, #32]	; (8f4 <_gclk_init_generators+0x34>)
     8d2:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     8d4:	2281      	movs	r2, #129	; 0x81
     8d6:	0052      	lsls	r2, r2, #1
     8d8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     8da:	4a07      	ldr	r2, [pc, #28]	; (8f8 <_gclk_init_generators+0x38>)
     8dc:	605a      	str	r2, [r3, #4]
	((Gclk *)hw)->GENDIV.reg = data;
     8de:	4a07      	ldr	r2, [pc, #28]	; (8fc <_gclk_init_generators+0x3c>)
     8e0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     8e2:	4a07      	ldr	r2, [pc, #28]	; (900 <_gclk_init_generators+0x40>)
     8e4:	605a      	str	r2, [r3, #4]
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SRC
	                               | GCLK_GENCTRL_ID(8));
#endif
}
     8e6:	4770      	bx	lr
     8e8:	40000c00 	.word	0x40000c00
     8ec:	00010700 	.word	0x00010700
     8f0:	00000801 	.word	0x00000801
     8f4:	00010601 	.word	0x00010601
     8f8:	00010602 	.word	0x00010602
     8fc:	00002003 	.word	0x00002003
     900:	00010603 	.word	0x00010603

00000904 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     904:	4b06      	ldr	r3, [pc, #24]	; (920 <_pm_init+0x1c>)
     906:	7a1a      	ldrb	r2, [r3, #8]
     908:	b2d2      	uxtb	r2, r2
     90a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     90c:	7a5a      	ldrb	r2, [r3, #9]
     90e:	b2d2      	uxtb	r2, r2
     910:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     912:	7a9a      	ldrb	r2, [r3, #10]
     914:	b2d2      	uxtb	r2, r2
     916:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     918:	7ada      	ldrb	r2, [r3, #11]
     91a:	b2d2      	uxtb	r2, r2
     91c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     91e:	4770      	bx	lr
     920:	40000400 	.word	0x40000400

00000924 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
     924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     926:	0005      	movs	r5, r0
	ASSERT(device);
     928:	1e43      	subs	r3, r0, #1
     92a:	4198      	sbcs	r0, r3
{
     92c:	000c      	movs	r4, r1
	ASSERT(device);
     92e:	4e1b      	ldr	r6, [pc, #108]	; (99c <_usart_sync_init+0x78>)
     930:	b2c0      	uxtb	r0, r0
     932:	22bf      	movs	r2, #191	; 0xbf
     934:	0031      	movs	r1, r6
     936:	4f1a      	ldr	r7, [pc, #104]	; (9a0 <_usart_sync_init+0x7c>)
     938:	47b8      	blx	r7
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     93a:	4b1a      	ldr	r3, [pc, #104]	; (9a4 <_usart_sync_init+0x80>)
	device->hw = hw;
     93c:	602c      	str	r4, [r5, #0]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     93e:	18e3      	adds	r3, r4, r3
     940:	0a9b      	lsrs	r3, r3, #10
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
		if (_usarts[i].number == sercom_offset) {
     942:	b2db      	uxtb	r3, r3
     944:	2b02      	cmp	r3, #2
     946:	d004      	beq.n	952 <_usart_sync_init+0x2e>
			return i;
		}
	}

	ASSERT(false);
     948:	2291      	movs	r2, #145	; 0x91
     94a:	0031      	movs	r1, r6
     94c:	0092      	lsls	r2, r2, #2
     94e:	2000      	movs	r0, #0
     950:	47b8      	blx	r7
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     952:	2201      	movs	r2, #1
     954:	69e3      	ldr	r3, [r4, #28]
     956:	421a      	tst	r2, r3
     958:	d1fc      	bne.n	954 <_usart_sync_init+0x30>
     95a:	2203      	movs	r2, #3
     95c:	69e3      	ldr	r3, [r4, #28]
     95e:	421a      	tst	r2, r3
     960:	d1fc      	bne.n	95c <_usart_sync_init+0x38>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     962:	6823      	ldr	r3, [r4, #0]
static int32_t _usart_init(void *const hw)
{
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
     964:	079b      	lsls	r3, r3, #30
     966:	d416      	bmi.n	996 <_usart_sync_init+0x72>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     968:	2201      	movs	r2, #1
     96a:	69e3      	ldr	r3, [r4, #28]
     96c:	421a      	tst	r2, r3
     96e:	d1fc      	bne.n	96a <_usart_sync_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
     970:	6823      	ldr	r3, [r4, #0]
     972:	431a      	orrs	r2, r3
     974:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     976:	2201      	movs	r2, #1
     978:	69e3      	ldr	r3, [r4, #28]
     97a:	4013      	ands	r3, r2
     97c:	d1fc      	bne.n	978 <_usart_sync_init+0x54>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     97e:	4a0a      	ldr	r2, [pc, #40]	; (9a8 <_usart_sync_init+0x84>)
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
     980:	2000      	movs	r0, #0
     982:	6022      	str	r2, [r4, #0]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     984:	22c0      	movs	r2, #192	; 0xc0
     986:	0292      	lsls	r2, r2, #10
     988:	6062      	str	r2, [r4, #4]
	((Sercom *)hw)->USART.BAUD.reg = data;
     98a:	4a08      	ldr	r2, [pc, #32]	; (9ac <_usart_sync_init+0x88>)
     98c:	81a2      	strh	r2, [r4, #12]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     98e:	2230      	movs	r2, #48	; 0x30
	((Sercom *)hw)->USART.RXPL.reg = data;
     990:	73a3      	strb	r3, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     992:	54a3      	strb	r3, [r4, r2]
}
     994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_DENIED;
     996:	2011      	movs	r0, #17
     998:	4240      	negs	r0, r0
	return _usart_init(hw);
     99a:	e7fb      	b.n	994 <_usart_sync_init+0x70>
     99c:	00000fd0 	.word	0x00000fd0
     9a0:	0000082d 	.word	0x0000082d
     9a4:	bdfff800 	.word	0xbdfff800
     9a8:	40310004 	.word	0x40310004
     9ac:	ffffd8ad 	.word	0xffffd8ad

000009b0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     9b0:	6803      	ldr	r3, [r0, #0]
     9b2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     9b4:	8519      	strh	r1, [r3, #40]	; 0x28
}
     9b6:	4770      	bx	lr

000009b8 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     9b8:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     9ba:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     9bc:	b2c0      	uxtb	r0, r0
}
     9be:	4770      	bx	lr

000009c0 <_usart_sync_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     9c0:	6803      	ldr	r3, [r0, #0]
     9c2:	2001      	movs	r0, #1
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     9c4:	7e1b      	ldrb	r3, [r3, #24]
     9c6:	4018      	ands	r0, r3
}
     9c8:	4770      	bx	lr
     9ca:	46c0      	nop			; (mov r8, r8)

000009cc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     9cc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     9ce:	7e18      	ldrb	r0, [r3, #24]
     9d0:	0740      	lsls	r0, r0, #29
     9d2:	0fc0      	lsrs	r0, r0, #31
}
     9d4:	4770      	bx	lr
     9d6:	46c0      	nop			; (mov r8, r8)

000009d8 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9da:	46c6      	mov	lr, r8
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     9dc:	4b42      	ldr	r3, [pc, #264]	; (ae8 <_spi_m_sync_init+0x110>)
{
     9de:	b500      	push	{lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     9e0:	18cb      	adds	r3, r1, r3
     9e2:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
     9e4:	b2db      	uxtb	r3, r3
{
     9e6:	0006      	movs	r6, r0
     9e8:	000c      	movs	r4, r1
		if (sercomspi_regs[i].n == n) {
     9ea:	2b01      	cmp	r3, #1
     9ec:	d04c      	beq.n	a88 <_spi_m_sync_init+0xb0>
	return NULL;
     9ee:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     9f0:	2800      	cmp	r0, #0
     9f2:	d100      	bne.n	9f6 <_spi_m_sync_init+0x1e>
     9f4:	e06c      	b.n	ad0 <_spi_m_sync_init+0xf8>
     9f6:	0020      	movs	r0, r4
     9f8:	4b3c      	ldr	r3, [pc, #240]	; (aec <_spi_m_sync_init+0x114>)
     9fa:	4a3d      	ldr	r2, [pc, #244]	; (af0 <_spi_m_sync_init+0x118>)
     9fc:	4698      	mov	r8, r3
     9fe:	1e43      	subs	r3, r0, #1
     a00:	4198      	sbcs	r0, r3
     a02:	4641      	mov	r1, r8
     a04:	b2c0      	uxtb	r0, r0
     a06:	4f3b      	ldr	r7, [pc, #236]	; (af4 <_spi_m_sync_init+0x11c>)
     a08:	47b8      	blx	r7

	if (regs == NULL) {
     a0a:	2d00      	cmp	r5, #0
     a0c:	d065      	beq.n	ada <_spi_m_sync_init+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     a0e:	2201      	movs	r2, #1
     a10:	69e3      	ldr	r3, [r4, #28]
     a12:	421a      	tst	r2, r3
     a14:	d1fc      	bne.n	a10 <_spi_m_sync_init+0x38>
     a16:	2203      	movs	r2, #3
     a18:	69e3      	ldr	r3, [r4, #28]
     a1a:	421a      	tst	r2, r3
     a1c:	d1fc      	bne.n	a18 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     a1e:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     a20:	079b      	lsls	r3, r3, #30
     a22:	d45d      	bmi.n	ae0 <_spi_m_sync_init+0x108>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     a24:	2201      	movs	r2, #1
     a26:	69e3      	ldr	r3, [r4, #28]
     a28:	421a      	tst	r2, r3
     a2a:	d1fc      	bne.n	a26 <_spi_m_sync_init+0x4e>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
     a2c:	6823      	ldr	r3, [r4, #0]
     a2e:	431a      	orrs	r2, r3
     a30:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     a32:	2201      	movs	r2, #1
     a34:	69e3      	ldr	r3, [r4, #28]
     a36:	421a      	tst	r2, r3
     a38:	d1fc      	bne.n	a34 <_spi_m_sync_init+0x5c>
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     a3a:	231c      	movs	r3, #28
     a3c:	682a      	ldr	r2, [r5, #0]
	dev->prvt = hw;
     a3e:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     a40:	4013      	ands	r3, r2
     a42:	2b08      	cmp	r3, #8
     a44:	d024      	beq.n	a90 <_spi_m_sync_init+0xb8>
	ASSERT(hw && regs);
     a46:	228e      	movs	r2, #142	; 0x8e
     a48:	4641      	mov	r1, r8
     a4a:	0112      	lsls	r2, r2, #4
     a4c:	2001      	movs	r0, #1
     a4e:	47b8      	blx	r7
	hri_sercomspi_write_CTRLA_reg(
     a50:	682a      	ldr	r2, [r5, #0]
     a52:	4b29      	ldr	r3, [pc, #164]	; (af8 <_spi_m_sync_init+0x120>)
     a54:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     a56:	6023      	str	r3, [r4, #0]
	hri_sercomspi_write_CTRLB_reg(
     a58:	2380      	movs	r3, #128	; 0x80
	    (regs->ctrlb
     a5a:	6869      	ldr	r1, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
     a5c:	4a27      	ldr	r2, [pc, #156]	; (afc <_spi_m_sync_init+0x124>)
	hri_sercomspi_write_CTRLB_reg(
     a5e:	029b      	lsls	r3, r3, #10
	        | (SERCOM_SPI_CTRLB_RXEN));
     a60:	400a      	ands	r2, r1
	hri_sercomspi_write_CTRLB_reg(
     a62:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     a64:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
     a66:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
     a68:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     a6a:	2330      	movs	r3, #48	; 0x30
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     a6c:	7b6a      	ldrb	r2, [r5, #13]
     a6e:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     a70:	2307      	movs	r3, #7
     a72:	400b      	ands	r3, r1
     a74:	1e5a      	subs	r2, r3, #1
     a76:	4193      	sbcs	r3, r2

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
     a78:	2000      	movs	r0, #0
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     a7a:	3301      	adds	r3, #1
     a7c:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
     a7e:	89eb      	ldrh	r3, [r5, #14]
     a80:	80f3      	strh	r3, [r6, #6]
}
     a82:	bc04      	pop	{r2}
     a84:	4690      	mov	r8, r2
     a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
     a88:	2800      	cmp	r0, #0
     a8a:	d018      	beq.n	abe <_spi_m_sync_init+0xe6>
			return &sercomspi_regs[i];
     a8c:	4d1c      	ldr	r5, [pc, #112]	; (b00 <_spi_m_sync_init+0x128>)
     a8e:	e7b2      	b.n	9f6 <_spi_m_sync_init+0x1e>
	ASSERT(hw && regs);
     a90:	4a1c      	ldr	r2, [pc, #112]	; (b04 <_spi_m_sync_init+0x12c>)
     a92:	4641      	mov	r1, r8
     a94:	2001      	movs	r0, #1
     a96:	47b8      	blx	r7
	hri_sercomspi_write_CTRLA_reg(
     a98:	682a      	ldr	r2, [r5, #0]
     a9a:	4b17      	ldr	r3, [pc, #92]	; (af8 <_spi_m_sync_init+0x120>)
     a9c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     a9e:	6023      	str	r3, [r4, #0]
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
     aa0:	6869      	ldr	r1, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     aa2:	4a19      	ldr	r2, [pc, #100]	; (b08 <_spi_m_sync_init+0x130>)
	hri_sercomspi_write_CTRLB_reg(hw,
     aa4:	4b19      	ldr	r3, [pc, #100]	; (b0c <_spi_m_sync_init+0x134>)
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     aa6:	400a      	ands	r2, r1
	hri_sercomspi_write_CTRLB_reg(hw,
     aa8:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     aaa:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
     aac:	68ab      	ldr	r3, [r5, #8]
     aae:	6263      	str	r3, [r4, #36]	; 0x24
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     ab0:	2330      	movs	r3, #48	; 0x30
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     ab2:	7b6a      	ldrb	r2, [r5, #13]
     ab4:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     ab6:	69e2      	ldr	r2, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
     ab8:	2a00      	cmp	r2, #0
     aba:	d1fc      	bne.n	ab6 <_spi_m_sync_init+0xde>
     abc:	e7d8      	b.n	a70 <_spi_m_sync_init+0x98>
	ASSERT(dev && hw);
     abe:	4b0b      	ldr	r3, [pc, #44]	; (aec <_spi_m_sync_init+0x114>)
     ac0:	4a0b      	ldr	r2, [pc, #44]	; (af0 <_spi_m_sync_init+0x118>)
     ac2:	0019      	movs	r1, r3
     ac4:	2000      	movs	r0, #0
     ac6:	4f0b      	ldr	r7, [pc, #44]	; (af4 <_spi_m_sync_init+0x11c>)
     ac8:	4698      	mov	r8, r3
     aca:	47b8      	blx	r7
			return &sercomspi_regs[i];
     acc:	4d0c      	ldr	r5, [pc, #48]	; (b00 <_spi_m_sync_init+0x128>)
     ace:	e79e      	b.n	a0e <_spi_m_sync_init+0x36>
	ASSERT(dev && hw);
     ad0:	4a07      	ldr	r2, [pc, #28]	; (af0 <_spi_m_sync_init+0x118>)
     ad2:	4906      	ldr	r1, [pc, #24]	; (aec <_spi_m_sync_init+0x114>)
     ad4:	2000      	movs	r0, #0
     ad6:	4b07      	ldr	r3, [pc, #28]	; (af4 <_spi_m_sync_init+0x11c>)
     ad8:	4798      	blx	r3
		return ERR_INVALID_ARG;
     ada:	200d      	movs	r0, #13
     adc:	4240      	negs	r0, r0
     ade:	e7d0      	b.n	a82 <_spi_m_sync_init+0xaa>
		return ERR_DENIED;
     ae0:	2011      	movs	r0, #17
     ae2:	4240      	negs	r0, r0
     ae4:	e7cd      	b.n	a82 <_spi_m_sync_init+0xaa>
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	bdfff800 	.word	0xbdfff800
     aec:	00000fd0 	.word	0x00000fd0
     af0:	00000916 	.word	0x00000916
     af4:	0000082d 	.word	0x0000082d
     af8:	fffffefc 	.word	0xfffffefc
     afc:	fffd1dbf 	.word	0xfffd1dbf
     b00:	00000fbc 	.word	0x00000fbc
     b04:	000008f4 	.word	0x000008f4
     b08:	fffdddbf 	.word	0xfffdddbf
     b0c:	00020240 	.word	0x00020240

00000b10 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b12:	46de      	mov	lr, fp
     b14:	464e      	mov	r6, r9
     b16:	4645      	mov	r5, r8
     b18:	4657      	mov	r7, sl
     b1a:	b5e0      	push	{r5, r6, r7, lr}
	void *                 hw   = dev->prvt;
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     b1c:	680b      	ldr	r3, [r1, #0]
	void *                 hw   = dev->prvt;
     b1e:	6804      	ldr	r4, [r0, #0]
{
     b20:	4680      	mov	r8, r0
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     b22:	469b      	mov	fp, r3
     b24:	7903      	ldrb	r3, [r0, #4]

	ASSERT(dev && hw);
     b26:	0020      	movs	r0, r4
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     b28:	4699      	mov	r9, r3
	ASSERT(dev && hw);
     b2a:	1e43      	subs	r3, r0, #1
     b2c:	4198      	sbcs	r0, r3
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     b2e:	684d      	ldr	r5, [r1, #4]
	ASSERT(dev && hw);
     b30:	4b47      	ldr	r3, [pc, #284]	; (c50 <_spi_m_sync_trans+0x140>)
{
     b32:	000e      	movs	r6, r1
	ASSERT(dev && hw);
     b34:	b2c0      	uxtb	r0, r0
     b36:	4a47      	ldr	r2, [pc, #284]	; (c54 <_spi_m_sync_trans+0x144>)
     b38:	4947      	ldr	r1, [pc, #284]	; (c58 <_spi_m_sync_trans+0x148>)
     b3a:	4798      	blx	r3
     b3c:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     b3e:	075b      	lsls	r3, r3, #29
     b40:	d000      	beq.n	b44 <_spi_m_sync_trans+0x34>
     b42:	e07e      	b.n	c42 <_spi_m_sync_trans+0x132>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     b44:	2303      	movs	r3, #3
     b46:	69e0      	ldr	r0, [r4, #28]
     b48:	4018      	ands	r0, r3
     b4a:	d1fc      	bne.n	b46 <_spi_m_sync_trans+0x36>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     b4c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     b4e:	079b      	lsls	r3, r3, #30
     b50:	d400      	bmi.n	b54 <_spi_m_sync_trans+0x44>
     b52:	e079      	b.n	c48 <_spi_m_sync_trans+0x138>
     b54:	464b      	mov	r3, r9
     b56:	2b01      	cmp	r3, #1
     b58:	d944      	bls.n	be4 <_spi_m_sync_trans+0xd4>
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     b5a:	2304      	movs	r3, #4
     b5c:	469c      	mov	ip, r3
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     b5e:	3b03      	subs	r3, #3
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     b60:	2100      	movs	r1, #0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     b62:	4699      	mov	r9, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     b64:	4662      	mov	r2, ip
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     b66:	7e23      	ldrb	r3, [r4, #24]
     b68:	b2db      	uxtb	r3, r3
     b6a:	421a      	tst	r2, r3
     b6c:	d01a      	beq.n	ba4 <_spi_m_sync_trans+0x94>
	return ((Sercom *)hw)->SPI.DATA.reg;
     b6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     b70:	2d00      	cmp	r5, #0
     b72:	d003      	beq.n	b7c <_spi_m_sync_trans+0x6c>
		*ctrl->rxbuf++ = (uint8_t)data;
     b74:	702a      	strb	r2, [r5, #0]
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     b76:	0a12      	lsrs	r2, r2, #8
     b78:	706a      	strb	r2, [r5, #1]
     b7a:	3502      	adds	r5, #2
	ctrl->rxcnt++;
     b7c:	3101      	adds	r1, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     b7e:	b25b      	sxtb	r3, r3
     b80:	2b00      	cmp	r3, #0
     b82:	db27      	blt.n	bd4 <_spi_m_sync_trans+0xc4>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     b84:	68b3      	ldr	r3, [r6, #8]
     b86:	4283      	cmp	r3, r0
     b88:	d8ec      	bhi.n	b64 <_spi_m_sync_trans+0x54>
     b8a:	428b      	cmp	r3, r1
     b8c:	d8ea      	bhi.n	b64 <_spi_m_sync_trans+0x54>
	tmp &= mask;
     b8e:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     b90:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     b92:	421a      	tst	r2, r3
     b94:	d0fc      	beq.n	b90 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     b96:	7622      	strb	r2, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     b98:	bc3c      	pop	{r2, r3, r4, r5}
     b9a:	4690      	mov	r8, r2
     b9c:	4699      	mov	r9, r3
     b9e:	46a2      	mov	sl, r4
     ba0:	46ab      	mov	fp, r5
     ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
     ba4:	4288      	cmp	r0, r1
     ba6:	d8ea      	bhi.n	b7e <_spi_m_sync_trans+0x6e>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     ba8:	464a      	mov	r2, r9
     baa:	421a      	tst	r2, r3
     bac:	d0e7      	beq.n	b7e <_spi_m_sync_trans+0x6e>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     bae:	4642      	mov	r2, r8
	if (ctrl->txbuf) {
     bb0:	465f      	mov	r7, fp
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     bb2:	88d2      	ldrh	r2, [r2, #6]
	if (ctrl->txbuf) {
     bb4:	2f00      	cmp	r7, #0
     bb6:	d008      	beq.n	bca <_spi_m_sync_trans+0xba>
			data |= (*ctrl->txbuf) << 8;
     bb8:	783a      	ldrb	r2, [r7, #0]
     bba:	4692      	mov	sl, r2
     bbc:	787a      	ldrb	r2, [r7, #1]
     bbe:	4657      	mov	r7, sl
     bc0:	0212      	lsls	r2, r2, #8
     bc2:	433a      	orrs	r2, r7
			ctrl->txbuf++;
     bc4:	2702      	movs	r7, #2
     bc6:	46ba      	mov	sl, r7
     bc8:	44d3      	add	fp, sl
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     bca:	b25b      	sxtb	r3, r3
	ctrl->txcnt++;
     bcc:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
     bce:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     bd0:	2b00      	cmp	r3, #0
     bd2:	dad7      	bge.n	b84 <_spi_m_sync_trans+0x74>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     bd4:	2301      	movs	r3, #1
		return ERR_OVERFLOW;
     bd6:	2013      	movs	r0, #19
     bd8:	425b      	negs	r3, r3
     bda:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     bdc:	3381      	adds	r3, #129	; 0x81
     bde:	7623      	strb	r3, [r4, #24]
     be0:	4240      	negs	r0, r0
     be2:	e7d4      	b.n	b8e <_spi_m_sync_trans+0x7e>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     be4:	2301      	movs	r3, #1
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     be6:	2200      	movs	r2, #0
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     be8:	2704      	movs	r7, #4
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     bea:	469c      	mov	ip, r3
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     bec:	7e23      	ldrb	r3, [r4, #24]
     bee:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     bf0:	421f      	tst	r7, r3
     bf2:	d011      	beq.n	c18 <_spi_m_sync_trans+0x108>
	return ((Sercom *)hw)->SPI.DATA.reg;
     bf4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     bf6:	2d00      	cmp	r5, #0
     bf8:	d001      	beq.n	bfe <_spi_m_sync_trans+0xee>
		*ctrl->rxbuf++ = (uint8_t)data;
     bfa:	7029      	strb	r1, [r5, #0]
     bfc:	3501      	adds	r5, #1
	ctrl->rxcnt++;
     bfe:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     c00:	b25b      	sxtb	r3, r3
     c02:	2b00      	cmp	r3, #0
     c04:	dbe6      	blt.n	bd4 <_spi_m_sync_trans+0xc4>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     c06:	68b3      	ldr	r3, [r6, #8]
     c08:	4283      	cmp	r3, r0
     c0a:	d8ef      	bhi.n	bec <_spi_m_sync_trans+0xdc>
     c0c:	4293      	cmp	r3, r2
     c0e:	d9be      	bls.n	b8e <_spi_m_sync_trans+0x7e>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     c10:	7e23      	ldrb	r3, [r4, #24]
     c12:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     c14:	421f      	tst	r7, r3
     c16:	d1ed      	bne.n	bf4 <_spi_m_sync_trans+0xe4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     c18:	4290      	cmp	r0, r2
     c1a:	d8f1      	bhi.n	c00 <_spi_m_sync_trans+0xf0>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     c1c:	4661      	mov	r1, ip
     c1e:	4219      	tst	r1, r3
     c20:	d0ee      	beq.n	c00 <_spi_m_sync_trans+0xf0>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     c22:	4641      	mov	r1, r8
     c24:	88c9      	ldrh	r1, [r1, #6]
     c26:	4689      	mov	r9, r1
	if (ctrl->txbuf) {
     c28:	4659      	mov	r1, fp
     c2a:	2900      	cmp	r1, #0
     c2c:	d005      	beq.n	c3a <_spi_m_sync_trans+0x12a>
		data = *ctrl->txbuf++;
     c2e:	4659      	mov	r1, fp
     c30:	7809      	ldrb	r1, [r1, #0]
     c32:	4689      	mov	r9, r1
     c34:	2101      	movs	r1, #1
     c36:	468a      	mov	sl, r1
     c38:	44d3      	add	fp, sl
	((Sercom *)hw)->SPI.DATA.reg = data;
     c3a:	4649      	mov	r1, r9
	ctrl->txcnt++;
     c3c:	3001      	adds	r0, #1
     c3e:	62a1      	str	r1, [r4, #40]	; 0x28
     c40:	e7de      	b.n	c00 <_spi_m_sync_trans+0xf0>
		return ERR_BUSY;
     c42:	2004      	movs	r0, #4
     c44:	4240      	negs	r0, r0
     c46:	e7a7      	b.n	b98 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
     c48:	2014      	movs	r0, #20
     c4a:	4240      	negs	r0, r0
     c4c:	e7a4      	b.n	b98 <_spi_m_sync_trans+0x88>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	0000082d 	.word	0x0000082d
     c54:	00000a72 	.word	0x00000a72
     c58:	00000fd0 	.word	0x00000fd0

00000c5c <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
     c5c:	b510      	push	{r4, lr}
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     c5e:	4a0d      	ldr	r2, [pc, #52]	; (c94 <_sysctrl_init_sources+0x38>)
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     c60:	490d      	ldr	r1, [pc, #52]	; (c98 <_sysctrl_init_sources+0x3c>)
     c62:	6a13      	ldr	r3, [r2, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     c64:	6a10      	ldr	r0, [r2, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
     c66:	4c0d      	ldr	r4, [pc, #52]	; (c9c <_sysctrl_init_sources+0x40>)
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     c68:	0f80      	lsrs	r0, r0, #30
     c6a:	0780      	lsls	r0, r0, #30
	                                SYSCTRL_OSC8M_CALIB(calib) |
     c6c:	4019      	ands	r1, r3
	hri_sysctrl_write_OSC8M_reg(hw,
     c6e:	4320      	orrs	r0, r4
     c70:	4301      	orrs	r1, r0
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c72:	2002      	movs	r0, #2
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     c74:	6211      	str	r1, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c76:	6991      	ldr	r1, [r2, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
     c78:	02db      	lsls	r3, r3, #11
     c7a:	4301      	orrs	r1, r0
     c7c:	6191      	str	r1, [r2, #24]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     c7e:	2108      	movs	r1, #8
	hri_sysctrl_write_OSCULP32K_reg(hw,
     c80:	0edb      	lsrs	r3, r3, #27
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     c82:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     c84:	68d3      	ldr	r3, [r2, #12]
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     c86:	4219      	tst	r1, r3
     c88:	d0fc      	beq.n	c84 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     c8a:	2180      	movs	r1, #128	; 0x80
     c8c:	6a13      	ldr	r3, [r2, #32]
     c8e:	430b      	orrs	r3, r1
     c90:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     c92:	bd10      	pop	{r4, pc}
     c94:	40000800 	.word	0x40000800
     c98:	0fff0000 	.word	0x0fff0000
     c9c:	00000302 	.word	0x00000302

00000ca0 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     ca0:	2302      	movs	r3, #2
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     ca2:	2110      	movs	r1, #16
     ca4:	4a17      	ldr	r2, [pc, #92]	; (d04 <_sysctrl_init_referenced_generators+0x64>)
     ca6:	8493      	strh	r3, [r2, #36]	; 0x24
}

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     ca8:	68d3      	ldr	r3, [r2, #12]
     caa:	4219      	tst	r1, r3
     cac:	d0fc      	beq.n	ca8 <_sysctrl_init_referenced_generators+0x8>
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     cae:	4b16      	ldr	r3, [pc, #88]	; (d08 <_sysctrl_init_referenced_generators+0x68>)
     cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     cb2:	4b16      	ldr	r3, [pc, #88]	; (d0c <_sysctrl_init_referenced_generators+0x6c>)
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	0e9b      	lsrs	r3, r3, #26
     cb8:	2b3f      	cmp	r3, #63	; 0x3f
     cba:	d020      	beq.n	cfe <_sysctrl_init_referenced_generators+0x5e>
     cbc:	2280      	movs	r2, #128	; 0x80
     cbe:	029b      	lsls	r3, r3, #10
     cc0:	0092      	lsls	r2, r2, #2
     cc2:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     cc4:	4b0f      	ldr	r3, [pc, #60]	; (d04 <_sysctrl_init_referenced_generators+0x64>)

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
	tmp &= mask;
     cc6:	2110      	movs	r1, #16
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     cc8:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     cca:	2293      	movs	r2, #147	; 0x93
     ccc:	0052      	lsls	r2, r2, #1
     cce:	849a      	strh	r2, [r3, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     cd0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     cd2:	0752      	lsls	r2, r2, #29
     cd4:	d50c      	bpl.n	cf0 <_sysctrl_init_referenced_generators+0x50>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     cd6:	68da      	ldr	r2, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
     cd8:	4211      	tst	r1, r2
     cda:	d0fc      	beq.n	cd6 <_sysctrl_init_referenced_generators+0x36>
	return ((Gclk *)hw)->GENDIV.reg;
}

static inline bool hri_gclk_get_STATUS_SYNCBUSY_bit(const void *const hw)
{
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
     cdc:	4a0c      	ldr	r2, [pc, #48]	; (d10 <_sysctrl_init_referenced_generators+0x70>)
     cde:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
     ce0:	09db      	lsrs	r3, r3, #7
     ce2:	d1fc      	bne.n	cde <_sysctrl_init_referenced_generators+0x3e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     ce4:	2102      	movs	r1, #2
     ce6:	4a07      	ldr	r2, [pc, #28]	; (d04 <_sysctrl_init_referenced_generators+0x64>)
     ce8:	6993      	ldr	r3, [r2, #24]
     cea:	438b      	bics	r3, r1
     cec:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     cee:	4770      	bx	lr
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     cf0:	68da      	ldr	r2, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     cf2:	4211      	tst	r1, r2
     cf4:	d1f2      	bne.n	cdc <_sysctrl_init_referenced_generators+0x3c>
     cf6:	68da      	ldr	r2, [r3, #12]
     cf8:	4211      	tst	r1, r2
     cfa:	d0f9      	beq.n	cf0 <_sysctrl_init_referenced_generators+0x50>
     cfc:	e7ee      	b.n	cdc <_sysctrl_init_referenced_generators+0x3c>
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     cfe:	22fc      	movs	r2, #252	; 0xfc
     d00:	01d2      	lsls	r2, r2, #7
     d02:	e7df      	b.n	cc4 <_sysctrl_init_referenced_generators+0x24>
     d04:	40000800 	.word	0x40000800
     d08:	0401bb80 	.word	0x0401bb80
     d0c:	00806024 	.word	0x00806024
     d10:	40000c00 	.word	0x40000c00

00000d14 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     d14:	4b02      	ldr	r3, [pc, #8]	; (d20 <_delay_init+0xc>)
     d16:	4a03      	ldr	r2, [pc, #12]	; (d24 <_delay_init+0x10>)
     d18:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     d1a:	2207      	movs	r2, #7
     d1c:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     d1e:	4770      	bx	lr
     d20:	e000e010 	.word	0xe000e010
     d24:	00ffffff 	.word	0x00ffffff

00000d28 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
     d28:	0e0b      	lsrs	r3, r1, #24
{
     d2a:	b570      	push	{r4, r5, r6, lr}
	uint32_t buf = cycles;

	while (n--) {
     d2c:	1e5e      	subs	r6, r3, #1
     d2e:	b2f6      	uxtb	r6, r6
     d30:	2b00      	cmp	r3, #0
     d32:	d013      	beq.n	d5c <_delay_cycles+0x34>
		SysTick->LOAD = 0xFFFFFF;
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     d34:	2080      	movs	r0, #128	; 0x80
	while (n--) {
     d36:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     d38:	4a0d      	ldr	r2, [pc, #52]	; (d70 <_delay_cycles+0x48>)
     d3a:	4d0e      	ldr	r5, [pc, #56]	; (d74 <_delay_cycles+0x4c>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     d3c:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     d3e:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     d40:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     d42:	6813      	ldr	r3, [r2, #0]
     d44:	4203      	tst	r3, r0
     d46:	d0fc      	beq.n	d42 <_delay_cycles+0x1a>
	while (n--) {
     d48:	3c01      	subs	r4, #1
     d4a:	b2e4      	uxtb	r4, r4
     d4c:	2cff      	cmp	r4, #255	; 0xff
     d4e:	d1f6      	bne.n	d3e <_delay_cycles+0x16>
     d50:	0633      	lsls	r3, r6, #24
     d52:	1af6      	subs	r6, r6, r3
     d54:	4b08      	ldr	r3, [pc, #32]	; (d78 <_delay_cycles+0x50>)
     d56:	469c      	mov	ip, r3
     d58:	4461      	add	r1, ip
     d5a:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     d5c:	4a04      	ldr	r2, [pc, #16]	; (d70 <_delay_cycles+0x48>)
     d5e:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
     d60:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     d62:	2180      	movs	r1, #128	; 0x80
     d64:	0249      	lsls	r1, r1, #9
     d66:	6813      	ldr	r3, [r2, #0]
     d68:	420b      	tst	r3, r1
     d6a:	d0fc      	beq.n	d66 <_delay_cycles+0x3e>
		;
}
     d6c:	bd70      	pop	{r4, r5, r6, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	e000e010 	.word	0xe000e010
     d74:	00ffffff 	.word	0x00ffffff
     d78:	ff000001 	.word	0xff000001

00000d7c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	464e      	mov	r6, r9
     d80:	4645      	mov	r5, r8
     d82:	46de      	mov	lr, fp
     d84:	4657      	mov	r7, sl
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
     d86:	4b3a      	ldr	r3, [pc, #232]	; (e70 <_timer_init+0xf4>)
{
     d88:	b5e0      	push	{r5, r6, r7, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
     d8a:	18cd      	adds	r5, r1, r3
     d8c:	0aad      	lsrs	r5, r5, #10
     d8e:	b2ed      	uxtb	r5, r5
{
     d90:	b083      	sub	sp, #12
     d92:	4681      	mov	r9, r0
     d94:	000c      	movs	r4, r1
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
     d96:	2d00      	cmp	r5, #0
     d98:	d05b      	beq.n	e52 <_timer_init+0xd6>
			return i;
		}
	}

	ASSERT(false);
     d9a:	2246      	movs	r2, #70	; 0x46
     d9c:	4b35      	ldr	r3, [pc, #212]	; (e74 <_timer_init+0xf8>)
     d9e:	32ff      	adds	r2, #255	; 0xff
     da0:	0019      	movs	r1, r3
     da2:	2000      	movs	r0, #0
     da4:	4f34      	ldr	r7, [pc, #208]	; (e78 <_timer_init+0xfc>)
     da6:	4698      	mov	r8, r3
     da8:	47b8      	blx	r7
     daa:	2300      	movs	r3, #0
     dac:	2600      	movs	r6, #0
     dae:	469b      	mov	fp, r3
     db0:	469a      	mov	sl, r3
     db2:	9301      	str	r3, [sp, #4]
     db4:	9300      	str	r3, [sp, #0]
	device->hw = hw;
     db6:	464b      	mov	r3, r9
	ASSERT(ARRAY_SIZE(_tcs));
     db8:	2293      	movs	r2, #147	; 0x93
	device->hw = hw;
     dba:	60dc      	str	r4, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
     dbc:	4641      	mov	r1, r8
     dbe:	2001      	movs	r0, #1
     dc0:	47b8      	blx	r7
typedef uint8_t  hri_tc_per_reg_t;
typedef uint8_t  hri_tc_status_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY)
     dc2:	7be3      	ldrb	r3, [r4, #15]
     dc4:	09db      	lsrs	r3, r3, #7
     dc6:	d1fc      	bne.n	dc2 <_timer_init+0x46>
}

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
     dc8:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
     dca:	079b      	lsls	r3, r3, #30
     dcc:	d44d      	bmi.n	e6a <_timer_init+0xee>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
     dce:	2201      	movs	r2, #1
     dd0:	8823      	ldrh	r3, [r4, #0]
     dd2:	4313      	orrs	r3, r2
     dd4:	b29b      	uxth	r3, r3
     dd6:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT8.STATUS.bit.SYNCBUSY)
     dd8:	7be3      	ldrb	r3, [r4, #15]
     dda:	09db      	lsrs	r3, r3, #7
     ddc:	d1fc      	bne.n	dd8 <_timer_init+0x5c>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
     dde:	4652      	mov	r2, sl
     de0:	8022      	strh	r2, [r4, #0]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
     de2:	7223      	strb	r3, [r4, #8]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
     de4:	2200      	movs	r2, #0
     de6:	8163      	strh	r3, [r4, #10]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
     de8:	2e08      	cmp	r6, #8
     dea:	d028      	beq.n	e3e <_timer_init+0xc2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
     dec:	2e00      	cmp	r6, #0
     dee:	d01a      	beq.n	e26 <_timer_init+0xaa>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
     df0:	2e04      	cmp	r6, #4
     df2:	d028      	beq.n	e46 <_timer_init+0xca>
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     df4:	2301      	movs	r3, #1
     df6:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
     df8:	4b20      	ldr	r3, [pc, #128]	; (e7c <_timer_init+0x100>)
     dfa:	429c      	cmp	r4, r3
     dfc:	d01b      	beq.n	e36 <_timer_init+0xba>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     dfe:	231f      	movs	r3, #31
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
     e00:	3512      	adds	r5, #18
     e02:	401d      	ands	r5, r3
     e04:	3b1e      	subs	r3, #30
     e06:	40ab      	lsls	r3, r5
     e08:	2180      	movs	r1, #128	; 0x80
	return ERR_NONE;
     e0a:	2000      	movs	r0, #0
     e0c:	4a1c      	ldr	r2, [pc, #112]	; (e80 <_timer_init+0x104>)
     e0e:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     e10:	3101      	adds	r1, #1
     e12:	31ff      	adds	r1, #255	; 0xff
     e14:	5053      	str	r3, [r2, r1]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e16:	6013      	str	r3, [r2, #0]
}
     e18:	b003      	add	sp, #12
     e1a:	bc3c      	pop	{r2, r3, r4, r5}
     e1c:	4690      	mov	r8, r2
     e1e:	4699      	mov	r9, r3
     e20:	46a2      	mov	sl, r4
     e22:	46ab      	mov	fp, r5
     e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e26:	465b      	mov	r3, fp
     e28:	8323      	strh	r3, [r4, #24]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e2a:	2301      	movs	r3, #1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
     e2c:	8366      	strh	r6, [r4, #26]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     e2e:	7363      	strb	r3, [r4, #13]
	if (hw == TC3) {
     e30:	4b12      	ldr	r3, [pc, #72]	; (e7c <_timer_init+0x100>)
     e32:	429c      	cmp	r4, r3
     e34:	d1e3      	bne.n	dfe <_timer_init+0x82>
		_tc3_dev = (struct _timer_device *)dev;
     e36:	464a      	mov	r2, r9
     e38:	4b12      	ldr	r3, [pc, #72]	; (e84 <_timer_init+0x108>)
     e3a:	601a      	str	r2, [r3, #0]
     e3c:	e7df      	b.n	dfe <_timer_init+0x82>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
     e3e:	9a00      	ldr	r2, [sp, #0]
     e40:	61a2      	str	r2, [r4, #24]
     e42:	61e3      	str	r3, [r4, #28]
     e44:	e7d6      	b.n	df4 <_timer_init+0x78>
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
     e46:	466b      	mov	r3, sp
     e48:	791b      	ldrb	r3, [r3, #4]
     e4a:	7623      	strb	r3, [r4, #24]
     e4c:	7662      	strb	r2, [r4, #25]
	((Tc *)hw)->COUNT8.PER.reg = data;
     e4e:	7522      	strb	r2, [r4, #20]
     e50:	e7d0      	b.n	df4 <_timer_init+0x78>
		if (_tcs[i].number == tc_offset) {
     e52:	2332      	movs	r3, #50	; 0x32
     e54:	9301      	str	r3, [sp, #4]
     e56:	469b      	mov	fp, r3
     e58:	9300      	str	r3, [sp, #0]
     e5a:	3337      	adds	r3, #55	; 0x37
     e5c:	33ff      	adds	r3, #255	; 0xff
     e5e:	469a      	mov	sl, r3
     e60:	4b04      	ldr	r3, [pc, #16]	; (e74 <_timer_init+0xf8>)
     e62:	2608      	movs	r6, #8
     e64:	4698      	mov	r8, r3
     e66:	4f04      	ldr	r7, [pc, #16]	; (e78 <_timer_init+0xfc>)
     e68:	e7a5      	b.n	db6 <_timer_init+0x3a>
		return ERR_DENIED;
     e6a:	2011      	movs	r0, #17
     e6c:	4240      	negs	r0, r0
     e6e:	e7d3      	b.n	e18 <_timer_init+0x9c>
     e70:	bdffd400 	.word	0xbdffd400
     e74:	00000fec 	.word	0x00000fec
     e78:	0000082d 	.word	0x0000082d
     e7c:	42002c00 	.word	0x42002c00
     e80:	e000e100 	.word	0xe000e100
     e84:	20000020 	.word	0x20000020

00000e88 <_tc_get_timer>:
}
     e88:	2000      	movs	r0, #0
     e8a:	4770      	bx	lr

00000e8c <TC3_Handler>:
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     e8c:	2201      	movs	r2, #1
	tc_interrupt_handler(_tc3_dev);
     e8e:	4b05      	ldr	r3, [pc, #20]	; (ea4 <TC3_Handler+0x18>)
{
     e90:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
     e92:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
     e94:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     e96:	7b99      	ldrb	r1, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     e98:	420a      	tst	r2, r1
     e9a:	d002      	beq.n	ea2 <TC3_Handler+0x16>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     e9c:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
     e9e:	6803      	ldr	r3, [r0, #0]
     ea0:	4798      	blx	r3
}
     ea2:	bd10      	pop	{r4, pc}
     ea4:	20000020 	.word	0x20000020

00000ea8 <main>:
#include <atmel_start.h>
#include "./app/app.h"

int main(void)
{
     ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Initializes MCU, MCU drivers and middleware
	atmel_start_init();
     eaa:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <main+0x2c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     eac:	24c0      	movs	r4, #192	; 0xc0
     eae:	4798      	blx	r3
     eb0:	2398      	movs	r3, #152	; 0x98
     eb2:	2208      	movs	r2, #8
     eb4:	05e4      	lsls	r4, r4, #23
     eb6:	50e2      	str	r2, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eb8:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     eba:	269c      	movs	r6, #156	; 0x9c
     ebc:	2508      	movs	r5, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ebe:	051b      	lsls	r3, r3, #20
     ec0:	4f05      	ldr	r7, [pc, #20]	; (ed8 <main+0x30>)
     ec2:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     ec4:	2380      	movs	r3, #128	; 0x80
    // Application Loop
	while (1) 
    {
        gpio_toggle_pin_level(PIN_LED_RX);
        gpio_toggle_pin_level(PIN_LED_TX);
        delay_ms(500);
     ec6:	20fa      	movs	r0, #250	; 0xfa
     ec8:	051b      	lsls	r3, r3, #20
     eca:	51a5      	str	r5, [r4, r6]
     ecc:	0040      	lsls	r0, r0, #1
     ece:	61e3      	str	r3, [r4, #28]
     ed0:	47b8      	blx	r7
     ed2:	e7f7      	b.n	ec4 <main+0x1c>
     ed4:	00000115 	.word	0x00000115
     ed8:	000004cd 	.word	0x000004cd

00000edc <SysTick_Handler>:


void SysTick_Handler(void)
{
    // Required handler for Delay using SysTick
}
     edc:	4770      	bx	lr
     ede:	46c0      	nop			; (mov r8, r8)

00000ee0 <__libc_init_array>:
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	2600      	movs	r6, #0
     ee4:	4d0c      	ldr	r5, [pc, #48]	; (f18 <__libc_init_array+0x38>)
     ee6:	4c0d      	ldr	r4, [pc, #52]	; (f1c <__libc_init_array+0x3c>)
     ee8:	1b64      	subs	r4, r4, r5
     eea:	10a4      	asrs	r4, r4, #2
     eec:	42a6      	cmp	r6, r4
     eee:	d109      	bne.n	f04 <__libc_init_array+0x24>
     ef0:	2600      	movs	r6, #0
     ef2:	f000 f885 	bl	1000 <_init>
     ef6:	4d0a      	ldr	r5, [pc, #40]	; (f20 <__libc_init_array+0x40>)
     ef8:	4c0a      	ldr	r4, [pc, #40]	; (f24 <__libc_init_array+0x44>)
     efa:	1b64      	subs	r4, r4, r5
     efc:	10a4      	asrs	r4, r4, #2
     efe:	42a6      	cmp	r6, r4
     f00:	d105      	bne.n	f0e <__libc_init_array+0x2e>
     f02:	bd70      	pop	{r4, r5, r6, pc}
     f04:	00b3      	lsls	r3, r6, #2
     f06:	58eb      	ldr	r3, [r5, r3]
     f08:	4798      	blx	r3
     f0a:	3601      	adds	r6, #1
     f0c:	e7ee      	b.n	eec <__libc_init_array+0xc>
     f0e:	00b3      	lsls	r3, r6, #2
     f10:	58eb      	ldr	r3, [r5, r3]
     f12:	4798      	blx	r3
     f14:	3601      	adds	r6, #1
     f16:	e7f2      	b.n	efe <__libc_init_array+0x1e>
     f18:	0000100c 	.word	0x0000100c
     f1c:	0000100c 	.word	0x0000100c
     f20:	0000100c 	.word	0x0000100c
     f24:	00001010 	.word	0x00001010

00000f28 <memcpy>:
     f28:	2300      	movs	r3, #0
     f2a:	b510      	push	{r4, lr}
     f2c:	429a      	cmp	r2, r3
     f2e:	d100      	bne.n	f32 <memcpy+0xa>
     f30:	bd10      	pop	{r4, pc}
     f32:	5ccc      	ldrb	r4, [r1, r3]
     f34:	54c4      	strb	r4, [r0, r3]
     f36:	3301      	adds	r3, #1
     f38:	e7f8      	b.n	f2c <memcpy+0x4>

00000f3a <memset>:
     f3a:	0003      	movs	r3, r0
     f3c:	1882      	adds	r2, r0, r2
     f3e:	4293      	cmp	r3, r2
     f40:	d100      	bne.n	f44 <memset+0xa>
     f42:	4770      	bx	lr
     f44:	7019      	strb	r1, [r3, #0]
     f46:	3301      	adds	r3, #1
     f48:	e7f9      	b.n	f3e <memset+0x4>
     f4a:	0000      	movs	r0, r0
     f4c:	682f2e2e 	.word	0x682f2e2e
     f50:	732f6c61 	.word	0x732f6c61
     f54:	682f6372 	.word	0x682f6372
     f58:	735f6c61 	.word	0x735f6c61
     f5c:	6d5f6970 	.word	0x6d5f6970
     f60:	6e79735f 	.word	0x6e79735f
     f64:	00632e63 	.word	0x00632e63
     f68:	682f2e2e 	.word	0x682f2e2e
     f6c:	732f6c61 	.word	0x732f6c61
     f70:	682f6372 	.word	0x682f6372
     f74:	745f6c61 	.word	0x745f6c61
     f78:	72656d69 	.word	0x72656d69
     f7c:	0000632e 	.word	0x0000632e
     f80:	682f2e2e 	.word	0x682f2e2e
     f84:	732f6c61 	.word	0x732f6c61
     f88:	682f6372 	.word	0x682f6372
     f8c:	755f6c61 	.word	0x755f6c61
     f90:	74726173 	.word	0x74726173
     f94:	6e79735f 	.word	0x6e79735f
     f98:	00632e63 	.word	0x00632e63
     f9c:	682f2e2e 	.word	0x682f2e2e
     fa0:	752f6c61 	.word	0x752f6c61
     fa4:	736c6974 	.word	0x736c6974
     fa8:	6372732f 	.word	0x6372732f
     fac:	6974752f 	.word	0x6974752f
     fb0:	6c5f736c 	.word	0x6c5f736c
     fb4:	2e747369 	.word	0x2e747369
     fb8:	00000063 	.word	0x00000063

00000fbc <sercomspi_regs>:
     fbc:	0030000c 00020000 00000000 01ff00ff     ..0.............
     fcc:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
     fdc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
     fec:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
     ffc:	0000632e                                .c..

00001000 <_init>:
    1000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1006:	bc08      	pop	{r3}
    1008:	469e      	mov	lr, r3
    100a:	4770      	bx	lr

0000100c <__init_array_start>:
    100c:	000000dd 	.word	0x000000dd

00001010 <_fini>:
    1010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1016:	bc08      	pop	{r3}
    1018:	469e      	mov	lr, r3
    101a:	4770      	bx	lr

0000101c <__fini_array_start>:
    101c:	000000b5 	.word	0x000000b5
